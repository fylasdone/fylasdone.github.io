<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IOS自动化</title>
      <link href="/2024/01/22/7-IOS%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2024/01/22/7-IOS%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> IOS自动化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>性能测试</title>
      <link href="/2024/01/22/9-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/01/22/9-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Appium框架</title>
      <link href="/2024/01/22/6-Appium%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/01/22/6-Appium%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Appium框架 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>接口测试</title>
      <link href="/2024/01/22/8-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/01/22/8-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="基础版"><a href="#基础版" class="headerlink" title="基础版"></a>基础版</h1><h2 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h2><p>讲解http常见的请求方法和使用</p><p>WEB API接口 大都是基于 HTTP 协议的，所以，要进行接口测试 首先要了解 HTTP 协议 的 基础知识。</p><p>HTTP 协议 全称是 超文本传输协议， 英文是 Hypertext Transfer Protocol 。</p><p>HTTP 最初是用来 在 浏览器和 网站服务器（web服务）之间 传输超文本（网页、视频、图片等）信息的。</p><p>由于 HTTP 简洁易用，后来，不仅仅是浏览器 和 服务器之间 使用它， 服务器和服务器之间， 手机App 和 服务器之间， 都广泛的采用。 成了一个软件系统间 通信 的首选协议 之一。</p><p>HTTP 有好几个版本，包括： <code>0.9</code> 、 <code>1.0</code> 、 <code>1.1</code> 、 <code>2</code> 、 <code>3</code> ，当前最广泛使用的是 <code>HTTP/1.1</code> 版本。</p><p>HTTP 协议最大的特点是 通讯双方 分为 <code>客户端</code> 和 <code>服务端</code> 。</p><p>HTTP3 以前版本 （除了HTTP3） , 都是 基于 TCP 协议的， 所以要进行通讯，客户端 必须先 和服务端 创建 TCP 连接。</p><p>而且 HTTP 双方的信息交互，必须是这样一种方式：</p><ul><li>客户端 先发送 http请求（request）给 服务端</li><li>然后服务端 发送 http响应（response）给 客户端</li></ul><p>特别注意：HTTP协议中，服务端不能主动先发送信息给 客户端。</p><ul><li>http1.0定义了三种：<ul><li>GET: 向服务器获取资源，比如常见的查询请求</li><li>POST: 向服务器提交数据而发送的请求</li><li>Head: 和get类似，返回的响应中没有具体的内容，用于获取报头</li></ul></li><li>http1.1定义了六种<ul><li>PUT：一般是用于更新请求，比如更新个人信息、商品信息全量更新</li><li>PATCH：PUT 方法的补充,更新指定资源的部分数据</li><li>DELETE：用于删除指定的资源</li><li>OPTIONS: 获取服务器支持的HTTP请求方法,服务器性能、跨域检查等</li><li>CONNECT: 方法的作用就是把服务器作为跳板，让服务器代替用户去访问其它网页，之后把数据原原本本的返回给用户，网页开发基本不用这个方法，如果是http代理就会使用这个，让服务器代理用户去访问其他网页，类似中介</li><li>TRACE：回显服务器收到的请求，主要用于测试或诊断</li></ul></li></ul><p>而且在1.1 以前的版本， 服务端 返回响应给客户端后，连接就会 断开 ，下一次双方要进行信息交流，必须重复上面的过程，重新建立连接，客户端发送请求，服务返回响应。</p><p>到了 1.1 版本， 建立连接后，这个连接可以保持一段时间（keep alive）， 这段时间，双方可以多次进行 请求和响应， 无需重新建立连接。</p><p>如果客户端是浏览器，如何在chrome浏览器中查看 请求和响应的HTTP消息。</p><h2 id="HTTP请求消息"><a href="#HTTP请求消息" class="headerlink" title="HTTP请求消息"></a>HTTP请求消息</h2><p><strong>响应状态码</strong></p><ul><li><p>浏览器向服务器请求时，服务端响应的消息头里面有状态码，表示请求结果的状态</p></li><li><p>分类</p><ul><li><p>1XX: 收到请求，需要请求者继续执行操作，比较少用</p></li><li><p>2XX: 请求成功，常用的 200</p></li><li><p>3XX: 重定向，浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取；</p><ul><li>好处：网站改版、域名迁移等，多个域名指向同个主站导流</li><li>必须记住： 301：永久性跳转，比如域名过期，换个域名 302：临时性跳转</li></ul></li><li><p>4XX: 客服端出错，请求包含语法错误或者无法完成请求</p><ul><li>必须记住： 400: 请求出错，比如语法协议 403: 没权限访问 404: 找不到这个路径对应的接口或者文件 405: 不允许此方法进行提交，Method not allowed，比如接口一定要POST方式，而你是用了GET</li></ul></li><li><p>5XX: 服务端出错，服务器在处理请求的过程中发生了错误</p><ul><li>必须记住： 500: 服务器内部报错了，完成不了这次请求 503: 服务器宕机</li></ul></li></ul></li></ul><p>http请求消息由下面几个部分组成</p><h3 id="请求行-request-line"><a href="#请求行-request-line" class="headerlink" title="请求行 request line"></a>请求行 request line</h3><p>是http请求的第一行的内容，表示要操作什么资源，使用的 http协议版本是什么。</p><p>里面包含了3部分信息： 请求的方法，操作资源的地址， 协议的版本号</p><p>例如</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /mgr/login.html HTTP/<span class="number">1.1</span></span><br></pre></td></tr></table></figure><p>表示要 <code>获取</code> 资源， 资源的 <code>地址</code>是 <code>/mgr/login.html</code> ， 使用的 <code>协议</code> 是 <code>HTTP/1.1</code></p><p>而</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /api/medicine HTTP/<span class="number">1.1</span></span><br></pre></td></tr></table></figure><p>表示 <code>添加</code> 资源信息， 添加资源 到 地址 <code>/api/medicine</code> ， 使用的 <code>协议</code> 是 <code>HTTP/1.1</code></p><p>GET、POST是请求的方法，表示这个动作的大体目的，是获取信息，还是提交信息，还是修改信息等等</p><p>常见的HTTP 请求方法包括：</p><ul><li><p>GET</p><p>从服务器 <code>获取</code> 资源信息，这是一种最常见的请求。</p><p>比如 要 从服务器 获取 网页资源、获取图片资源、获取用户信息数据等等。</p></li><li><p>POST，请求方法就应该是</p><p><code>添加</code> 资源信息 到 服务器进行处理（例如提交表单或者上传文件）。</p><p>比如 要 添加用户信息、上传图片数据 到服务器 等等</p><p>具体的数据信息，通常在 HTTP消息体中， 后面会讲到</p></li><li><p>PUT</p><p>请求服务器 <code>更新</code> 资源信息 。</p><p>比如 要 更新 用户姓名、地址 等等</p><p>具体的更新数据信息，通常在 HTTP消息体中， 后面会讲到</p></li><li><p>DELETE</p><p>请求服务器 <code>删除</code> 资源信息 。</p><p>比如 要 删除 某个用户、某个药品 等等</p></li></ul><p>HTTP还有许多其他方法，比如 PATCH、HEAD 等，不是特别常用，暂且不讲。</p><p>请求行里面还包括了url，</p><p>比如</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/mgr/login.html</span><br></pre></td></tr></table></figure><p>url表示要获取资源的具体路径</p><p>url特别要注意的是 <code>url参数</code> ，英文叫 <code>url query String</code></p><p>什么是url参数？</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=iphone&amp;rsv_spt=1</span><br></pre></td></tr></table></figure><p>问号后面的部分 <code>wd=iphone&amp;rsv_spt=1</code> 就是 url 参数，</p><p>每个参数之间是用 <code>&amp;</code> 隔开的。</p><p>上面的例子中 有两个参数 wd 和 rsv_spt， 他们的值分别为 iphone 和 1 。</p><p>url参数的格式，有个术语叫 <code>urlencoded</code> 格式。</p><h3 id="请求头-request-headers"><a href="#请求头-request-headers" class="headerlink" title="请求头 request headers"></a>请求头 request headers</h3><p>请求头是http请求行下面的 的内容，里面存放 一些 信息。</p><p>比如，请求发送的服务端域名是什么， 希望接收的响应消息使用什么语言，请求消息体的长度等等。</p><p>通常请求头 都有好多个，一个请求头 占据一行</p><p>单个请求头的 格式是： <code>名字: 值</code></p><p>HTTP协议规定了一些标准的请求头，<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">点击查看MDN的描述</a></p><p>开发者，也可以在HTTP消息中 添加自己定义的请求头</p><h3 id="消息体-message-body"><a href="#消息体-message-body" class="headerlink" title="消息体 message body"></a>消息体 message body</h3><p>请求的url、请求头中 可以存放 一些数据信息， 但是 有些数据信息，往往需要 存放在消息体中。</p><p>特别是 POST、PUT等请求，添加、修改的数据信息 通常都是 存放在 请求消息体 中的。</p><p>如果 HTTP 请求 有 消息体， 协议规定 需要在 消息头和消息体 之间 插入一个空行， 隔开 它们。</p><p>请求消息体中保存了要提交给服务端的数据信息。</p><p>比如：客户端要上传一个文件给服务端，就可以通过HTTP请求发送文件数据给服务端。</p><p>文件的数据 就应该在请求的消息体中。</p><p>再比如：上面示例中 客户端要添加药品，药品的名称、编码、描述，就存放在请求消息体中。</p><p>WEB API 请求消息体 通常是某种格式的文本，常见的有</p><ul><li>Json</li><li>Xml</li><li>www-form-urlencoded</li></ul><p>后面会有详细的讲述</p><h2 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h2><p>下面是1个http响应消息的示例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">HTTP/1.1</span> <span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">Date:</span> <span class="string">Thu,</span> <span class="number">19</span> <span class="string">Sep</span> <span class="number">2019 08:08:27 </span><span class="string">GMT</span></span><br><span class="line"><span class="attr">Server:</span> <span class="string">WSGIServer/0.2</span> <span class="string">CPython/3.7.3</span></span><br><span class="line"><span class="attr">Content-Type:</span> <span class="string">application/json</span></span><br><span class="line"><span class="attr">Content-Length:</span> <span class="number">37</span></span><br><span class="line"><span class="attr">X-Frame-Options:</span> <span class="string">SAMEORIGIN</span></span><br><span class="line"><span class="attr">Vary:</span> <span class="string">Cookie</span></span><br><span class="line">&#123;<span class="attr">&quot;ret&quot;:</span> <span class="number">0</span>, <span class="attr">&quot;retlist&quot;:</span> [], <span class="attr">&quot;total&quot;:</span> <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>HTTP响应消息包含如下几个部分</p><h3 id="状态行-status-line"><a href="#状态行-status-line" class="headerlink" title="状态行 status line"></a>状态行 status line</h3><p>状态行在第一行，包含3个部分：</p><ul><li><p>协议版本</p><p>上面的示例中，就是 <code>HTTP/1.1</code></p></li><li><p>状态码</p><p>上面的示例中，就是 <code>200</code></p></li><li><p>描述状态的短语</p><p>上面的示例中，就是 <code>OK</code></p></li></ul><p>我们重点来看一下状态码，它表示了 服务端对客户端请求的处理结果 。</p><p>状态码用3位的数字来表示，第一位 的 数字代表 处理结果的 大体类型，常见的有如下几种：</p><p>• 2xx    通常 表示请求消息 没有问题，而且 服务器 也正确处理了</p><p>最常见的就是 200</p><p>• 3xx    这是重定向响应，常见的值是 301，302， 表示客户端的这个请求的url地址已经改变了， 需要 客户端 重新发起一个 请求 到另外的一个url。</p><p>• 4xx    表示客户端请求有错误， 常见的值有：</p><p><code>400 Bad Request</code> 表示客户端请求不符合接口要求，比如格式完全错误</p><p><code>401 Unauthorized</code> 表示客户端需要先认证才能发送次请求</p><p><code>403 Forbidden</code> 表示客户端没有权限要求服务器处理这样的请求， 比如普通用户请求删除别人账号等</p><p><code>404 Not Found</code> 表示客户端请求的url 不存在</p><p>• 5xx    表示服务端在处理请求中，发生了未知的错误。</p><p>通常是服务端的代码设计问题，或者是服务端子系统出了故障（比如数据库服务宕机了）</p><h3 id="响应头-response-headers"><a href="#响应头-response-headers" class="headerlink" title="响应头 response headers"></a>响应头 response headers</h3><p>响应头 是 响应状态行下面的 的内容，里面存放 一些 信息。 作用 和 格式 与请求头类似，不再赘述。</p><h3 id="消息体-message-body-1"><a href="#消息体-message-body-1" class="headerlink" title="消息体 message body"></a>消息体 message body</h3><p>有时候，http响应需要消息体。</p><p>同样， 如果 HTTP 响应 有 消息体， 协议规定 需要在 消息头和消息体 之间 插入一个空行， 隔开 它们。</p><p>比如，白月SMS系统 请求 列出 药品 信息，那么 药品 信息 就在HTTP响应 消息体中</p><p>再 比如，浏览器地址栏 输入 登录网址，浏览器 请求一个登录网页的内容，网站服务器，就在响应的消息体中存放登录网页的html内容。</p><p>和请求消息体一样，WEB API 响应消息体 通常也是某种格式的文本，常见的有：</p><ul><li>Json</li><li>Xml</li><li>www-form-urlencoded</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>POST请求</strong></p><p>POST请求相比GET请求要复杂一点，因为其需要加入请求Header和请求Body，以下是Pre-request Script在发送POST请求的案例：</p><ul><li>构造一个登录请求</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const loginRequest = &#123;</span><br><span class="line">url: &#x27;http://115.28.108.130:5000/api/user/login/&#x27;,</span><br><span class="line">method: &quot;POST&quot;,</span><br><span class="line">    body: &#123;</span><br><span class="line">        mode: &#x27;urlencoded&#x27;,  // 模式为表单url编码模式</span><br><span class="line">        urlencoded: &#x27;name=张三&amp;password=123456&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>发送请求</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.sendRequest(loginRequest, function (err, res) &#123;</span><br><span class="line">console.log(err ? err : res.text());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>发送JSON格式请求与发送POST请求类似，以下采用了raw模式发送请求体。</p><ul><li>构造一个注册请求</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const regRequest = &#123;</span><br><span class="line">    url: &#x27;http://115.28.108.130:5000/api/user/reg/&#x27;,</span><br><span class="line">    method: &#x27;POST&#x27;,</span><br><span class="line">    header: &#x27;Content-Type: application/json&#x27;,  //注意要在Header中声明内容使用的类型</span><br><span class="line">    body: &#123;</span><br><span class="line">        mode: &#x27;raw&#x27;,  // 使用raw(原始)格式</span><br><span class="line">        raw: JSON.stringify(&#123; name: &#x27;小小&#x27;, password: &#x27;123456&#x27; &#125;) //要将JSON对象转为文本发送</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为HTTP请求都支持raw格式，我们只要能够获取请求的raw格式，便可采用raw模式发送任意类型的请求体了。</p><h2 id="接口数据用例"><a href="#接口数据用例" class="headerlink" title="接口数据用例"></a>接口数据用例</h2><h3 id="数据用例设计"><a href="#数据用例设计" class="headerlink" title="数据用例设计"></a>数据用例设计</h3><p>Postman支持的是csv文件作为数据用例，数据用例包含三大部分，分别为：用例标题（title），入参（grant_type，appid，secret），期望结果（expected）</p><div class="table-container"><table><thead><tr><th><strong>title</strong></th><th><strong>grant_type</strong></th><th><strong>appid</strong></th><th><strong>secret</strong></th><th><strong>expected</strong></th></tr></thead><tbody><tr><td>正确的用例</td><td>client_credential</td><td>wx508a5cacbbfc1141</td><td>fa4fc7f17ddead12d7cdcd994e7d2543</td><td>7200</td></tr><tr><td>grant_type错误</td><td>client_credentia</td><td>wx508a5cacbbfc1141</td><td>fa4fc7f17ddead12d7cdcd994e7d2543</td><td>40002</td></tr><tr><td>appid错误</td><td>client_credential</td><td>wx508a5cacbbfc114</td><td>fa4fc7f17ddead12d7cdcd994e7d2543</td><td>40013</td></tr><tr><td>secret错误h</td><td>client_credential</td><td>wx508a5cacbbfc1141</td><td>fa4fc7f17ddead12d7cdcd994e7d254</td><td>40001</td></tr></tbody></table></div><p>我们可以根据黑盒用例设计方法如等价类、边界值、判定表、正交实验法对入参进行用例设计，得到各种不同的测试场景（取值组合）</p><h3 id="数据用例参数化"><a href="#数据用例参数化" class="headerlink" title="数据用例参数化"></a>数据用例参数化</h3><p>前面我们在csv文件中编写好了数据用例，且保证第一行为参数的名称。将请求中入参值依次进行替换，在Postman中参数的编写规格为两个花括号，如：</p><h3 id="设置迭代器"><a href="#设置迭代器" class="headerlink" title="设置迭代器"></a>设置迭代器</h3><p>要读取所有的测试用例，需要设置迭代器让其循环读取那些测试数据。Postman中设置迭代器需在Run中完成，请看【4.Runner执行测试】</p><h3 id="结果检查（断言）"><a href="#结果检查（断言）" class="headerlink" title="结果检查（断言）"></a>结果检查（断言）</h3><p>Postman的断言功能在Test模块中，比如要测试返回结果是否含有某一字符串，就需要在Test中编写相应的代码，Test中的代码使用的是JavaScript语法。</p><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427104843664-452299200.png" alt="img"></p><h3 id="自带Tests函数"><a href="#自带Tests函数" class="headerlink" title="自带Tests函数"></a>自带Tests函数</h3><p>Postman提供了参考代码供我们选择即可，主要断言代码有如下几种：</p><p># 断言状态码是否为200，在断言中此种断言价值不高</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Status code is 200&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">status</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p># 断言响应文本中是否包含某个数据串，常用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Body matches string&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;string_you_want_to_search&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p># 使用JsonPath断言</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Your test name&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> jsonData = pm.<span class="property">response</span>.<span class="title function_">json</span>();</span><br><span class="line">    pm.<span class="title function_">expect</span>(jsonData.<span class="property">value</span>).<span class="property">to</span>.<span class="title function_">eql</span>(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p># 检查响应正文中是否包含某个子串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Body is correct&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">body</span>(<span class="string">&quot;response_body_string&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p># 响应信息包含列表中其中某一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Successful POST request&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="property">code</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">oneOf</span>([<span class="number">201</span>,<span class="number">202</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p># 将xml响应转为json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObject = <span class="title function_">xml2Json</span>(responseBody);</span><br></pre></td></tr></table></figure><h3 id="手工tests函数"><a href="#手工tests函数" class="headerlink" title="手工tests函数"></a>手工tests函数</h3><p>也可以使用断言并赋值的形式，相对而言，以下方式会更为简洁实用。</p><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427104906873-1008787771.png" alt="img"></p><p>常见的断言代码有：</p><p># 检查response的body中是否包含字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tests[<span class="string">&quot;Body matches string&quot;</span>] = responseBody.<span class="title function_">has</span>(<span class="string">&quot;string_you_want_to_search&quot;</span>);</span><br></pre></td></tr></table></figure><p># 检查JSON节点的值和节点元素的个数为5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody).<span class="property">city</span>; <span class="comment">//把JSON字符串转化为对象</span></span><br><span class="line">tests[<span class="string">&quot;Your test name&quot;</span>] = data.<span class="property">value</span>===<span class="number">100</span>;</span><br><span class="line">tests[<span class="string">&quot;program&#x27;s lenght&quot;</span>] = data.<span class="property">programs</span>.<span class="property">length</span>===<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p># 验证Response time是否小于某个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tests[<span class="string">&quot;Response time is less than 200ms&quot;</span>] = responseTime &lt; <span class="number">200</span>;</span><br></pre></td></tr></table></figure><h3 id="tests高级操作"><a href="#tests高级操作" class="headerlink" title="tests高级操作"></a>tests高级操作</h3><p>我们可以引用数据用例csv文档中的预期结果进行断言。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody) ;</span><br><span class="line"># data.<span class="property">expected</span> 为csv数据文件中的预期结</span><br><span class="line">tests[<span class="string">&quot;测试结果通过&quot;</span>] = jsonData.<span class="property">expires_in</span>===data.<span class="property">expected</span> ;</span><br></pre></td></tr></table></figure><p>在tests还可以使用判断语句进行断言，如下：</p><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427104924703-1231663608.png" alt="img"></p><p>在Postman中断言的操作非常灵活，需要同学们多进行练习。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;预期结果包含：长沙，实际结果为：&quot;</span>+result, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody).<span class="property">city</span>===<span class="string">&quot;长沙&quot;</span>)&#123;</span><br><span class="line">       pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;千里&quot;</span>);</span><br><span class="line">       pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;长沙&quot;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody).<span class="property">city</span>===<span class="string">&quot;Changsha&quot;</span>)&#123;</span><br><span class="line">       pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;千里&quot;</span>);</span><br><span class="line">       pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;Changsha&quot;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody).<span class="property">city</span>===<span class="string">&quot;長沙&quot;</span>)&#123;</span><br><span class="line">       pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;千里&quot;</span>);</span><br><span class="line">       pm.<span class="title function_">expect</span>(pm.<span class="property">response</span>.<span class="title function_">text</span>()).<span class="property">to</span>.<span class="title function_">include</span>(<span class="string">&quot;長沙&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Runner执行测试"><a href="#Runner执行测试" class="headerlink" title="Runner执行测试"></a>Runner执行测试</h2><h3 id="设置迭代器-1"><a href="#设置迭代器-1" class="headerlink" title="设置迭代器"></a>设置迭代器</h3><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427105315770-383070439.png" alt="img"></p><p><strong>查看运行结果</strong></p><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427105325462-1331927071.png" alt="img"></p><p><strong>保存接口配置</strong></p><p>待整个接口都调试完毕后，记得点击 Save 去保存接口信息：</p><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427105019191-782729724.png" alt="img"></p><p>去保存当前 API 接口，然后需要填写相关的接口信息：</p><p>l Request Name: 请求的名字</p><p>我一般习惯用保存为 接口的最后的字段名，比如</p><p>l Request Description: 接口的描述</p><p>最好写上该接口的要实现的基本功能和相关注意事项</p><p>支持 Markdown 语法</p><p>Select a collection or folder to save: 选择要保存到哪个分组（或文件夹）</p><p>往往保存到某个 API 接口到所属的该项目名的分组</p><h3 id="Postman的参数"><a href="#Postman的参数" class="headerlink" title="Postman的参数"></a>Postman的参数</h3><p><strong>自动解析多个参数Param</strong></p><p>比如，对于一个 GET 的请求的 url 是： <code>https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx508a5cacbbfc1141&amp;secret=fa4fc7f17ddead12d7cdcd994e7d2543</code></p><p>对应着其实是?key=value形式中包含多个 Http 的 GET 的 query string=query parameters</p><p>Postman 可以自动帮我们解析出对应参数：</p><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427105036649-11325508.png" alt="img"></p><p><strong>临时禁用参数</strong></p><p>在不删除某参数的情况下，如果想要暂时不传参数，可以方便的通过不勾选的方式去实现</p><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427105044712-1306494929.png" alt="img"></p><p><strong>批量编辑多个参数</strong></p><p>如果想要批量的编辑参数，可以点击右上角的Bulk Edit，去实现批量编辑。</p><p><strong>Postman发送POST请求详讲</strong></p><p>POST 请求不能像GET一样直接在浏览器输入就可以请求，需要借助工具来完成。</p><p><strong>发送key-value 的请求：</strong></p><p>以login 接口为例，在Body 中选取<strong>“form-data”</strong> 格式，输入所需的key-value, 选取对应的环境变量。</p><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427105104041-1268949398.png" alt="img"></p><p><strong>发送json格式的请求：</strong></p><p>以add user 接口为例，在Body 中选取<strong>“raw”</strong> 格式，根据接口文档输入json 数据， 有需要应用环境变量的选取环境变量。</p><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427105113788-2022830149.png" alt="img"></p><p><strong>发送文件的请求</strong></p><p>以file upload 接口为例，在Body 中选取<strong>“form-data”</strong> 格式，在key 里输入”file”，在右边的下拉里选取类型为”File”，点击”Choose Files” 就可以上传本地文件了。</p><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427105125256-2121388460.png" alt="img"></p><h3 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h3><p><strong>设置环境变量的意义</strong></p><p>在测试 API 期间，往往存在多种环境，对应 IP 地址（或域名也不同）。比如：</p><p>Dev：<a href="http://192.168.1.21/oa/index.jsp">http://192.168.1.21/oa/index.jsp</a></p><p>l 用于开发期间的线上的 Development 的测试环境</p><p>LocalTest：<a href="http://192.168.1.42/oa/index.jsp">http://192.168.1.42/oa/index.jsp</a></p><p>l 用于开发期间配合后台开发人员的本地局域网内的本地环境，用于联合调试 API 接口</p><p>Product：<a href="http://www.example.com/oa/index.jsp">http://www.example.com/oa/index.jsp</a></p><p>l 用于开发完成发布到生产环境</p><p>在测试API期间，往往需要修改API地址，这样效率会比较低且更换后的地址没法保存。</p><p><strong>环境变量设置</strong></p><p>在Postman的设置区有Environment 和 Global Variable，用于解决这个问题，实现不同环境的管理：</p><p><img src="https://img2020.cnblogs.com/blog/465934/202004/465934-20200427105146287-238101285.png" alt="img"></p><p>很明显，就可以用来实现不用手动修改 url 中的服务器地址，从而动态的实现，支持不同服务器环境:</p><p>l Production 生产环境</p><p>l Development 开发环境</p><p>l Local 本地局域网环境</p><p><em>环境变量可以使用在以下地方</em>：</p><p>l URL</p><p>l URL params</p><p>l Header values</p><p>l form-data/url-encoded values</p><p>l Raw body content</p><p><strong>注意：在你要使用的变量名上附上\</strong>**双花括号**<em>\</em>，一个请求只能应用一个环境变量。**</p><p><strong>使用代码设置环境变量</strong></p><p>我们可以在Pre-request Script和Test模块中进行环境变量设置。</p><p>—1.设置环境变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postman.<span class="title function_">setEnvironmentVariable</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure><p>—2.获取环境变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="string">&quot;variable_key&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>全局变量（Global Variable）顾名思义是针对于所有脚本和所有环境将生效的变量，它的作用域大于环境变量。设置全局变量的方法与环境变量相似：</p><p>—1.设置全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;variable_key&quot;</span>, <span class="string">&quot;variable_value&quot;</span>);</span><br></pre></td></tr></table></figure><p>—2.获取全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm.<span class="property">globals</span>.<span class="title function_">get</span>(<span class="string">&quot;variable_key&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="进价版"><a href="#进价版" class="headerlink" title="进价版"></a>进价版</h1><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h3><p>Requests 请求是用 Python 语言编写， 基于 urllib，采用 Apache2 Licensed 开源协议的 HTTP 库。 它比 urllib 更加方便，可以节约我们大量的工作，完全满足 HTTP 测试需求。 Requests 的是以 PEP 20 的习语为中心开发的， 所以它比 urllib 更加 Python 智能化。 更重要的一点是它支持 Python3</p><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a><strong>常用参数</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">method： 请求方式 get，或者 post，put，delete 等</span><br><span class="line">url 请求的: url 地址 接口文档标注的接口请求地址</span><br><span class="line">params：请求数据中的链接，常见的一个 get 请求，请求参数都是在 url 地址中</span><br><span class="line">data ：请求数据，参数 表单的数据格式</span><br><span class="line">json： 接口常见的数据请求格式</span><br><span class="line">headers：请求头信息，http 请求中，比如说编码方式等内容添加</span><br><span class="line">cookie：保存的用户登录信息，比如做一些充值功能，但是需要用户已经登录，需要 cookie 信息的请求信息传输</span><br><span class="line">file：接口中上传文件</span><br><span class="line">timeout ：超时处理 proxys 设置代理</span><br><span class="line">stream ：文件下载功能，通过请求方式，下载文件</span><br></pre></td></tr></table></figure><h3 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a><strong>响应内容</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">r.encoding <span class="comment">#获取当前的编码</span></span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span> <span class="comment">#设置编码</span></span><br><span class="line">r.text <span class="comment">#以encoding解析返回内容。字符串方式的响应体，会自动根据响应头部的字符编码进行解码。</span></span><br><span class="line">r.cookies <span class="comment">#返回cookie</span></span><br><span class="line">r.headers <span class="comment">#以字典对象存储服务器响应头，但是这个字典比较特殊，字典键不区分大小写，若键不存在则返回None</span></span><br><span class="line">r.status_code <span class="comment">#响应状态码</span></span><br><span class="line">r.json() <span class="comment">#Requests中内置的JSON解码器，以json形式返回,前提返回的内容确保是json格式的，不然解析出错会抛异常</span></span><br><span class="line">r.content <span class="comment">#以字节形式（二进制）返回。字节方式的响应体，会自动为你解码 gzip 和 deflate 压缩。</span></span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://tcc.taobao.com/cc/json/mobile_tel_segment.htm?tel=xxxxxxxxxxx&#x27;</span></span><br><span class="line">r = requests.get(url=url)</span><br><span class="line"><span class="built_in">print</span> (r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回数据</span></span><br><span class="line">__GetZoneResult_ = &#123;</span><br><span class="line">    mts:<span class="string">&#x27;1316375&#x27;</span>,</span><br><span class="line">    province:<span class="string">&#x27;广东&#x27;</span>,</span><br><span class="line">    catName:<span class="string">&#x27;中国联通&#x27;</span>,</span><br><span class="line">    telString:<span class="string">&#x27;XXXXXXXXXXX&#x27;</span>,</span><br><span class="line">    areaVid:<span class="string">&#x27;30517&#x27;</span>,</span><br><span class="line">    ispVid:<span class="string">&#x27;xxxxxxxxxxx&#x27;</span>,</span><br><span class="line">    carrier:<span class="string">&#x27;广东联通&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>把参数添加到params中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://tcc.taobao.com/cc/json/mobile_tel_segment.htm&#x27;</span></span><br><span class="line">params=&#123;<span class="string">&#x27;tel&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">r = requests.get(url=url,params=params)</span><br><span class="line"><span class="built_in">print</span> (r.text) <span class="comment">#打印接口请求返回的值</span></span><br></pre></td></tr></table></figure><p>Requests 中 post 请求</p><p><strong>From-data 数据格式的接口</strong></p><p>注册接口，<br>数据格式是 data 格式<br>url 地址：​<a href="https://links.jianshu.com/go?to=http%3A%2F%2F127.0.0.1%3A8000%2Fregister"> ​http://127.0.0.1:8000/register​</a>​请求方式：post<br>请求 请求参数：username password</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line">url=<span class="string">&quot;http://127.0.0.1:8000/register&quot;</span> </span><br><span class="line"><span class="comment">#表单数据格式，参数 data ，数据都是字典去保存 </span></span><br><span class="line">data=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;liang001&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span> &#125;</span><br><span class="line">r_reg=requests.post(url=url,data=data) </span><br><span class="line"><span class="built_in">print</span> (r_reg.text)</span><br></pre></td></tr></table></figure><p><strong>json 数据格式的接口</strong></p><p>登录接口，数据格式是 json 格式<br>url 地址：​​<a href="https://links.jianshu.com/go?to=http%3A%2F%2F127.0.0.1%3A8000%2Flogin"> ​http://127.0.0.1:8000/login​</a>​​请求方式：post 请求<br>请求参数：username，password</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line">url=<span class="string">&quot;http://127.0.0.1:8000/login&quot;</span> </span><br><span class="line"><span class="comment">#表单数据格式，参数 data ，数据都是字典去保存 </span></span><br><span class="line">data=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;liang001&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span> &#125;</span><br><span class="line">r_login=requests.post(url=url,json=data) </span><br><span class="line"><span class="built_in">print</span> (r_login.text)</span><br></pre></td></tr></table></figure><p>如果要用参数data传参的话，在请求头要声明参数格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">url=<span class="string">&quot;http://127.0.0.1:8000/login&quot;</span> </span><br><span class="line">header=&#123;<span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">data=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;liang001&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span> &#125;</span><br><span class="line">r_login=requests.post(url=url,data=json.dumps(data)) </span><br><span class="line"><span class="built_in">print</span> (r_login.text)</span><br></pre></td></tr></table></figure><h3 id="定制头和cookie信息"><a href="#定制头和cookie信息" class="headerlink" title="定制头和cookie信息"></a>定制头和cookie信息</h3><p>在HTTP应用中Cookies和Header处理是非常普遍的事情，一般情况下用于记录用户的持久化信息和验证等功能，在运用requests库进行接口请求时，我们往往也会遇到需要带上请求头或者cookie的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;my-app/0.0.1&#x27;</span><span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string">cookie = &#123;&#x27;</span>key<span class="string">&#x27;:&#x27;</span>value<span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string">r = requests.get/post(&#x27;</span>your url<span class="string">&#x27;,headers=header,cookies=cookie)</span></span><br></pre></td></tr></table></figure><p>登录后复制 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;some&#x27;</span>: <span class="string">&#x27;data&#x27;</span>&#125;</span><br><span class="line">headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">r = requests.post(<span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span>, data=data, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a><strong>响应状态码</strong></h3><p>使用requests方法后，会返回一个response对象，其存储了服务器响应的内容，如上实例中已经提到的 r.text、r.status_code……<br>获取文本方式的响应体实例：当你访问 r.text 之时，会使用其响应的文本编码进行自动解码，并且你可以修改其编码让 r.text 使用自定义的编码进行解码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;http://www.itwhy.org&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text, <span class="string">&#x27;\n&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">79</span>), r.encoding)</span><br><span class="line">r.encoding = <span class="string">&#x27;GBK&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(r.text, <span class="string">&#x27;\n&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">79</span>), r.encoding)</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://github.com/Ranxf&#x27;</span>)       <span class="comment"># 最基本的不带参数的get请求</span></span><br><span class="line"><span class="built_in">print</span>(r.status_code)                               <span class="comment"># 获取返回状态</span></span><br><span class="line">r1 = requests.get(url=<span class="string">&#x27;http://dict.baidu.com/s&#x27;</span>, params=&#123;<span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;)      <span class="comment"># 带参数的get请求</span></span><br><span class="line"><span class="built_in">print</span>(r1.url)</span><br><span class="line"><span class="built_in">print</span>(r1.text)        <span class="comment"># 打印解码后的返回数据</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">bin</span>/python3<span class="number">.5</span> /home/rxf/python3_1000/<span class="number">1000</span>/python3_server/python3_requests/demo1.py</span><br><span class="line"><span class="number">200</span></span><br><span class="line">http://<span class="built_in">dict</span>.baidu.com/s?wd=python</span><br><span class="line">…………</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code </span><br></pre></td></tr></table></figure><p>登录后复制 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.status_code                      <span class="comment">#如果不是200，可以使用 r.raise_for_status() 抛出</span></span><br></pre></td></tr></table></figure><p><strong>响应</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.headers                                  <span class="comment">#返回字典类型,头信息</span></span><br><span class="line">r.requests.headers                         <span class="comment">#返回发送到服务器的头信息</span></span><br><span class="line">r.cookies                                  <span class="comment">#返回cookie</span></span><br><span class="line">r.history                                  <span class="comment">#返回重定向信息,当然可以在请求时加上allow_redirects = false 阻止重定向</span></span><br></pre></td></tr></table></figure><p><strong>超时</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;url&#x27;</span>,timeout=<span class="number">1</span>)           <span class="comment">#设置秒数超时，仅对于连接有效</span></span><br></pre></td></tr></table></figure><p><strong>会话对象，能够跨请求保持某些参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = requests.Session()  <span class="comment"># cookies或者session或者token保存于session对象中</span></span><br><span class="line">s.auth = (<span class="string">&#x27;auth&#x27;</span>,<span class="string">&#x27;passwd&#x27;</span>)</span><br><span class="line">s.headers = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;</span><br><span class="line">r = s.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">r1 = s.get(<span class="string">&#x27;url1&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>代理</strong></p><p>登录后复制 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;ip1&#x27;</span>,<span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;ip2&#x27;</span>&#125;</span><br><span class="line">requests.get(<span class="string">&#x27;url&#x27;</span>,proxies=proxies)  <span class="comment"># 请求时，通过代理可设置抓包</span></span><br></pre></td></tr></table></figure><h3 id="https-请求处理"><a href="#https-请求处理" class="headerlink" title="https 请求处理"></a>https 请求处理</h3><p>当协议是 https 的协议的时候，有些系统，需要校验 https 证书，如果校验失败，可能会有警告提示等信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line">url=<span class="string">&quot;https://www.ctrip.com/&quot;</span> </span><br><span class="line"><span class="comment">#解决方案 # 发送请求时候忽略证书，证书的参数 verify-用的比较多 r=requests.get(url=url,verify=False) #verify 参数默认为 True，值为 False 表示忽略证书 </span></span><br><span class="line"><span class="built_in">print</span> (r.text) </span><br><span class="line"><span class="comment">#第二种解决方案，verify 里面添加证书的路径 </span></span><br><span class="line">r=requests.get(url=url,verify=<span class="string">&#x27;证书的路径&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span> (r.text)</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>当需要到上传文件接口时候，我们需要 files 参数处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://127.0.0.1:8000/UploadPhoto&#x27;</span>  </span><br><span class="line"><span class="comment">#filename 为 liang.jpg 文件</span></span><br><span class="line"><span class="comment">#open(&#x27;D:\\test_data\\liang.jpg&#x27;,&#x27;rb&#x27;) 打开本地的一个文件 </span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;D:\\test_data\\liang.jpg&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">r=requests.post(url=url,files=files,verify=<span class="literal">False</span>) </span><br><span class="line"><span class="built_in">print</span> (r.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  上传文件（图片）</span></span><br><span class="line">url=<span class="string">&quot;https://www.imooc.com/user/postpic&quot;</span></span><br><span class="line">file = &#123;</span><br><span class="line">    <span class="string">&quot;fileField&quot;</span>:(<span class="string">&quot;fullimage.png&quot;</span>,<span class="built_in">open</span>(<span class="string">&quot;C:/Users/Admin/Pictures/Saved Pictures/fullimage.png&quot;</span>,<span class="string">&quot;rb&quot;</span>),<span class="string">&quot;image/png&quot;</span>),</span><br><span class="line">    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">cookie = &#123; <span class="string">&quot;apsid&quot;</span>:<span class="string">&quot;U4ODM2MWI2MGZhZjk2ZGEyODEwODY2YWRmMzNjM2MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMTEzOTU1NzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADZkNDBhNWM5OTk2YzQ2MzJhMWJkMWU3NWFlZWZiZjdkDkmeZQAAAAA%3DYm&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url,files=file,cookies=cookie,verify=<span class="literal">False</span>).json()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p><strong>一次性下载</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.xxxx/demo.zip&#x27;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;filename.zip&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> code:</span><br><span class="line">    code.write(r.content)</span><br></pre></td></tr></table></figure><p><strong>大文件下载：</strong></p><p>如果文件比较大的话，那么下载下来的文件先放在内存中，内存还是比较有压力的。所以为了防止内存不够用的现象出现，我们要想办法把下载的文件分块写到磁盘中,需要用到request的参数stream</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://www.xxxx/demo.zip&#x27;</span></span><br><span class="line">r = requests.get(url, stream=<span class="literal">True</span>)  <span class="comment">##stream-true，限制文件的大小</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;filename.zip&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> code:</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">1024</span>):<span class="comment">#iter_content 循环去读取信息写入，chunk_size 文件大 小</span></span><br><span class="line">        <span class="keyword">if</span> chunk:</span><br><span class="line">            code.write(chunk) <span class="comment">#把循环读取的值，写入文件里面</span></span><br></pre></td></tr></table></figure><h3 id="timeout-参数"><a href="#timeout-参数" class="headerlink" title="timeout 参数"></a>timeout 参数</h3><p>1、python 的requests请求都可以使用timeout参数。<br>2、timeout参数可以传入一个简单的浮点数，它将请求的连接部分和读取部分设为相同的超时时间。<br>3、timeout参数也可以传入一个包含两个简单浮点数的元组，用来分别设置请求超时时间和读取超时时间。<br>4、参数值设为None或者不设置该参数为一直等待，知道请求成功或错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;http://127.0.0.1:8000/login&quot;</span></span><br><span class="line"><span class="comment"># 表单数据格式，参数 data ，数据都是字典去保存</span></span><br><span class="line">data = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">r_login = requests.post(url=url, json=data, timeout=<span class="number">0.5</span>)</span><br><span class="line"><span class="built_in">print</span>(r_login.text)</span><br></pre></td></tr></table></figure><h3 id="汇总："><a href="#汇总：" class="headerlink" title="汇总："></a>汇总：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTP请求类型</span></span><br><span class="line"><span class="comment"># get类型</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://github.com/timeline.json&#x27;</span>)</span><br><span class="line"><span class="comment"># post类型</span></span><br><span class="line">r = requests.post(<span class="string">&quot;http://m.ctrip.com/post&quot;</span>)</span><br><span class="line"><span class="comment"># put类型</span></span><br><span class="line">r = requests.put(<span class="string">&quot;http://m.ctrip.com/put&quot;</span>)</span><br><span class="line"><span class="comment"># delete类型</span></span><br><span class="line">r = requests.delete(<span class="string">&quot;http://m.ctrip.com/delete&quot;</span>)</span><br><span class="line"><span class="comment"># head类型</span></span><br><span class="line">r = requests.head(<span class="string">&quot;http://m.ctrip.com/head&quot;</span>)</span><br><span class="line"><span class="comment"># options类型</span></span><br><span class="line">r = requests.options(<span class="string">&quot;http://m.ctrip.com/get&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应内容</span></span><br><span class="line"><span class="built_in">print</span>(r.content) <span class="comment">#以字节的方式去显示，中文显示为字符</span></span><br><span class="line"><span class="built_in">print</span>(r.text) <span class="comment">#以文本的方式去显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#URL传递参数</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;keyword&#x27;</span>: <span class="string">&#x27;香港&#x27;</span>, <span class="string">&#x27;salecityid&#x27;</span>: <span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">&quot;http://m.ctrip.com/webapp/tourvisa/visa_list&quot;</span>, params=payload) </span><br><span class="line"><span class="built_in">print</span>（r.url） <span class="comment">#示例为http://m.ctrip.com/webapp/tourvisa/visa_list?salecityid=2&amp;keyword=香港</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取/修改网页编码</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://github.com/timeline.json&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> （r.encoding）</span><br><span class="line"></span><br><span class="line"><span class="comment">#json处理</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://github.com/timeline.json&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>（r.json()） <span class="comment"># 需要先import json    </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求头</span></span><br><span class="line">url = <span class="string">&#x27;http://m.ctrip.com&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span> : <span class="string">&#x27;Mozilla/5.0 (Linux; Android 4.2.1; en-us; Nexus 4 Build/JOP40D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Mobile Safari/535.19&#x27;</span>&#125;</span><br><span class="line">r = requests.post(url, headers=headers)</span><br><span class="line"><span class="built_in">print</span> （r.request.headers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#复杂post请求</span></span><br><span class="line">url = <span class="string">&#x27;http://m.ctrip.com&#x27;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;some&#x27;</span>: <span class="string">&#x27;data&#x27;</span>&#125;</span><br><span class="line">r = requests.post(url, data=json.dumps(payload)) <span class="comment">#如果传递的payload是string而不是dict，需要先调用dumps方法格式化一下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># post多部分编码文件</span></span><br><span class="line">url = <span class="string">&#x27;http://m.ctrip.com&#x27;</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;report.xls&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应状态码</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://m.ctrip.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 响应头</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://m.ctrip.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (r.headers)</span><br><span class="line"><span class="built_in">print</span> (r.headers[<span class="string">&#x27;Content-Type&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> (r.headers.get(<span class="string">&#x27;content-type&#x27;</span>)) <span class="comment">#访问响应头部分内容的两种方式</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># Cookies</span></span><br><span class="line">url = <span class="string">&#x27;http://example.com/some/cookie/setting/url&#x27;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.cookies[<span class="string">&#x27;example_cookie_name&#x27;</span>]    <span class="comment">#读取cookies</span></span><br><span class="line">    </span><br><span class="line">url = <span class="string">&#x27;http://m.ctrip.com/cookies&#x27;</span></span><br><span class="line">cookies = <span class="built_in">dict</span>(cookies_are=<span class="string">&#x27;working&#x27;</span>)</span><br><span class="line">r = requests.get(url, cookies=cookies) <span class="comment">#发送cookies</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置超时时间</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://m.ctrip.com&#x27;</span>, timeout=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置访问代理</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">           <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://10.10.1.10:3128&quot;</span>,</span><br><span class="line">           <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://10.10.1.100:4444&quot;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://m.ctrip.com&#x27;</span>, proxies=proxies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果代理需要用户名和密码，则需要这样：</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://user:pass@10.10.1.10:3128/&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、无参数实例</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">ret = requests.get(<span class="string">&#x27;https://github.com/timeline.json&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.url)</span><br><span class="line"><span class="built_in">print</span>(ret.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、有参数实例</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">payload = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">ret = requests.get(<span class="string">&quot;http://httpbin.org/get&quot;</span>, params=payload)</span><br><span class="line"><span class="built_in">print</span>(ret.url)</span><br><span class="line"><span class="built_in">print</span>(ret.text)</span><br></pre></td></tr></table></figure><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、基本POST实例</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">payload = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">ret = requests.post(<span class="string">&quot;http://httpbin.org/post&quot;</span>, data=payload)</span><br><span class="line"><span class="built_in">print</span>(ret.text)</span><br><span class="line"><span class="comment"># 2、发送请求头和数据实例</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">url = <span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;some&#x27;</span>: <span class="string">&#x27;data&#x27;</span>&#125;</span><br><span class="line">headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">ret = requests.post(url, data=json.dumps(payload), headers=headers)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(ret.text)</span><br><span class="line"><span class="built_in">print</span>(ret.cookies)</span><br></pre></td></tr></table></figure><h4 id="示例参数"><a href="#示例参数" class="headerlink" title="示例参数"></a>示例参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">param_method_url</span>():</span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;get&#x27;, url=&#x27;http://127.0.0.1:8000/test/&#x27;)</span></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;post&#x27;, url=&#x27;http://127.0.0.1:8000/test/&#x27;)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_param</span>():</span><br><span class="line">    <span class="comment"># - 可以是字典</span></span><br><span class="line">    <span class="comment"># - 可以是字符串</span></span><br><span class="line">    <span class="comment"># - 可以是字节（ascii编码以内）</span></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;get&#x27;,</span></span><br><span class="line">    <span class="comment"># url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment"># params=&#123;&#x27;k1&#x27;: &#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;水电费&#x27;&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;get&#x27;,</span></span><br><span class="line">    <span class="comment"># url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment"># params=&quot;k1=v1&amp;k2=水电费&amp;k3=v3&amp;k3=vv3&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;get&#x27;,</span></span><br><span class="line">    <span class="comment"># url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment"># params=bytes(&quot;k1=v1&amp;k2=k2&amp;k3=v3&amp;k3=vv3&quot;, encoding=&#x27;utf8&#x27;))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 错误</span></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;get&#x27;,</span></span><br><span class="line">    <span class="comment"># url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment"># params=bytes(&quot;k1=v1&amp;k2=水电费&amp;k3=v3&amp;k3=vv3&quot;, encoding=&#x27;utf8&#x27;))</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_data</span>():</span><br><span class="line">    <span class="comment"># 可以是字典</span></span><br><span class="line">    <span class="comment"># 可以是字符串</span></span><br><span class="line">    <span class="comment"># 可以是字节</span></span><br><span class="line">    <span class="comment"># 可以是文件对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;POST&#x27;,</span></span><br><span class="line">    <span class="comment"># url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment"># data=&#123;&#x27;k1&#x27;: &#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;水电费&#x27;&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;POST&#x27;,</span></span><br><span class="line">    <span class="comment"># url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment"># data=&quot;k1=v1; k2=v2; k3=v3; k3=v4&quot;</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;POST&#x27;,</span></span><br><span class="line">    <span class="comment"># url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment"># data=&quot;k1=v1;k2=v2;k3=v3;k3=v4&quot;,</span></span><br><span class="line">    <span class="comment"># headers=&#123;&#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;&#125;</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;POST&#x27;,</span></span><br><span class="line">    <span class="comment"># url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment"># data=open(&#x27;data_file.py&#x27;, mode=&#x27;r&#x27;, encoding=&#x27;utf-8&#x27;), # 文件内容是：k1=v1;k2=v2;k3=v3;k3=v4</span></span><br><span class="line">    <span class="comment"># headers=&#123;&#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;&#125;</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_json</span>():</span><br><span class="line">    <span class="comment"># 将json中对应的数据进行序列化成一个字符串，json.dumps(...)</span></span><br><span class="line">    <span class="comment"># 然后发送到服务器端的body中，并且Content-Type是 &#123;&#x27;Content-Type&#x27;: &#x27;application/json&#x27;&#125;</span></span><br><span class="line">    requests.request(method=<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                     url=<span class="string">&#x27;http://127.0.0.1:8000/test/&#x27;</span>,</span><br><span class="line">                     json=&#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&#x27;v1&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="string">&#x27;水电费&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_headers</span>():</span><br><span class="line">    <span class="comment"># 发送请求头到服务器端</span></span><br><span class="line">    requests.request(method=<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                     url=<span class="string">&#x27;http://127.0.0.1:8000/test/&#x27;</span>,</span><br><span class="line">                     json=&#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&#x27;v1&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="string">&#x27;水电费&#x27;</span>&#125;,</span><br><span class="line">                     headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">                     )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_cookies</span>():</span><br><span class="line">    <span class="comment"># 发送Cookie到服务器端</span></span><br><span class="line">    requests.request(method=<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                     url=<span class="string">&#x27;http://127.0.0.1:8000/test/&#x27;</span>,</span><br><span class="line">                     data=&#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&#x27;v1&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="string">&#x27;v2&#x27;</span>&#125;,</span><br><span class="line">                     cookies=&#123;<span class="string">&#x27;cook1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>&#125;,</span><br><span class="line">                     )</span><br><span class="line">    <span class="comment"># 也可以使用CookieJar（字典形式就是在此基础上封装）</span></span><br><span class="line">    <span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line">    <span class="keyword">from</span> http.cookiejar importobj = CookieJar()</span><br><span class="line">    obj.set_cookie(Cookie(version=<span class="number">0</span>, name=<span class="string">&#x27;c1&#x27;</span>, value=<span class="string">&#x27;v1&#x27;</span>, port=<span class="literal">None</span>, domain=<span class="string">&#x27;&#x27;</span>, path=<span class="string">&#x27;/&#x27;</span>, secure=<span class="literal">False</span>, expires=<span class="literal">None</span>,</span><br><span class="line">                          discard=<span class="literal">True</span>, comment=<span class="literal">None</span>, comment_url=<span class="literal">None</span>, rest=&#123;<span class="string">&#x27;HttpOnly&#x27;</span>: <span class="literal">None</span>&#125;, rfc2109=<span class="literal">False</span>,</span><br><span class="line">                          port_specified=<span class="literal">False</span>, domain_specified=<span class="literal">False</span>, domain_initial_dot=<span class="literal">False</span>, path_specified=<span class="literal">False</span>)</span><br><span class="line">                   )=<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                     url=<span class="string">&#x27;http://127.0.0.1:8000/test/&#x27;</span>,</span><br><span class="line">                     data=&#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&#x27;v1&#x27;</span>, <span class="string">&#x27;k2&#x27;</span>: <span class="string">&#x27;v2&#x27;</span>&#125;,</span><br><span class="line">                     cookies=obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_files</span>():</span><br><span class="line">    <span class="comment"># 发送文件</span></span><br><span class="line">    <span class="comment"># file_dict = &#123;</span></span><br><span class="line">    <span class="comment"># &#x27;f1&#x27;: open(&#x27;readme&#x27;, &#x27;rb&#x27;)</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;POST&#x27;,</span></span><br><span class="line">    <span class="comment"># url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment"># files=file_dict)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送文件，定制文件名</span></span><br><span class="line">    <span class="comment"># file_dict = &#123;</span></span><br><span class="line">    <span class="comment"># &#x27;f1&#x27;: (&#x27;test.txt&#x27;, open(&#x27;readme&#x27;, &#x27;rb&#x27;))</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;POST&#x27;,</span></span><br><span class="line">    <span class="comment"># url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment"># files=file_dict)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送文件，定制文件名</span></span><br><span class="line">    <span class="comment"># file_dict = &#123;</span></span><br><span class="line">    <span class="comment"># &#x27;f1&#x27;: (&#x27;test.txt&#x27;, &quot;hahsfaksfa9kasdjflaksdjf&quot;)</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;POST&#x27;,</span></span><br><span class="line">    <span class="comment"># url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment"># files=file_dict)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送文件，定制文件名</span></span><br><span class="line">    <span class="comment"># file_dict = &#123;</span></span><br><span class="line">    <span class="comment">#     &#x27;f1&#x27;: (&#x27;test.txt&#x27;, &quot;hahsfaksfa9kasdjflaksdjf&quot;, &#x27;application/text&#x27;, &#123;&#x27;k1&#x27;: &#x27;0&#x27;&#125;)</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># requests.request(method=&#x27;POST&#x27;,</span></span><br><span class="line">    <span class="comment">#                  url=&#x27;http://127.0.0.1:8000/test/&#x27;,</span></span><br><span class="line">    <span class="comment">#                  files=file_dict)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_auth</span>():</span><br><span class="line">    <span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth, HTTPDigestAuth</span><br><span class="line"></span><br><span class="line">    ret = requests.get(<span class="string">&#x27;https://api.github.com/user&#x27;</span>, auth=HTTPBasicAuth(<span class="string">&#x27;wupeiqi&#x27;</span>, <span class="string">&#x27;sdfasdfasdf&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(ret.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ret = requests.get(&#x27;http://192.168.1.1&#x27;,</span></span><br><span class="line">    <span class="comment"># auth=HTTPBasicAuth(&#x27;admin&#x27;, &#x27;admin&#x27;))</span></span><br><span class="line">    <span class="comment"># ret.encoding = &#x27;gbk&#x27;</span></span><br><span class="line">    <span class="comment"># print(ret.text)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ret = requests.get(&#x27;http://httpbin.org/digest-auth/auth/user/pass&#x27;, auth=HTTPDigestAuth(&#x27;user&#x27;, &#x27;pass&#x27;))</span></span><br><span class="line">    <span class="comment"># print(ret)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_timeout</span>():</span><br><span class="line">    <span class="comment"># ret = requests.get(&#x27;http://google.com/&#x27;, timeout=1)</span></span><br><span class="line">    <span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ret = requests.get(&#x27;http://google.com/&#x27;, timeout=(5, 1))</span></span><br><span class="line">    <span class="comment"># print(ret)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_allow_redirects</span>():</span><br><span class="line">    ret = requests.get(<span class="string">&#x27;http://127.0.0.1:8000/test/&#x27;</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(ret.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_proxies</span>():</span><br><span class="line">    <span class="comment"># proxies = &#123;</span></span><br><span class="line">    <span class="comment"># &quot;http&quot;: &quot;61.172.249.96:80&quot;,</span></span><br><span class="line">    <span class="comment"># &quot;https&quot;: &quot;http://61.185.219.126:3128&quot;,</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># proxies = &#123;&#x27;http://10.20.1.128&#x27;: &#x27;http://10.10.1.10:5323&#x27;&#125;</span></span><br><span class="line">    <span class="comment"># ret = requests.get(&quot;http://www.proxy360.cn/Proxy&quot;, proxies=proxies)</span></span><br><span class="line">    <span class="comment"># print(ret.headers)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># from requests.auth import HTTPProxyAuth</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># proxyDict = &#123;</span></span><br><span class="line">    <span class="comment"># &#x27;http&#x27;: &#x27;77.75.105.165&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;https&#x27;: &#x27;77.75.105.165&#x27;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># auth = HTTPProxyAuth(&#x27;username&#x27;, &#x27;mypassword&#x27;)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># r = requests.get(&quot;http://www.google.com&quot;, proxies=proxyDict, auth=auth)</span></span><br><span class="line">    <span class="comment"># print(r.text)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_stream</span>():</span><br><span class="line">    ret = requests.get(<span class="string">&#x27;http://127.0.0.1:8000/test/&#x27;</span>, stream=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(ret.content)</span><br><span class="line">    ret.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># from contextlib import closing</span></span><br><span class="line">    <span class="comment"># with closing(requests.get(&#x27;http://httpbin.org/get&#x27;, stream=True)) as r:</span></span><br><span class="line">    <span class="comment"># # 在此处理响应。</span></span><br><span class="line">    <span class="comment"># for i in r.iter_content():</span></span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">requests_session</span>():</span><br><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">    session = requests.Session()</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 1、首先登陆任何页面，获取cookie</span></span><br><span class="line"></span><br><span class="line">    i1 = session.get(url=<span class="string">&quot;http://dig.chouti.com/help/service&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 2、用户登陆，携带上一次的cookie，后台对cookie中的 gpsd 进行授权</span></span><br><span class="line">    i2 = session.post(</span><br><span class="line">        url=<span class="string">&quot;http://dig.chouti.com/login&quot;</span>,</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;phone&#x27;</span>: <span class="string">&quot;8615131255089&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&quot;xxxxxx&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;oneMonth&#x27;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    i3 = session.post(</span><br><span class="line">        url=<span class="string">&quot;http://dig.chouti.com/link/vote?linksId=8589623&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(i3.text)</span><br></pre></td></tr></table></figure><h4 id="json请求："><a href="#json请求：" class="headerlink" title="json请求："></a>json请求：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">url_request</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; init &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    heard = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">    payload = &#123;<span class="string">&#x27;CountryName&#x27;</span>: <span class="string">&#x27;中国&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;ProvinceName&#x27;</span>: <span class="string">&#x27;四川省&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;L1CityName&#x27;</span>: <span class="string">&#x27;chengdu&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;L2CityName&#x27;</span>: <span class="string">&#x27;yibing&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;TownName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Longitude&#x27;</span>: <span class="string">&#x27;107.33393&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Latitude&#x27;</span>: <span class="string">&#x27;33.157131&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Language&#x27;</span>: <span class="string">&#x27;CN&#x27;</span>&#125;</span><br><span class="line">    r = requests.post(<span class="string">&quot;http://www.xxxxxx.com/CityLocation/json/LBSLocateCity&quot;</span>, heards=heard, data=payload)</span><br><span class="line">    data = r.json()</span><br><span class="line">    <span class="keyword">if</span> r.status_code!=<span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;LBSLocateCity API Error&#x27;</span> + <span class="built_in">str</span>(r.status_code))</span><br><span class="line">    <span class="built_in">print</span>(data[<span class="string">&#x27;CityEntities&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;CityID&#x27;</span>])  <span class="comment"># 打印返回json中的某个key的value</span></span><br><span class="line">    <span class="built_in">print</span>(data[<span class="string">&#x27;ResponseStatus&#x27;</span>][<span class="string">&#x27;Ack&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(json.dump(data, indent=<span class="number">4</span>, sort_keys=<span class="literal">True</span>, ensure_ascii=<span class="literal">False</span>))  <span class="comment"># 树形打印json，ensure_ascii必须设为False否则中文会显示为unicode</span></span><br></pre></td></tr></table></figure><h4 id="Xml请求："><a href="#Xml请求：" class="headerlink" title="Xml请求："></a>Xml请求：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">url_request</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;init&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    heards = &#123;<span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;text/xml&#x27;</span>&#125;</span><br><span class="line">    XML = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;soap:Body&gt;&lt;Request xmlns=&quot;http://tempuri.org/&quot;&gt;&lt;jme&gt;&lt;JobClassFullName&gt;WeChatJSTicket.JobWS.Job.JobRefreshTicket,WeChatJSTicket.JobWS&lt;/JobClassFullName&gt;&lt;Action&gt;RUN&lt;/Action&gt;&lt;Param&gt;1&lt;/Param&gt;&lt;HostIP&gt;127.0.0.1&lt;/HostIP&gt;&lt;JobInfo&gt;1&lt;/JobInfo&gt;&lt;NeedParallel&gt;false&lt;/NeedParallel&gt;&lt;/jme&gt;&lt;/Request&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;http://jobws.push.mobile.xxxxxxxx.com/RefreshWeiXInTokenJob/RefreshService.asmx&#x27;</span></span><br><span class="line">    r = requests.post(url=url, heards=heards, data=XML)</span><br><span class="line">    data = r.text</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h4 id="状态异常处理"><a href="#状态异常处理" class="headerlink" title="状态异常处理"></a>状态异常处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&#x27;http://ip.taobao.com/service/getIpInfo.php&#x27;</span>  <span class="comment"># 淘宝IP地址库API</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(URL, params=&#123;<span class="string">&#x27;ip&#x27;</span>: <span class="string">&#x27;8.8.8.8&#x27;</span>&#125;, timeout=<span class="number">1</span>)</span><br><span class="line">    r.raise_for_status()  <span class="comment"># 如果响应状态码不是 200，就主动抛出异常</span></span><br><span class="line"><span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    result = r.json()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(result), result, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="上传文件："><a href="#上传文件：" class="headerlink" title="上传文件："></a>上传文件：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1:8080/upload&#x27;</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;/home/rxf/test.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line"><span class="comment">#files = &#123;&#x27;file&#x27;: (&#x27;report.jpg&#x27;, open(&#x27;/home/lyb/sjzl.mpg&#x27;, &#x27;rb&#x27;))&#125;     #显式的设置文件名</span></span><br><span class="line"> </span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><strong>request更加方便的是，可以把字符串当作文件进行上传：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1:8080/upload&#x27;</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">b&#x27;Hello Requests.&#x27;</span>)&#125;     <span class="comment">#必需显式的设置文件名</span></span><br><span class="line"> </span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>用md5进行加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">imooc = <span class="string">&quot;imooc.com&quot;</span></span><br><span class="line"><span class="comment"># header 加密</span></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">data = <span class="built_in">str</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;11111&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">md5.update(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">res1 = md5.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解析:&quot;</span>,res1)</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;m.imooc.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/javascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://m.imooc.com/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: res1</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;https://m.imooc.com/api/search/searchword&#x27;</span></span><br><span class="line">response = requests.get(url, headers=header, verify=<span class="literal">False</span>)  <span class="comment"># 请尽量避免禁用 SSL 验证</span></span><br><span class="line"><span class="built_in">print</span>(response)  <span class="comment"># 输出响应文本</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    json_response = response.json()</span><br><span class="line">    <span class="built_in">print</span>(json.dumps(json_response, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line"><span class="keyword">except</span> json.decoder.JSONDecodeError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;JSON 解码错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="身份验证："><a href="#身份验证：" class="headerlink" title="身份验证："></a>身份验证：</h4><p>基本身份认证(HTTP Basic Auth)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"> </span><br><span class="line">r = requests.get(<span class="string">&#x27;https://httpbin.org/hidden-basic-auth/user/passwd&#x27;</span>, auth=HTTPBasicAuth(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;passwd&#x27;</span>))</span><br><span class="line"><span class="comment"># r = requests.get(&#x27;https://httpbin.org/hidden-basic-auth/user/passwd&#x27;, auth=(&#x27;user&#x27;, &#x27;passwd&#x27;))    # 简写</span></span><br><span class="line"><span class="built_in">print</span>(r.json())</span><br></pre></td></tr></table></figure><p>另一种非常流行的HTTP身份认证形式是摘要式身份认证，Requests对它的支持也是开箱即可用的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(URL, auth=HTTPDigestAuth(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Cookies与会话对象：</strong></p><p>如果某个响应中包含一些Cookie，你可以快速访问它们：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">r = requests.get(<span class="string">&#x27;http://www.google.com.hk/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.cookies[<span class="string">&#x27;NID&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(r.cookies))</span><br></pre></td></tr></table></figure><p>要想发送你的cookies到服务器，可以使用 cookies 参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/cookies&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;testCookies_1&#x27;</span>: <span class="string">&#x27;Hello_Python3&#x27;</span>, <span class="string">&#x27;testCookies_2&#x27;</span>: <span class="string">&#x27;Hello_Requests&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 在Cookie Version 0中规定空格、方括号、圆括号、等于号、逗号、双引号、斜杠、问号、@，冒号，分号等特殊符号都不能作为Cookie的内容。</span></span><br><span class="line">r = requests.get(url, cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(r.json())</span><br></pre></td></tr></table></figure><p>会话对象让你能够跨请求保持某些参数，最方便的是在同一个Session实例发出的所有请求之间保持cookies，且这些都是自动处理的，甚是方便。<br>下面就来一个真正的实例，如下是快盘签到脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">headers = &#123;<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, compress&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en-us;q=0.5,en;q=0.3&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">s = requests.Session()</span><br><span class="line">s.headers.update(headers)</span><br><span class="line"><span class="comment"># s.auth = (&#x27;superuser&#x27;, &#x27;123&#x27;)</span></span><br><span class="line">s.get(<span class="string">&#x27;https://www.kuaipan.cn/account_login.htm&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">_URL = <span class="string">&#x27;http://www.kuaipan.cn/index.php&#x27;</span></span><br><span class="line">s.post(_URL, params=&#123;<span class="string">&#x27;ac&#x27;</span>:<span class="string">&#x27;account&#x27;</span>, <span class="string">&#x27;op&#x27;</span>:<span class="string">&#x27;login&#x27;</span>&#125;,</span><br><span class="line">       data=&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;****@foxmail.com&#x27;</span>, <span class="string">&#x27;userpwd&#x27;</span>:<span class="string">&#x27;********&#x27;</span>, <span class="string">&#x27;isajax&#x27;</span>:<span class="string">&#x27;yes&#x27;</span>&#125;)</span><br><span class="line">r = s.get(_URL, params=&#123;<span class="string">&#x27;ac&#x27;</span>:<span class="string">&#x27;zone&#x27;</span>, <span class="string">&#x27;op&#x27;</span>:<span class="string">&#x27;taskdetail&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.json())</span><br><span class="line">s.get(_URL, params=&#123;<span class="string">&#x27;ac&#x27;</span>:<span class="string">&#x27;common&#x27;</span>, <span class="string">&#x27;op&#x27;</span>:<span class="string">&#x27;usersign&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>requests模块抓取网页源码并保存到文件示例：</strong></p><p>这是一个基本的文件保存操作，但这里有几个值得注意的问题：</p><p>1.安装requests包，命令行输入pip install requests即可自动安装。很多人推荐使用requests，自带的urllib.request也可以抓取网页源码</p><p>2.open方法encoding参数设为utf-8，否则保存的文件会出现乱码。</p><p>3.如果直接在cmd中输出抓取的内容，会提示各种编码错误，所以保存到文件查看。</p><p>4.with open方法是更好的写法，可以自动操作完毕后释放资源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /urs/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;requests模块抓取网页源码并保存到文件示例&#x27;&#x27;&#x27;</span></span><br><span class="line">html = requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html.text)</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;读取一个txt文件，每次读取一行，并保存到另一个txt文件中的示例&#x27;&#x27;&#x27;</span></span><br><span class="line">ff = <span class="built_in">open</span>(<span class="string">&#x27;testt.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        ff.write(line)</span><br><span class="line">        ff.close()</span><br></pre></td></tr></table></figure><p>因为在命令行中打印每次读取一行的数据，中文会出现编码错误，所以每次读取一行并保存到另一个文件，这样来测试读取是否正常。（注意open的时候制定encoding编码方式）</p><h4 id="自动登陆"><a href="#自动登陆" class="headerlink" title="自动登陆"></a>自动登陆</h4><p><strong>抽屉新热榜：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># ############## 方式一 ##############</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># ## 1、首先登陆任何页面，获取cookie</span></span><br><span class="line"><span class="string">i1 = requests.get(url=&quot;http://dig.chouti.com/help/service&quot;)</span></span><br><span class="line"><span class="string">i1_cookies = i1.cookies.get_dict()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ## 2、用户登陆，携带上一次的cookie，后台对cookie中的 gpsd 进行授权</span></span><br><span class="line"><span class="string">i2 = requests.post(</span></span><br><span class="line"><span class="string">    url=&quot;http://dig.chouti.com/login&quot;,</span></span><br><span class="line"><span class="string">    data=&#123;</span></span><br><span class="line"><span class="string">        &#x27;phone&#x27;: &quot;8615131255089&quot;,</span></span><br><span class="line"><span class="string">        &#x27;password&#x27;: &quot;xxooxxoo&quot;,</span></span><br><span class="line"><span class="string">        &#x27;oneMonth&#x27;: &quot;&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    cookies=i1_cookies</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># ## 3、点赞（只需要携带已经被授权的gpsd即可）</span></span><br><span class="line"><span class="string">gpsd = i1_cookies[&#x27;gpsd&#x27;]</span></span><br><span class="line"><span class="string">i3 = requests.post(</span></span><br><span class="line"><span class="string">    url=&quot;http://dig.chouti.com/link/vote?linksId=8589523&quot;,</span></span><br><span class="line"><span class="string">    cookies=&#123;&#x27;gpsd&#x27;: gpsd&#125;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(i3.text)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># ############## 方式二 ##############</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import requests</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session = requests.Session()</span></span><br><span class="line"><span class="string">i1 = session.get(url=&quot;http://dig.chouti.com/help/service&quot;)</span></span><br><span class="line"><span class="string">i2 = session.post(</span></span><br><span class="line"><span class="string">    url=&quot;http://dig.chouti.com/login&quot;,</span></span><br><span class="line"><span class="string">    data=&#123;</span></span><br><span class="line"><span class="string">        &#x27;phone&#x27;: &quot;8615131255089&quot;,</span></span><br><span class="line"><span class="string">        &#x27;password&#x27;: &quot;xxooxxoo&quot;,</span></span><br><span class="line"><span class="string">        &#x27;oneMonth&#x27;: &quot;&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">i3 = session.post(</span></span><br><span class="line"><span class="string">    url=&quot;http://dig.chouti.com/link/vote?linksId=8589523&quot;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">print(i3.text)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>github：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># ############## 方式一 ##############</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 1. 访问登陆页面，获取 authenticity_token</span></span><br><span class="line"><span class="comment"># i1 = requests.get(&#x27;https://github.com/login&#x27;)</span></span><br><span class="line"><span class="comment"># soup1 = BeautifulSoup(i1.text, features=&#x27;lxml&#x27;)</span></span><br><span class="line"><span class="comment"># tag = soup1.find(name=&#x27;input&#x27;, attrs=&#123;&#x27;name&#x27;: &#x27;authenticity_token&#x27;&#125;)</span></span><br><span class="line"><span class="comment"># authenticity_token = tag.get(&#x27;value&#x27;)</span></span><br><span class="line"><span class="comment"># c1 = i1.cookies.get_dict()</span></span><br><span class="line"><span class="comment"># i1.close()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 1. 携带authenticity_token和用户名密码等信息，发送用户验证</span></span><br><span class="line"><span class="comment"># form_data = &#123;</span></span><br><span class="line"><span class="comment"># &quot;authenticity_token&quot;: authenticity_token,</span></span><br><span class="line"><span class="comment">#     &quot;utf8&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;commit&quot;: &quot;Sign in&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;login&quot;: &quot;wupeiqi@live.com&quot;,</span></span><br><span class="line"><span class="comment">#     &#x27;password&#x27;: &#x27;xxoo&#x27;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># i2 = requests.post(&#x27;https://github.com/session&#x27;, data=form_data, cookies=c1)</span></span><br><span class="line"><span class="comment"># c2 = i2.cookies.get_dict()</span></span><br><span class="line"><span class="comment"># c1.update(c2)</span></span><br><span class="line"><span class="comment"># i3 = requests.get(&#x27;https://github.com/settings/repositories&#x27;, cookies=c1)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># soup3 = BeautifulSoup(i3.text, features=&#x27;lxml&#x27;)</span></span><br><span class="line"><span class="comment"># list_group = soup3.find(name=&#x27;div&#x27;, class_=&#x27;listgroup&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># from bs4.element import Tag</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># for child in list_group.children:</span></span><br><span class="line"><span class="comment">#     if isinstance(child, Tag):</span></span><br><span class="line"><span class="comment">#         project_tag = child.find(name=&#x27;a&#x27;, class_=&#x27;mr-1&#x27;)</span></span><br><span class="line"><span class="comment">#         size_tag = child.find(name=&#x27;small&#x27;)</span></span><br><span class="line"><span class="comment">#         temp = &quot;项目:%s(%s); 项目路径:%s&quot; % (project_tag.get(&#x27;href&#x27;), size_tag.string, project_tag.string, )</span></span><br><span class="line"><span class="comment">#         print(temp)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ############## 方式二 ##############</span></span><br><span class="line"><span class="comment"># session = requests.Session()</span></span><br><span class="line"><span class="comment"># # 1. 访问登陆页面，获取 authenticity_token</span></span><br><span class="line"><span class="comment"># i1 = session.get(&#x27;https://github.com/login&#x27;)</span></span><br><span class="line"><span class="comment"># soup1 = BeautifulSoup(i1.text, features=&#x27;lxml&#x27;)</span></span><br><span class="line"><span class="comment"># tag = soup1.find(name=&#x27;input&#x27;, attrs=&#123;&#x27;name&#x27;: &#x27;authenticity_token&#x27;&#125;)</span></span><br><span class="line"><span class="comment"># authenticity_token = tag.get(&#x27;value&#x27;)</span></span><br><span class="line"><span class="comment"># c1 = i1.cookies.get_dict()</span></span><br><span class="line"><span class="comment"># i1.close()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 1. 携带authenticity_token和用户名密码等信息，发送用户验证</span></span><br><span class="line"><span class="comment"># form_data = &#123;</span></span><br><span class="line"><span class="comment">#     &quot;authenticity_token&quot;: authenticity_token,</span></span><br><span class="line"><span class="comment">#     &quot;utf8&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;commit&quot;: &quot;Sign in&quot;,</span></span><br><span class="line"><span class="comment">#     &quot;login&quot;: &quot;wupeiqi@live.com&quot;,</span></span><br><span class="line"><span class="comment">#     &#x27;password&#x27;: &#x27;xxoo&#x27;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># i2 = session.post(&#x27;https://github.com/session&#x27;, data=form_data)</span></span><br><span class="line"><span class="comment"># c2 = i2.cookies.get_dict()</span></span><br><span class="line"><span class="comment"># c1.update(c2)</span></span><br><span class="line"><span class="comment"># i3 = session.get(&#x27;https://github.com/settings/repositories&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># soup3 = BeautifulSoup(i3.text, features=&#x27;lxml&#x27;)</span></span><br><span class="line"><span class="comment"># list_group = soup3.find(name=&#x27;div&#x27;, class_=&#x27;listgroup&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># from bs4.element import Tag</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># for child in list_group.children:</span></span><br><span class="line"><span class="comment">#     if isinstance(child, Tag):</span></span><br><span class="line"><span class="comment">#         project_tag = child.find(name=&#x27;a&#x27;, class_=&#x27;mr-1&#x27;)</span></span><br><span class="line"><span class="comment">#         size_tag = child.find(name=&#x27;small&#x27;)</span></span><br><span class="line"><span class="comment">#         temp = &quot;项目:%s(%s); 项目路径:%s&quot; % (project_tag.get(&#x27;href&#x27;), size_tag.string, project_tag.string, )</span></span><br><span class="line"><span class="comment">#         print(temp)</span></span><br></pre></td></tr></table></figure><p><strong>知乎：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line">i1 = session.get(</span><br><span class="line">    url=<span class="string">&#x27;https://www.zhihu.com/#signin&#x27;</span>,</span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">soup1 = BeautifulSoup(i1.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">xsrf_tag = soup1.find(name=<span class="string">&#x27;input&#x27;</span>, attrs=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;_xsrf&#x27;</span>&#125;)</span><br><span class="line">xsrf = xsrf_tag.get(<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line">current_time = time.time()</span><br><span class="line">i2 = session.get(</span><br><span class="line">    url=<span class="string">&#x27;https://www.zhihu.com/captcha.gif&#x27;</span>,</span><br><span class="line">    params=&#123;<span class="string">&#x27;r&#x27;</span>: current_time, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;login&#x27;</span>&#125;,</span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;zhihu.gif&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(i2.content)</span><br><span class="line"></span><br><span class="line">captcha = <span class="built_in">input</span>(<span class="string">&#x27;请打开zhihu.gif文件，查看并输入验证码：&#x27;</span>)</span><br><span class="line">form_data = &#123;</span><br><span class="line">    <span class="string">&quot;_xsrf&quot;</span>: xsrf,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;xxooxxoo&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;captcha&quot;</span>: <span class="string">&#x27;captcha&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;424662508@qq.com&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">i3 = session.post(</span><br><span class="line">    url=<span class="string">&#x27;https://www.zhihu.com/login/email&#x27;</span>,</span><br><span class="line">    data=form_data,</span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">i4 = session.get(</span><br><span class="line">    url=<span class="string">&#x27;https://www.zhihu.com/settings/profile&#x27;</span>,</span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">soup4 = BeautifulSoup(i4.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">tag = soup4.find(<span class="built_in">id</span>=<span class="string">&#x27;rename-section&#x27;</span>)</span><br><span class="line">nick_name = tag.find(<span class="string">&#x27;span&#x27;</span>,class_=<span class="string">&#x27;name&#x27;</span>).string</span><br><span class="line"><span class="built_in">print</span>(nick_name)</span><br></pre></td></tr></table></figure><p><strong>博客园：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">js_encrypt</span>(<span class="params">text</span>):</span><br><span class="line">    b64der = <span class="string">&#x27;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCp0wHYbg/NOPO3nzMD3dndwS0MccuMeXCHgVlGOoYyFwLdS24Im2e7YyhB0wrUsyYf0/nhzCzBK8ZC9eCWqd0aHbdgOQT6CuFQBMjbyGYvlVYU2ZP7kG9Ft6YV6oc9ambuO7nPZh+bvXH0zDKfi02prknrScAKC0XhadTHT3Al0QIDAQAB&#x27;</span></span><br><span class="line">    der = base64.standard_b64decode(b64der)</span><br><span class="line"></span><br><span class="line">    pk = rsa.PublicKey.load_pkcs1_openssl_der(der)</span><br><span class="line">    v1 = rsa.encrypt(<span class="built_in">bytes</span>(text, <span class="string">&#x27;utf8&#x27;</span>), pk)</span><br><span class="line">    value = base64.encodebytes(v1).replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    value = value.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line">i1 = session.get(<span class="string">&#x27;https://passport.s.com/user/signin&#x27;</span>)</span><br><span class="line">rep = re.<span class="built_in">compile</span>(<span class="string">&quot;&#x27;VerificationToken&#x27;: &#x27;(.*)&#x27;&quot;</span>)</span><br><span class="line">v = re.search(rep, i1.text)</span><br><span class="line">verification_token = v.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">form_data = &#123;</span><br><span class="line">    <span class="string">&#x27;input1&#x27;</span>: js_encrypt(<span class="string">&#x27;wptawy&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;input2&#x27;</span>: js_encrypt(<span class="string">&#x27;asdfasdf&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;remember&#x27;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i2 = session.post(url=<span class="string">&#x27;https://passport.s.com/user/signin&#x27;</span>,</span><br><span class="line">                  data=json.dumps(form_data),</span><br><span class="line">                  headers=&#123;</span><br><span class="line">                      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;VerificationToken&#x27;</span>: verification_token&#125;</span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line">i3 = session.get(url=<span class="string">&#x27;https://i.s.com/EditDiary.aspx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(i3.text)</span><br></pre></td></tr></table></figure><p><strong>拉勾网：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步：访问登陆页,拿到X_Anti_Forge_Token，X_Anti_Forge_Code</span></span><br><span class="line"><span class="comment"># 1、请求url:https://passport.lagou.com/login/login.html</span></span><br><span class="line"><span class="comment"># 2、请求方法:GET</span></span><br><span class="line"><span class="comment"># 3、请求头:</span></span><br><span class="line"><span class="comment">#    User-agent</span></span><br><span class="line">r1 = requests.get(<span class="string">&#x27;https://passport.lagou.com/login/login.html&#x27;</span>,</span><br><span class="line">                 headers=&#123;</span><br><span class="line">                     <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&#x27;</span>,</span><br><span class="line">                 &#125;,</span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line">X_Anti_Forge_Token = re.findall(<span class="string">&quot;X_Anti_Forge_Token = &#x27;(.*?)&#x27;&quot;</span>, r1.text, re.S)[<span class="number">0</span>]</span><br><span class="line">X_Anti_Forge_Code = re.findall(<span class="string">&quot;X_Anti_Forge_Code = &#x27;(.*?)&#x27;&quot;</span>, r1.text, re.S)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(X_Anti_Forge_Token, X_Anti_Forge_Code)</span><br><span class="line"><span class="comment"># print(r1.cookies.get_dict())</span></span><br><span class="line"><span class="comment"># 第二步：登陆</span></span><br><span class="line"><span class="comment"># 1、请求url:https://passport.lagou.com/login/login.json</span></span><br><span class="line"><span class="comment"># 2、请求方法:POST</span></span><br><span class="line"><span class="comment"># 3、请求头:</span></span><br><span class="line"><span class="comment">#    cookie</span></span><br><span class="line"><span class="comment">#    User-agent</span></span><br><span class="line"><span class="comment">#    Referer:https://passport.lagou.com/login/login.html</span></span><br><span class="line"><span class="comment">#    X-Anit-Forge-Code:53165984</span></span><br><span class="line"><span class="comment">#    X-Anit-Forge-Token:3b6a2f62-80f0-428b-8efb-ef72fc100d78</span></span><br><span class="line"><span class="comment">#    X-Requested-With:XMLHttpRequest</span></span><br><span class="line"><span class="comment"># 4、请求体：</span></span><br><span class="line"><span class="comment"># isValidate:true</span></span><br><span class="line"><span class="comment"># username:15131252215</span></span><br><span class="line"><span class="comment"># password:ab18d270d7126ea65915c50288c22c0d</span></span><br><span class="line"><span class="comment"># request_form_verifyCode:&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># submit:&#x27;&#x27;</span></span><br><span class="line">r2 = requests.post(</span><br><span class="line">    <span class="string">&#x27;https://passport.lagou.com/login/login.json&#x27;</span>,</span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://passport.lagou.com/login/login.html&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-Anit-Forge-Code&#x27;</span>: X_Anti_Forge_Code,</span><br><span class="line">        <span class="string">&#x27;X-Anit-Forge-Token&#x27;</span>: X_Anti_Forge_Token,</span><br><span class="line">        <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">&quot;isValidate&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;15131255089&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;ab18d270d7126ea65915c50288c22c0d&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;request_form_verifyCode&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;submit&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    cookies=r1.cookies.get_dict()</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(r2.text)</span><br></pre></td></tr></table></figure><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><p>Flask是一个轻量级的Web应用框架，基于Python编写，其核心思想是保持简洁，灵活性和易于扩展。Flask提供了基本的Web开发工具和应用程序的结构，但同时也允许开发者自由选择其他库和工具来扩展其功能。Flask的设计目标是使开发者能够快速构建具有基本功能的Web应用程序。在日常生活中我们需要将模型打包为api接口，这里需要借助一些web框架，最常用的就是flask框架。</p><p>作为测试人员，在工作或者学习的过程中，有时会遇到没有可以调用的现成的接口，导致我们的代码没法调试跑通的情况。</p><p>这时，我们使用python中的web框架<code>Flask</code>就可以很方便的编写简单的接口，用于调用或调试。在之前的<a href="https://www.cnblogs.com/lfr0123/tag/pytest/">pytest系列文章</a>中，已经使用过Flask编写接口用于代码调试。相比于python的另一个web框架Django，Flask编写接口要方便简单很多。</p><p><strong>下面是一些Flask框架的主要特点：</strong></p><ul><li>轻量级：Flask是一个轻量级的框架，其代码库非常小，并且不需要依赖大量的外部库和工具，因此可以轻松地安装和部署。</li><li>灵活性：Flask允许开发者自由选择其他库和工具来扩展其功能，这使得开发者可以根据自己的需求进行灵活的配置。</li><li>易于扩展：Flask提供了简单易用的扩展接口，开发者可以使用这些接口来添加新功能或定制框架的行为。</li><li>Web服务器支持：Flask支持多种Web服务器，如内置的开发服务器、Gunicorn和uWSGI等。</li><li>RESTful支持：Flask提供了内置的RESTful路由，使得开发RESTful API变得非常容易。</li><li>Jinja2模板引擎：Flask集成了Jinja2模板引擎，开发者可以使用模板来构建灵活的Web应用程序。</li><li>Flask-WTF表单：Flask提供了Flask-WTF扩展，使得表单处理变得简单而直观。</li><li>内置的调试器：Flask提供了内置的调试器，使得开发者可以轻松地调试和排除错误。</li><li>序列化与反序列化：Flask提供了内置的序列化和反序列化功能，使得开发RESTful API变得更加容易。</li></ul><p><em>总的来说，Flask是一个非常适合快速构建小型Web应用程序的框架。它提供了基本的Web开发工具和应用程序的结构，同时也支持灵活的扩展和定制。如果您需要快速构建一个小型的Web应用程序，Flask是一个非常好的选择。</em></p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br><span class="line">验证是否安装成功或查看版本命令：pip show flask</span><br></pre></td></tr></table></figure><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Home</span>():</span><br><span class="line">    data = json.dumps(&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/passport/user/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Login</span>():</span><br><span class="line">    username = request.args.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    password = request.args.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> username <span class="keyword">and</span> password:</span><br><span class="line">        data = json.dumps(&#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>:<span class="string">&quot;200&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>:<span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;info&#x27;</span>:<span class="string">&#x27;www.baidu.com&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = json.dumps(&#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span>:<span class="string">&quot;username or password ???&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><p>以下是使用 Flask 框架封装接口的示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># methods: 指定请求方式</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/process&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_data</span>():</span><br><span class="line"><span class="comment"># 请求方式为post时，可以使用 request.get_json()接收到JSON数据</span></span><br><span class="line">    data = request.get_json()  <span class="comment"># 获取 POST 请求中的 JSON 数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理数据</span></span><br><span class="line">    <span class="comment"># 调用do_something_with_data函数来处理接收到的数据。</span></span><br><span class="line">    processed_data = do_something_with_data(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求方得到处理后的数据</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(processed_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>代码改进</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加异常检测代码</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># methods: 指定请求方式</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/process&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_data</span>():</span><br><span class="line"><span class="comment"># 请求方式为post时，可以使用 request.get_json()接收到JSON数据</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = request.get_json()</span><br><span class="line">        <span class="comment"># 如果得到的data是字符串格式，则需要用json.loads来变换成python格式，看个人需求</span></span><br><span class="line">        <span class="comment"># data = json.loads(data)</span></span><br><span class="line">        <span class="built_in">print</span>(data)<span class="comment"># 获取 POST 请求中的 JSON 数据</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;请求数据失败&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理数据</span></span><br><span class="line">    <span class="comment"># 调用do_something_with_data函数来处理接收到的数据。</span></span><br><span class="line">    <span class="comment"># 判断是否接收到数据</span></span><br><span class="line"><span class="keyword">if</span> data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            processed_data= do_something_with_data(data)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;处理数据失败&#x27;</span>&#125;), <span class="number">666</span></span><br><span class="line">    <span class="comment"># 返回的数据格式看请求方的要求了，也有可能需要json处理后的数据，即jsonify(processed_data)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(processed_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Home</span>():</span><br><span class="line">    data = json.dumps(&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;info&#x27;</span>: <span class="string">&#x27;www.baidu.com&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/passport/user/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Login</span>():</span><br><span class="line">    request_method = request.method</span><br><span class="line">    <span class="keyword">if</span> request_method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        data = json.dumps(&#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>:<span class="string">&quot;200&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>:<span class="string">&#x27;Hello World!&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;info&#x27;</span>:<span class="string">&#x27;www.baidu.com&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = json.dumps(&#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span>:<span class="string">&quot;username or password ???&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h2><h3 id="Moco框架"><a href="#Moco框架" class="headerlink" title="Moco框架"></a>Moco框架</h3><p>Moco框架是Mock概念中的一种实现。<br>Moco框架是一个简单搭建模拟服务器的程序库/工具，这个基于 Java 开发的开源项目。<br>Moco框架已经在 Github 上获得了不少的关注，该项目的简介是这样描述自己的：</p><ul><li>Moco 是一个简单搭建 stub 的框架，主要用于测试和集成。</li><li>这个框架的开发灵感来自 Mock 框架，如 <code>Mockito</code>和 <code>Playframework</code>。</li></ul><p>为什么要开发这个框架？</p><ul><li>用于基于HTTP协议的集成：<code>web service</code>、<code>REST</code>等，在我们的项目开发中被广泛应用。</li><li>以前，我们每次都要往<code>Jetty</code>或<code>Tomcat</code>等应用服务器上部署一个新的 WAR。</li><li>大家都知道，开发部署一个 WAR 的过程是很枯燥的，即使在嵌入式服务器上也是如此。而且，每次我们做一点改动，整个 WAR 都要重新组装。</li><li>Moco框架的出现，正是为了解决这些问题。开发团队只要根据自己的需要进行相应的配置，就会很方便得到一个模拟服务器。</li><li>而且，由于 Moco框架本身的灵活性，其用途已经不再局限于最初的集成测试。<br>比如：<br>Moco 可以用于移动开发；<br>模拟尚未开发的服务；<br>Moco 还可以用于前端开发，模拟一个完整的 Web 服务器等等。</li></ul><p><strong>作用</strong></p><p>一般接口文档编写完成后，测试人员需要提前进行接口测试用例的编写，而这时接口开发工作可能还没完成。<br>如果要等到开发人员完成接口的开发，再进行测试用例的编写，这样会降低测试开发的效率。<br>这时如果测试人员使用Moco框架搭建一个模拟服务器，就可以根据接口文档，自己模拟出接口的调用并返回结果。<br>在用例设计完成后，即使接口开发工作还未完成，也可以立即进行接口测试用例的执行。并且在这个过程中可以修改、补充测试用例。<br>在接口开发完成以后，只需要简单的切换服务器地址，就可以测试所有的开发人员实现的接口了。这样可以节省很多的测试时间，减少项目开发的周期。<br>Moco框架支持HTTP协议，采用热部署，修改配置后，立刻生效，无需重启服务。<br>Moco框架接口测试中的作用：方法隔离，服务解耦。即可并行又可驱动。</p><p>Moco框架的启动</p><ol><li>条件：<br>因为Moco框架工具是一个jar包，所以需要Java环境才能启动。<br>即：配置好Java环境。</li><li>启动：<br>把Moco框架Jar包和Json文件放入同一个文件夹中，<br>命令行终端里进入到Json文件所在的目录，执行启用命令，如下：<br><code>java -jar ./moco-runner-0.11.0-standalone.jar http -p 12306 -c foo.json</code>即可。<br>说明：<br><code>./moco-runner-0.11.0-standalone.jar</code>为Moco工具所在目录。<br><code>http</code>：表示服务器协议，<code>server type: http, https, socket</code> 。<br><code>-p</code>：表示端口号。<br><code>-c</code>：表示一个json文件。接口所有的信息都配置在该json文件中。</li></ol><p>提示：Moco工具路径和json文件路径都可以写相对路径和绝对路径。</p><p>当需要调用接口来编写测试用例的时候，此时该接口并没有被实现，这个时候我们就可以用Mock框架来模拟一个接口出来。<br>使用Mock模拟接口以下功能：</p><ul><li>拦截服务：<code>http</code>，<code>https</code>。</li><li>请求方式：GET，POST。</li><li>模拟请求地址：URL。</li><li>模拟参数：包括<code>header</code>和<code>cookie</code>的数据。</li><li>模拟响应结果。</li><li>支持重定向。</li></ul><p><strong>Json文件的配置属性说明：</strong><br>像我们上面练习过的Json文件配置，所有的数据值是固定的，<br>如：<code>description</code>、<code>request</code>、<code>response</code>、<code>redirectTo</code>等这些都是固定的，不能修改，修改可能连Moco服务都启动不来。<br>还有<code>request</code>的属性值，如：<code>uri</code>、<code>method</code>、<code>cookies</code>、<code>headers</code>，也是必须这样写的。<br>还有GET请求传递参数用<code>queries</code>属性，POST请求传递参数用<code>forms</code>和<code>json</code>属性都可以。（PUT,DELETE请求同Post请求。）<br><strong>Moco框架原理：</strong><br>就是把所有接口的数据，包括发送请求的所有数据和返回结果的所有数据，以Json数据格式进行编写。<br>把这些数据放入Moco框架提供的HTTP或者HTTPS的服务上，就实现了接口数据的模拟。<br>在使用的时候，我们只要按照json文件中接口配置的信息进行请求即可，如果调用接口传递的数据和Json文件中接口编写要接收的数据不一致，则无法请求成功。</p><p>（1）Moco框架第一个练习<br>编写一个Json文件，接口所有的信息都配置在该json文件中。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;第一个Moco框架例子。&quot;</span>,  <span class="comment"># 描述：增加接口的可读性</span></span><br><span class="line">    <span class="string">&quot;request&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/api/moco/demo&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;response&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;hello Moco ！&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]    </span><br></pre></td></tr></table></figure><p>在cmd命令行或者PyCharm的命令行终端执行启动命令。</p><ul><li>进入json文件的所在目录。</li><li>执行命令：<code>java -jar ./moco-runner-0.12.0-standalone.jar http -p 12306 -c test.json</code></li></ul><p>Moco服务启动后，我们可以使用Requests库请求接口，也可以用浏览器接口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入requests库</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.明确请求地址</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:12306/api/moco/demo&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.发送请求</span></span><br><span class="line">response = requests.get(url=url)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><strong>搭建mock服务端代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">impor</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,json</span><br><span class="line"><span class="comment">#实例化一个web服务对象</span></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="comment">#创建一个方法来处理请求</span></span><br><span class="line"><span class="comment">#定义一个路由--访问服务的根目录就可以得到结果</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;hello flask&lt;/h1&gt;&#x27;</span></span><br><span class="line"><span class="comment">#构造一个接受post请求的响应</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_post</span>():</span><br><span class="line">    <span class="comment">#处理接口发送过来的两个参数，将两个参数合并成一个字符串返回</span></span><br><span class="line">    d1=request.form[<span class="string">&#x27;d1&#x27;</span>]</span><br><span class="line">    d2=request.form[<span class="string">&#x27;d2&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> d1+d2</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#运行服务，并确定服务运行的IP和端口</span></span><br><span class="line">    app.run(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="string">&#x27;9090&#x27;</span>)</span><br></pre></td></tr></table></figure><p>客户端代码：</p><p>import requests</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">body=&#123;</span><br><span class="line">    <span class="string">&#x27;d1&#x27;</span>:<span class="string">&#x27;hi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d2&#x27;</span>:<span class="string">&#x27;falsk12312312&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">resp=requests.post(<span class="string">&#x27;http://127.0.0.1:9090/post&#x27;</span>,data=body)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><h4 id="get请求-1"><a href="#get请求-1" class="headerlink" title="get请求"></a>get请求</h4><p><strong>没有参数的get请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;模拟一个没有参数的get请求。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/api/moco/get/demo&quot;</span>,</span><br><span class="line">      <span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span>  <span class="comment"># 这里添加了要给method属性</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;response&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;hello get request !&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>有参数的get请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;模拟一个没有参数的get请求。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/api/moco/get/demo&quot;</span>,</span><br><span class="line">      <span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;response&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;hello get request !&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;模拟一个带参数的get请求。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/api/moco/get/param/demo&quot;</span>,</span><br><span class="line">      <span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">      <span class="string">&quot;queries&quot;</span>: &#123;      <span class="comment"># get请求参数的选项，queries固定属性。</span></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;response&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;hello xiaoming !&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>说明：请求地址为：<code>http://127.0.0.1:12306/api/moco/get/param/demo?name=xiaoming&amp;age=18</code></p><h4 id="post请求-1"><a href="#post请求-1" class="headerlink" title="post请求"></a>post请求</h4><p><strong>没有参数的post请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;模拟一个不带数据的post请求。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/api/moco/post/demo&quot;</span>,</span><br><span class="line">      <span class="string">&quot;method&quot;</span>: <span class="string">&quot;post&quot;</span>    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;response&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;hello post request !&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>提示：POST请求就不能用浏览器进行查看了。只能用Request库或者JMeter，Postman等进行查看。（能进行接口调用的工具都可以）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入requests库</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.明确请求地址</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:12306/api/moco/post/demo&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.发送请求</span></span><br><span class="line">response = requests.post(url=url)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><strong>有参数的post请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;模拟一个带数据post请求。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/api/moco/post/param/demo&quot;</span>,</span><br><span class="line">      <span class="string">&quot;method&quot;</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">      <span class="string">&quot;forms&quot;</span>: &#123;      <span class="comment"># post请求带参数，参数要添加到forms属性中。</span></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;response&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;hello post xiaoming !&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>调用接口查看结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入requests库</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.明确请求地址</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:12306/api/moco/post/param/demo&quot;</span></span><br><span class="line"> </span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.发送请求</span></span><br><span class="line">response = requests.post(url=url, data=data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><p>使用的是<code>request</code>中的<code>cookies</code>属性。</p><p><strong>get请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;模拟一个带cookie的get请求。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/api/moco/get/cookies/demo&quot;</span>,</span><br><span class="line">      <span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cookies&quot;</span>: &#123;          <span class="comment"># 这里添加cookies参数</span></span><br><span class="line">        <span class="string">&quot;login&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;response&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;hello get cookies !&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>调用接口查看结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入requests库</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.明确请求地址</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:12306/api/moco/get/cookies/demo&quot;</span></span><br><span class="line"> </span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;login&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.发送请求</span></span><br><span class="line">response = requests.get(url=url, cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><strong>post请求</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;模拟一个带cookie的post请求。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/api/moco/post/cookies/demo&quot;</span>,</span><br><span class="line">      <span class="string">&quot;method&quot;</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cookies&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;login&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;json&quot;</span>: &#123;     <span class="comment"># post请求的参数也可以用json格式的数据进行传输</span></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;response&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;status&quot;</span>: <span class="number">201</span>,</span><br><span class="line">      <span class="string">&quot;json&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: <span class="string">&quot;hello post cookies !&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>调用接口查看结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入requests库</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.明确请求地址</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:12306/api/moco/post/cookies/demo&quot;</span></span><br><span class="line"> </span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;login&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">json = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.发送请求</span></span><br><span class="line">response = requests.post(url=url, json=json ,cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>使用的是<code>request</code>中的<code>headers</code>属性。<br><code>Header</code>是添加请求头信息，关于请求头信息get请求和post请求都是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;模拟一个带Header的post请求。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/api/moco/post/headers/demo&quot;</span>,</span><br><span class="line">      <span class="string">&quot;method&quot;</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">      <span class="string">&quot;headers&quot;</span>: &#123;      <span class="comment"># 添加请求头信息</span></span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;json&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;response&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;status&quot;</span>: <span class="number">201</span>,</span><br><span class="line">      <span class="string">&quot;json&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: <span class="string">&quot;hello get Headers !&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>调用接口查看结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入requests库</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.明确请求地址</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:12306/api/moco/post/headers/demo&quot;</span></span><br><span class="line"> </span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">json = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.发送请求</span></span><br><span class="line">response = requests.post(url=url, json=json, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h4 id="Moco模拟重定向"><a href="#Moco模拟重定向" class="headerlink" title="Moco模拟重定向"></a>Moco模拟重定向</h4><p>重定向使用的是和<code>request</code>同级的<code>redirectTo</code>属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;重定向到百度&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/api/moco/redirect/demo&quot;</span>,</span><br><span class="line">      <span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;redirectTo&quot;</span>: <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;重定向到自己的接口&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;/api/moco/redirect/new/demo&quot;</span>,</span><br><span class="line">      <span class="string">&quot;method&quot;</span>: <span class="string">&quot;get&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;redirectTo&quot;</span>: <span class="string">&quot;http://www.baidu.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;response&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;hello redirectTo !&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a><strong>读取文件</strong></h2><p>1.python使用自带的configparser模块用来读取配置文件，配置文件可以为.conf或.ini结尾</p><p>在使用前需要先安装该模块，使用pip安装即可</p><p>2.新建一个名为a.conf的配置文件</p><p>a) 配置文件中包含一个或多个 section， 每个 section 有自己的 option；</p><p>b) section 用 [sect_name] 表示，每个option是一个键值对，使用分隔符 = 或 : 隔开；</p><p>c) 在 option 分隔符两端的空格会被忽略掉</p><p>d) 配置文件使用 # 和 ; 注释</p><p>下面给出一个配置文件的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件路径的配置</span></span><br><span class="line">[file path]   <span class="comment"># 区域名，即section</span></span><br><span class="line"><span class="comment"># 测试用例excel文件的路径</span></span><br><span class="line">cases_path = D:\\cases.xlsx   <span class="comment"># 选项 option</span></span><br><span class="line">log_path = result.txt[excel]actual_col = 6result_col = <span class="number">7</span></span><br></pre></td></tr></table></figure><p>3.导入ConfigParser模块，创建配置解析器对象并读取配置文件名</p><p>from configparser import ConfigParser</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建配置解析器对象</span></span><br><span class="line">config = ConfigParser()</span><br><span class="line"><span class="comment"># 2.读取配置文件名</span></span><br><span class="line">config.read(<span class="string">&#x27;a.conf&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>4.读操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一，第一个参数为区域名，第二个参数为选项名</span></span><br><span class="line">cases_path = config[<span class="string">&#x27;file path&#x27;</span>][<span class="string">&#x27;cases_path&#x27;</span>]</span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">cases_path = config.get(<span class="string">&#x27;file path&#x27;</span>, <span class="string">&#x27;cases_path&#x27;</span>)</span><br><span class="line"><span class="comment"># 方法三# 通过getint方法得到的结果值是int类型</span></span><br><span class="line"><span class="comment"># 同样也有getboolean，getfloat方法</span></span><br><span class="line">actual_col = config.getint(<span class="string">&#x27;excel&#x27;</span>, <span class="string">&#x27;actual_col&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意：</p><p># 使用getboolean去读取值，只能读取如下的数据，如果是非0和1，也会报错<br># 1 yes on true True得到的结果为True<br># 0 no off false False得到的结果为False</p><p>5.写操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> configparser <span class="keyword">import</span> ConfigParser</span><br><span class="line"><span class="comment"># 1.创建配置解析器对象</span></span><br><span class="line">config = ConfigParsr()</span><br><span class="line"><span class="comment"># 2.将需要写入配置文件中的数据组合</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">config[<span class="string">&#x27;file path&#x27;</span>] = &#123;<span class="string">&#x27;cases_path&#x27;</span>: <span class="string">&#x27;D:\\cases.xlsx&#x27;</span>, <span class="string">&#x27;log_path&#x27;</span>: <span class="string">&#x27;result.txt&#x27;</span>&#125;</span><br><span class="line">config[<span class="string">&#x27;msg&#x27;</span>] = &#123;<span class="string">&#x27;success_result&#x27;</span>: <span class="string">&#x27;Pass&#x27;</span>, <span class="string">&#x27;fail_result&#x27;</span>: <span class="string">&#x27;Fail&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="comment"># 可以使用嵌套字典的字典来创建配置文件</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;file path&#x27;</span>: &#123;<span class="string">&#x27;cases_path&#x27;</span>: <span class="string">&#x27;D:\\cases.xlsx&#x27;</span>, <span class="string">&#x27;log_path&#x27;</span>: <span class="string">&#x27;result.txt&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;msg&#x27;</span>: &#123;<span class="string">&#x27;success_result&#x27;</span>: <span class="string">&#x27;Pass&#x27;</span>, <span class="string">&#x27;fail_result&#x27;</span>: <span class="string">&#x27;Fail&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> data:</span><br><span class="line">    config[key] = data[key]</span><br><span class="line"><span class="comment"># 3.保存到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;b.conf&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    config.write</span><br></pre></td></tr></table></figure><h3 id="excel"><a href="#excel" class="headerlink" title="excel"></a>excel</h3><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HandleExcel</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_excel</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 拼接文件路径</span></span><br><span class="line">        file_path = os.path.join(<span class="string">&quot;..&quot;</span>, <span class="string">&quot;ReadFile&quot;</span>, <span class="string">&quot;read_test.xlsx&quot;</span>)</span><br><span class="line">        <span class="comment"># 加载 Excel 文件</span></span><br><span class="line">        open_excel = openpyxl.load_workbook(file_path)</span><br><span class="line">        <span class="keyword">return</span> open_excel</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_sheet_data</span>(<span class="params">self, index=<span class="literal">None</span></span>):</span><br><span class="line">        sheetnames = self.load_excel().sheetnames</span><br><span class="line">        <span class="keyword">if</span> index <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line">        data = self.load_excel()[sheetnames[index]]</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_all_values</span>(<span class="params">self</span>):</span><br><span class="line">        sheet_data = self.get_sheet_data()</span><br><span class="line">        all_values = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> sheet_data.iter_rows(values_only=<span class="literal">True</span>):</span><br><span class="line">            all_values.append(<span class="built_in">list</span>(row))</span><br><span class="line">        <span class="comment"># json格式</span></span><br><span class="line">        <span class="comment"># for row in all_values:</span></span><br><span class="line">        <span class="comment">#     print(row)</span></span><br><span class="line">        <span class="keyword">return</span> all_values</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_cell_value</span>(<span class="params">self, row, cols</span>):</span><br><span class="line">        <span class="comment"># 获取指定单元格的值</span></span><br><span class="line">        data = self.get_sheet_data().cell(row=row, column=cols).value</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_rows</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取行数</span></span><br><span class="line">        row = self.get_sheet_data().max_row</span><br><span class="line">        <span class="keyword">return</span> row</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_rows_value</span>(<span class="params">self, row</span>):</span><br><span class="line">        row_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.get_sheet_data()[row]:</span><br><span class="line">            <span class="comment"># 将每个单元格的值添加到列表中</span></span><br><span class="line">            row_list.append(i.value)</span><br><span class="line">        <span class="keyword">return</span> row_list</span><br><span class="line">excel_data = HandleExcel()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    handle = HandleExcel()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;全部获取&quot;</span>,handle.get_all_values())</span><br><span class="line">    <span class="comment"># 输出第三行的数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取值&quot;</span>,handle.get_rows_value(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="ini"><a href="#ini" class="headerlink" title="ini"></a>ini</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HandleIni</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_ini</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 加载 server.ini 文件</span></span><br><span class="line">        file_path = os.path.join(<span class="string">&quot;..&quot;</span>, <span class="string">&quot;ReadFile&quot;</span>, <span class="string">&quot;server.ini&quot;</span>)</span><br><span class="line">        cf = configparser.ConfigParser()</span><br><span class="line">        cf.read(file_path, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> cf</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_all_values</span>(<span class="params">self</span>):</span><br><span class="line">        cf = self.load_ini()</span><br><span class="line">        all_values = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> section <span class="keyword">in</span> cf.sections():</span><br><span class="line">            all_values[section] = <span class="built_in">dict</span>(cf[section])</span><br><span class="line">        <span class="keyword">return</span> all_values</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_all_values</span>(<span class="params">self</span>):</span><br><span class="line">        all_values = self.get_all_values()</span><br><span class="line">        <span class="keyword">for</span> section, values <span class="keyword">in</span> all_values.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[<span class="subst">&#123;section&#125;</span>]&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> values.items():</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span> = <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">self, key, node=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">None</span>:</span><br><span class="line">            node = <span class="string">&#x27;server&#x27;</span></span><br><span class="line">        cf = self.load_ini()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取指定节点和键对应的值</span></span><br><span class="line">            data = cf.get(node, key)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;没有获取到值&quot;</span>)</span><br><span class="line">            data = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">handle_ini = HandleIni()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hit = HandleIni()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取全部&quot;</span>,hit.print_all_values())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取值&quot;</span>,hit.get_value(<span class="string">&quot;host&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">base_path = os.getcwd()</span><br><span class="line">sys.path.append(base_path)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_json</span>(<span class="params">file_name=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="comment"># 检查 file_name 是否为 None，如果是，则使用默认文件路径</span></span><br><span class="line">    <span class="keyword">if</span> file_name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        file_path = os.path.join(<span class="string">&quot;..&quot;</span>, <span class="string">&quot;ReadFile&quot;</span>, <span class="string">&quot;code_json.json&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file_path = os.path.join(base_path, file_name)</span><br><span class="line">    <span class="comment"># 打开 JSON 文件并加载数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_value</span>(<span class="params">key, file_name=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="comment"># 获取 JSON 数据</span></span><br><span class="line">    data = handle_json(file_name)</span><br><span class="line">    <span class="comment"># 返回指定键对应的值</span></span><br><span class="line">    <span class="keyword">return</span> data.get(key)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 示例用法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;全部读取：&quot;</span>,handle_json())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;读取值：&quot;</span>,json_value(<span class="string">&quot;api3/getbanneradvertver2&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><h3 id="json-1"><a href="#json-1" class="headerlink" title="json"></a>json</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">base_path = os.getcwd()</span><br><span class="line">sys.path.append(base_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_value</span>(<span class="params">data, cookie_key</span>):</span><br><span class="line">    <span class="comment"># 构建文件路径</span></span><br><span class="line">    file_path = os.path.join(<span class="string">&quot;..&quot;</span>, <span class="string">&quot;ReadFile&quot;</span>, <span class="string">&quot;cookie.json&quot;</span>)</span><br><span class="line">    <span class="comment"># 以只读模式打开文件，并读取已有数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        existing_data = json.load(f)</span><br><span class="line">    <span class="comment"># 将给定数据添加到已有数据中</span></span><br><span class="line">    existing_data[cookie_key] = data</span><br><span class="line">    <span class="comment"># 以写入模式打开文件，并将更新后的数据写回文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(existing_data, f, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;jee&quot;</span>: <span class="string">&quot;123456789&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    write_value(data, <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;写入完成&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 接口测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>白盒测试</title>
      <link href="/2024/01/22/10-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/01/22/10-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 白盒测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>黑盒测试</title>
      <link href="/2024/01/22/11-%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/01/22/11-%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 黑盒测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2024/01/22/1-Linux/"/>
      <url>/2024/01/22/1-Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-常用命令学习"><a href="#Linux-常用命令学习" class="headerlink" title="Linux 常用命令学习"></a><strong>Linux 常用命令学习</strong></h1><h3 id="1、ls命令"><a href="#1、ls命令" class="headerlink" title="1、ls命令"></a>1、ls命令</h3><p>就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</p><p><strong>常用参数搭配：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls -a 列出目录所有文件，包含以.开始的隐藏文件</span><br><span class="line">ls -A 列出除.及..的其它文件</span><br><span class="line">ls -r 反序排列</span><br><span class="line">ls -t 以文件修改时间排序</span><br><span class="line">ls -S 以文件大小排序</span><br><span class="line">ls -h 以易读大小显示</span><br><span class="line">ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">-a</th><th style="text-align:center">显示所有文件及目录</th><th style="text-align:center">-r</th><th style="text-align:center">依据首字母将文件以相反次序显示</th></tr></thead><tbody><tr><td style="text-align:center">-A</td><td style="text-align:center">不显示当前目录和父目录</td><td style="text-align:center">-R</td><td style="text-align:center">递归显示所有子文件</td></tr><tr><td style="text-align:center">-d</td><td style="text-align:center">显示目录自身的属性信息</td><td style="text-align:center">-S</td><td style="text-align:center">依据内容大小将文件排序显示</td></tr><tr><td style="text-align:center">-i</td><td style="text-align:center">显示文件的inode属性信息</td><td style="text-align:center">-t</td><td style="text-align:center">依据最后修改时间将文件排序显示</td></tr><tr><td style="text-align:center">-l</td><td style="text-align:center">显示文件的详细属性信息</td><td style="text-align:center">-X</td><td style="text-align:center">依据扩展名将文件排序显示</td></tr><tr><td style="text-align:center">-m</td><td style="text-align:center">以逗号为间隔符，水平显示文件信息</td><td style="text-align:center">-color</td><td style="text-align:center">以彩色显示信息</td></tr></tbody></table></div><p><strong>实例：</strong></p><p>(1) 按易读方式按时间反序排序，并显示文件详细信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lhrt</span><br></pre></td></tr></table></figure><p>(2) 按大小反序显示文件详细信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lrS</span><br></pre></td></tr></table></figure><p>(3)列出当前目录中所有以”t”开头的目录的详细内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l t*</span><br></pre></td></tr></table></figure><p>(4) 列出文件绝对路径（不包含隐藏文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls | sed &quot;s:^:`pwd`/:&quot;</span><br></pre></td></tr></table></figure><p>(5) 列出文件绝对路径（包含隐藏文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find $pwd -maxdepth 1 | xargs ls -ld</span><br></pre></td></tr></table></figure><h3 id="2、cd-命令"><a href="#2、cd-命令" class="headerlink" title="2、cd 命令"></a>2、cd 命令</h3><p>​     cd命令来自英文词组change directory的缩写，其功能是更改当前所处的工作目录，路径可以是绝对路径，也可以是相对路径，若省略不写则会跳转至当前使用者的家目‍录。</p><div class="table-container"><table><thead><tr><th style="text-align:center">-L</th><th style="text-align:center">切换至符号链接所在的目录</th><th style="text-align:center">~</th><th style="text-align:center">切换至用户家目录</th></tr></thead><tbody><tr><td style="text-align:center">-P</td><td style="text-align:center">切换至符号链接对应的实际目录</td><td style="text-align:center">..</td><td style="text-align:center">切换至当前位置的上一级目录</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">切换至上次所在目录</td><td style="text-align:center"></td></tr></tbody></table></div><p>cd(changeDirectory) 命令语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [目录名]</span><br></pre></td></tr></table></figure><p>说明：切换当前目录至 dirName。</p><p><strong>实例：</strong></p><p>（1）进入要目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><p>（2）进入 “home” 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>（3）进入上一次工作路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd -</span><br></pre></td></tr></table></figure><p>（4）把上个命令的参数作为cd参数使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd !$</span><br></pre></td></tr></table></figure><h3 id="3、pwd-命令"><a href="#3、pwd-命令" class="headerlink" title="3、pwd 命令"></a>3、pwd 命令</h3><p>​    pwd命令来自英文词组print working directory的缩写，其功能是显示当前工作目录的路径，即显示所在位置的绝对路‍径。</p><p><strong>实例：</strong></p><p>（1）查看当前路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><p>（2）查看软链接的实际路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd -P</span><br></pre></td></tr></table></figure><h3 id="4、mkdir-命令"><a href="#4、mkdir-命令" class="headerlink" title="4、mkdir 命令"></a>4、mkdir 命令</h3><p>mkdir 命令用于创建文件夹。</p><p>可用选项：</p><ul><li><strong>-m</strong>: 对新建目录设置存取权限，也可以用 chmod 命令设置;</li><li><strong>-p</strong>: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。</li></ul><p><strong>实例：</strong></p><p>（1）当前工作目录下创建名为 t的文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir t</span><br></pre></td></tr></table></figure><p>（2）在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /tmp/test/t1/t</span><br></pre></td></tr></table></figure><p>（3）创建一个目录文件并设置700权限，不让除所有主以外的任何人读、写、执行它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -m 700 Dir2</span><br></pre></td></tr></table></figure><h3 id="5、rm-命令"><a href="#5、rm-命令" class="headerlink" title="5、rm 命令"></a>5、rm 命令</h3><p>删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [选项] 文件…</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）删除文件时默认会进行二次确认，敲击y进行确认：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rm File.cfg</span><br></pre></td></tr></table></figure><p>（2）删除任何 .log 文件，删除前逐一询问确认：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -i *.log</span><br></pre></td></tr></table></figure><p>（3）删除 test 子目录及子目录中所有档案删除，并且不用一一确认：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf test</span><br></pre></td></tr></table></figure><p>（4）删除以 -f 开头的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -- -f*</span><br></pre></td></tr></table></figure><h3 id="6、rmdir-命令"><a href="#6、rmdir-命令" class="headerlink" title="6、rmdir 命令"></a>6、rmdir 命令</h3><p>从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。</p><p><strong>注意</strong>：不能删除非空目录</p><p><strong>实例：</strong></p><p>（1）当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir -p parent/child/child11</span><br></pre></td></tr></table></figure><h3 id="7、mv-命令"><a href="#7、mv-命令" class="headerlink" title="7、mv 命令"></a>7、mv 命令</h3><p>移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。</p><p>当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。</p><div class="table-container"><table><thead><tr><th style="text-align:center">-b</th><th style="text-align:center">覆盖前为目标文件创建备份</th><th style="text-align:center">-v</th><th style="text-align:center">显示执行过程详细信息</th></tr></thead><tbody><tr><td style="text-align:center">-f</td><td style="text-align:center">强制覆盖目标文件而不询问</td><td style="text-align:center">-Z</td><td style="text-align:center">设置文件安全上下文</td></tr><tr><td style="text-align:center">-i</td><td style="text-align:center">覆盖目标文件前询问用户是否确认</td><td style="text-align:center">-u</td><td style="text-align:center">当源文件比目标文件更新时，才执行覆盖操作</td></tr><tr><td style="text-align:center">-n</td><td style="text-align:center">不要覆盖已有文件</td><td style="text-align:center"></td></tr></tbody></table></div><p><strong>实例：</strong></p><p>（1）对指定文件进行剪切后粘贴（重命名）操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv File1.cfg File2.cfg</span><br></pre></td></tr></table></figure><p>（2）将指定文件移动到/etc目录中，保留文件原始名称： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv File2.cfg /etc</span><br></pre></td></tr></table></figure><p>（3）将指定目录移动到/etc目录中，并定义新的目录名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv Dir1 /etc/Dir2</span><br></pre></td></tr></table></figure><p>（4）将文件 test.log 重命名为 test1.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv test.log test1.txt</span><br></pre></td></tr></table></figure><p>（2）将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv llog1.txt log2.txt log3.txt /test3</span><br></pre></td></tr></table></figure><p>（3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv -i log1.txt log2.txt</span><br></pre></td></tr></table></figure><p>（4）移动当前文件夹下的所有文件到上一级目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv * ../</span><br></pre></td></tr></table></figure><h3 id="8、cp-命令"><a href="#8、cp-命令" class="headerlink" title="8、cp 命令"></a>8、cp 命令</h3><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p><p>注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！</p><div class="table-container"><table><thead><tr><th style="text-align:center">-i</th><th style="text-align:center">若目标文件已存在，则会询问是否覆盖</th><th style="text-align:center">-r</th><th style="text-align:center">复制目录及目录内所有项目</th></tr></thead><tbody><tr><td style="text-align:center">-a</td><td style="text-align:center">复制的文件与原文件时间一样</td><td style="text-align:center">-b</td><td style="text-align:center">覆盖目标文件前先进行备份</td></tr><tr><td style="text-align:center">-d</td><td style="text-align:center">复制链接文件时，将目标文件也建立为链接文件</td><td style="text-align:center">-f</td><td style="text-align:center">若目标文件已存在，则会直接覆盖</td></tr><tr><td style="text-align:center">-l</td><td style="text-align:center">对源文件建立硬链接，而非复制文件</td><td style="text-align:center">-p</td><td style="text-align:center">保留源文件或目录的所有属性信息</td></tr><tr><td style="text-align:center">-s</td><td style="text-align:center">对源文件建立软链接，而非复制文件</td><td style="text-align:center"></td></tr></tbody></table></div><p><strong>实例：</strong></p><p>（1）复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -ai a.txt test</span><br></pre></td></tr></table></figure><p>（2）为 a.txt 建立一个链接（快捷方式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -s a.txt link_a.txt</span><br></pre></td></tr></table></figure><h3 id="9、cat-命令"><a href="#9、cat-命令" class="headerlink" title="9、cat 命令"></a>9、cat 命令</h3><p>​    cat命令来自英文词组concatenate files and print的缩写，其功能是在终端设备上显示文件内容。在Linux系统中有很多用于查看文件内容的命令，例如more、tail、head等，每个命令都有各自的特点。cat命令适合查看内容较少的纯文本文件。 对于内容较多的文件，使用cat命令查看后会在屏幕上快速滚屏，用户往往看不清所显示的具体内容，只好按Ctrl+C组合键中断命令执行，所以对于大文件，干脆用more命令‍显示吧。</p><p>语法格式：cat 参数 文件名</p><div class="table-container"><table><thead><tr><th style="text-align:center">-i</th><th style="text-align:center">-A 等价于-vET参数组合</th><th style="text-align:center">-r</th><th style="text-align:center">-A 等价于-vET参数组合</th></tr></thead><tbody><tr><td style="text-align:center">-b</td><td style="text-align:center">显示行数（空行不编号）</td><td style="text-align:center">-T</td><td style="text-align:center">将TAB字符显示为^I符号</td></tr><tr><td style="text-align:center">-e</td><td style="text-align:center">等价于-vE参数组合</td><td style="text-align:center">-v</td><td style="text-align:center">使用^和M-引用，LFD和TAB除外</td></tr><tr><td style="text-align:center">-E</td><td style="text-align:center">每行结束处显示$符号</td><td style="text-align:center">-n</td><td style="text-align:center">显示行数（空行也编号）</td></tr><tr><td style="text-align:center">-s</td><td style="text-align:center">显示行数（多个空行算一个编号）</td><td style="text-align:center"></td></tr></tbody></table></div><p>cat 主要有三大功能：</p><p>1.一次显示整个文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat filename</span><br></pre></td></tr></table></figure><p>2.从键盘创建一个文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; filename</span><br></pre></td></tr></table></figure><p>只能创建新文件，不能编辑已有文件。</p><p>3.将几个文件合并为一个文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file1 file2 &gt; file</span><br></pre></td></tr></table></figure><ul><li>-b 对非空输出行号</li><li>-n 输出所有行号</li></ul><p><strong>实例：</strong></p><p>（1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n log2012.log log2013.log</span><br></pre></td></tr></table></figure><p>（2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -b log2012.log log2013.log log.log</span><br></pre></td></tr></table></figure><p>（3）使用 here doc 生成新文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;log.txt &lt;&lt;EOF</span><br><span class="line">&gt;Hello</span><br><span class="line">&gt;World</span><br><span class="line">&gt;PWD=$(pwd)</span><br><span class="line">&gt;EOF</span><br><span class="line">ls -l log.txt</span><br><span class="line">cat log.txt</span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">PWD=/opt/soft/test</span><br></pre></td></tr></table></figure><p>（4）反向列示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tac log.txt</span><br><span class="line">PWD=/opt/soft/test</span><br><span class="line">World</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><h3 id="10、more-命令"><a href="#10、more-命令" class="headerlink" title="10、more 命令"></a>10、more 命令</h3><p>功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。</p><p><strong>命令参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+n      从笫 n 行开始显示</span><br><span class="line">-n       定义屏幕大小为n行</span><br><span class="line">+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 </span><br><span class="line">-c       从顶部清屏，然后显示</span><br><span class="line">-d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能</span><br><span class="line">-l        忽略Ctrl+l（换页）字符</span><br><span class="line">-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似</span><br><span class="line">-s       把连续的多个空行显示为一行</span><br><span class="line">-u       把文件内容中的下画线去掉</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">-n</th><th style="text-align:center">不滚屏，先显示内容再清除旧内容</th><th style="text-align:center">-s</th><th style="text-align:center">将多个空行压缩成一行显示</th></tr></thead><tbody><tr><td style="text-align:center">-d</td><td style="text-align:center">显示提醒信息，关闭响铃功能</td><td style="text-align:center">-u</td><td style="text-align:center">禁止下划线</td></tr><tr><td style="text-align:center">-f</td><td style="text-align:center">统计实际的行数，而非自动换行的行数</td><td style="text-align:center">-数字</td><td style="text-align:center">设置每屏显示的最大行数</td></tr><tr><td style="text-align:center">-l</td><td style="text-align:center">将“^L”当作字符处理，而不暂停输出信息</td><td style="text-align:center">+数字</td><td style="text-align:center">设置从指定的行开始显示内容</td></tr><tr><td style="text-align:center">-p</td><td style="text-align:center">先清除屏幕再显示文本文件的剩余内容</td><td style="text-align:center">+/关键词</td><td style="text-align:center">从指定关键词开始显示文件内容</td></tr></tbody></table></div><p><strong>常用操作命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enter    向下 n 行，需要定义。默认为 1 行</span><br><span class="line">Ctrl+F   向下滚动一屏</span><br><span class="line">空格键  向下滚动一屏</span><br><span class="line">Ctrl+B  返回上一屏</span><br><span class="line">=       输出当前行的行号</span><br><span class="line">:f     输出文件名和当前行的行号</span><br><span class="line">V      调用vi编辑器</span><br><span class="line">!命令   调用Shell，并执行命令</span><br><span class="line">q       退出more</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示文件中从第3行起的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more +3 text.txt</span><br></pre></td></tr></table></figure><p>（2）在所列出文件目录详细信息，借助管道使每次显示 5 行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l | more -5</span><br></pre></td></tr></table></figure><p>按空格显示下 5 行。</p><h3 id="11、less-命令"><a href="#11、less-命令" class="headerlink" title="11、less 命令"></a>11、less 命令</h3><p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><p><strong>常用命令参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-i  忽略搜索时的大小写</span><br><span class="line">-N  显示每行的行号</span><br><span class="line">-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</span><br><span class="line">-s  显示连续空行为一行</span><br><span class="line">/字符串：向下搜索“字符串”的功能</span><br><span class="line">?字符串：向上搜索“字符串”的功能</span><br><span class="line">n：重复前一个搜索（与 / 或 ? 有关）</span><br><span class="line">N：反向重复前一个搜索（与 / 或 ? 有关）</span><br><span class="line">-x &lt;数字&gt; 将“tab”键显示为规定的数字空格</span><br><span class="line">b  向后翻一页</span><br><span class="line">d  向后翻半页</span><br><span class="line">h  显示帮助界面</span><br><span class="line">Q  退出less 命令</span><br><span class="line">u  向前滚动半页</span><br><span class="line">y  向前滚动一行</span><br><span class="line">空格键 滚动一行</span><br><span class="line">回车键 滚动一页</span><br><span class="line">[pagedown]： 向下翻动一页</span><br><span class="line">[pageup]：   向上翻动一页</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）ps 查看进程信息并通过 less 分页显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | less -N</span><br></pre></td></tr></table></figure><p>（2）查看多个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less 1.log 2.log</span><br></pre></td></tr></table></figure><p>可以使用 n 查看下一个，使用 p 查看前一个。</p><h3 id="12、head-命令"><a href="#12、head-命令" class="headerlink" title="12、head 命令"></a>12、head 命令</h3><p>head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。</p><p><strong>常用参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n&lt;行数&gt; 显示的行数（行数为复数表示从最后向前数）</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示 1.log 文件中前 20 行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head 1.log -n 20</span><br></pre></td></tr></table></figure><p>（2）显示 1.log 文件前 20 字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -c 20 log2014.log</span><br></pre></td></tr></table></figure><p>（3）显示 t.log最后 10 行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n -10 t.log</span><br></pre></td></tr></table></figure><h3 id="13、tail-命令"><a href="#13、tail-命令" class="headerlink" title="13、tail 命令"></a>13、tail 命令</h3><p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p><p><strong>常用参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-f 循环读取（常用于查看递增的日志文件）</span><br><span class="line">-n&lt;行数&gt; 显示行数（从后向前）</span><br></pre></td></tr></table></figure><p>（1）循环读取逐渐增加的文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 127.0.0.1 &gt; ping.log &amp;</span><br></pre></td></tr></table></figure><p>后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f ping.log</span><br></pre></td></tr></table></figure><p>（查看日志）</p><h3 id="14、which-命令"><a href="#14、which-命令" class="headerlink" title="14、which 命令"></a>14、which 命令</h3><p>在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">which     查看可执行文件的位置。</span><br><span class="line">whereis 查看文件的位置。</span><br><span class="line">locate  配合数据库查看文件位置。</span><br><span class="line">find        实际搜寻硬盘查询文件名称。</span><br></pre></td></tr></table></figure><p>which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p><p><strong>常用参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查看 ls 命令是否存在，执行哪个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which ls</span><br></pre></td></tr></table></figure><p>（2）查看 which</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which which</span><br></pre></td></tr></table></figure><p>（3）查看 cd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令）</span><br></pre></td></tr></table></figure><p>查看当前 PATH 配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>或使用 env 查看所有环境变量及对应值</p><h3 id="15、whereis-命令"><a href="#15、whereis-命令" class="headerlink" title="15、whereis 命令"></a>15、whereis 命令</h3><p>whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。</p><p><strong>常用参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-b   定位可执行文件。</span><br><span class="line">-m   定位帮助文件。</span><br><span class="line">-s   定位源代码文件。</span><br><span class="line">-u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找 locate 程序相关文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis locate</span><br></pre></td></tr></table></figure><p>（2）查找 locate 的源码文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis -s locate</span><br></pre></td></tr></table></figure><p>（3）查找 lcoate 的帮助文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis -m locate</span><br></pre></td></tr></table></figure><h3 id="16、locate-命令"><a href="#16、locate-命令" class="headerlink" title="16、locate 命令"></a>16、locate 命令</h3><p>locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。</p><p>locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找</p><p><strong>常用参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-l num（要显示的行数）</span><br><span class="line">-f   将特定的档案系统排除在外，如将proc排除在外</span><br><span class="line">-r   使用正则运算式做为寻找条件</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找和 pwd 相关的所有文件(文件名中包含 pwd）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate pwd</span><br></pre></td></tr></table></figure><p>（2）搜索 etc 目录下所有以 sh 开头的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate /etc/sh</span><br></pre></td></tr></table></figure><p>（3）查找 /var 目录下，以 reason 结尾的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate -r &#x27;^/var.*reason$&#x27;（其中.表示一个字符，*表示任务多个；.*表示任意多个字符）</span><br></pre></td></tr></table></figure><h3 id="17、find-命令"><a href="#17、find-命令" class="headerlink" title="17、find 命令"></a>17、find 命令</h3><p>用于在文件树中查找文件，并作出相应的处理。</p><p>命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find pathname -options [-print -exec -ok ...]</span><br></pre></td></tr></table></figure><p>命令参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。</span><br><span class="line">-print： find命令将匹配的文件输出到标准输出。</span><br><span class="line">-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&#x27;command&#x27; &#123;  &#125; \;，注意&#123;   &#125;和\；之间的空格。</span><br><span class="line">-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。</span><br></pre></td></tr></table></figure><p><strong>命令选项：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-name 按照文件名查找文件</span><br><span class="line">-perm 按文件权限查找文件</span><br><span class="line">-user 按文件属主查找文件</span><br><span class="line">-group  按照文件所属的组来查找文件。</span><br><span class="line">-type  查找某一类型的文件，诸如：</span><br><span class="line">   b - 块设备文件</span><br><span class="line">   d - 目录</span><br><span class="line">   c - 字符设备文件</span><br><span class="line">   l - 符号链接文件</span><br><span class="line">   p - 管道文件</span><br><span class="line">   f - 普通文件</span><br><span class="line"></span><br><span class="line">-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小</span><br><span class="line">-amin n   查找系统中最后N分钟访问的文件</span><br><span class="line">-atime n  查找系统中最后n*24小时访问的文件</span><br><span class="line">-cmin n   查找系统中最后N分钟被改变文件状态的文件</span><br><span class="line">-ctime n  查找系统中最后n*24小时被改变文件状态的文件</span><br><span class="line">-mmin n   查找系统中最后N分钟被改变文件数据的文件</span><br><span class="line">-mtime n  查找系统中最后n*24小时被改变文件数据的文件</span><br><span class="line">(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )</span><br><span class="line">-maxdepth n 最大查找目录深度</span><br><span class="line">-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略</span><br><span class="line">-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找 48 小时内修改过的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -atime -2</span><br></pre></td></tr></table></figure><p>（2）在当前目录查找 以 .log 结尾的文件。 <strong>.</strong> 代表当前目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name &#x27;*.log&#x27;</span><br></pre></td></tr></table></figure><p>（3）查找 /opt 目录下 权限为 777 的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /opt -perm 777</span><br></pre></td></tr></table></figure><p>（4）查找大于 1K 的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -size +1000c</span><br></pre></td></tr></table></figure><p>查找等于 1000 字符的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -size 1000c </span><br></pre></td></tr></table></figure><p>-exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。</p><p><strong>实例：</strong></p><p>（5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -mtime +10 -exec rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>（6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &#x27;*.log&#x27; mtime +5 -ok -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>（7）当前目录下查找文件名以 passwd 开头，内容包含 “pkg” 字符的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -f -name &#x27;passwd*&#x27; -exec grep &quot;pkg&quot; &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>（8）用 exec 选项执行 cp 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &#x27;*.log&#x27; -exec cp &#123;&#125; test3 \;</span><br></pre></td></tr></table></figure><p>-xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。</p><p>实例：</p><p>（9）查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -print | xargs file</span><br></pre></td></tr></table></figure><p>（10）查找当前目录下所有以 js 结尾的并且其中包含 ‘editor’ 字符的普通文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &quot;*.js&quot; -exec grep -lF &#x27;ueditor&#x27; &#123;&#125; \;</span><br><span class="line">find -type f -name &#x27;*.js&#x27; | xargs grep -lF &#x27;editor&#x27;</span><br></pre></td></tr></table></figure><p>（11）利用 xargs 执行 mv 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*.log&quot; | xargs -i mv &#123;&#125; test4</span><br></pre></td></tr></table></figure><p>（12）用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name \*(转义） -type f -print | xargs grep -n &#x27;hostnames&#x27;</span><br></pre></td></tr></table></figure><p>（13）查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &#x27;[a-z]*[4-9].log&#x27; -print</span><br></pre></td></tr></table></figure><p>（14）在 test 目录查找不在 test4 子目录查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find test -path &#x27;test/test4&#x27; -prune -o -print</span><br></pre></td></tr></table></figure><p>（15）实例1：查找更改时间比文件 log2012.log新但比文件 log2017.log 旧的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -newer log2012.log ! -newer log2017.log</span><br></pre></td></tr></table></figure><p><strong>使用 depth 选项：</strong></p><p>depth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。</p><p>实例：find 命令从文件系统的根目录开始，查找一个名为 CON.FILE 的文件。 它将首先匹配所有的文件然后再进入子目录中查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name &quot;CON.FILE&quot; -depth -print</span><br></pre></td></tr></table></figure><h3 id="18、chmod-命令"><a href="#18、chmod-命令" class="headerlink" title="18、chmod 命令"></a>18、chmod 命令</h3><p>用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p><p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。</p><p>以文件 log2012.log 为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log</span><br></pre></td></tr></table></figure><p>第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。</p><p>常用参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-c 当发生改变时，报告处理信息</span><br><span class="line">-R 处理指定目录以及其子目录下所有文件</span><br></pre></td></tr></table></figure><p>权限范围：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u ：目录或者文件的当前的用户</span><br><span class="line">g ：目录或者文件的当前的群组</span><br><span class="line">o ：除了目录或者文件的当前用户或群组之外的用户或者群组</span><br><span class="line">a ：所有的用户及群组</span><br></pre></td></tr></table></figure><p>权限代号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r ：读权限，用数字4表示</span><br><span class="line">w ：写权限，用数字2表示</span><br><span class="line">x ：执行权限，用数字1表示</span><br><span class="line">- ：删除权限，用数字0表示</span><br><span class="line">s ：特殊权限</span><br></pre></td></tr></table></figure><p>实例：</p><p>（1）增加文件 t.log 所有用户可执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x t.log</span><br></pre></td></tr></table></figure><p>（2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u=r t.log -c</span><br></pre></td></tr></table></figure><p>（3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c)</span><br></pre></td></tr></table></figure><p>（4）将 test 目录及其子目录所有文件添加可读权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+r,g+r,o+r -R text/ -c</span><br></pre></td></tr></table></figure><h3 id="19、tar-命令"><a href="#19、tar-命令" class="headerlink" title="19、tar 命令"></a>19、tar 命令</h3><p>用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。</p><p>弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件</p><p><strong>常用参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-c 建立新的压缩文件</span><br><span class="line">-f 指定压缩文件</span><br><span class="line">-r 添加文件到已经压缩文件包中</span><br><span class="line">-u 添加改了和现有的文件到压缩包中</span><br><span class="line">-x 从压缩包中抽取文件</span><br><span class="line">-t 显示压缩文件中的内容</span><br><span class="line">-z 支持gzip压缩</span><br><span class="line">-j 支持bzip2压缩</span><br><span class="line">-Z 支持compress解压文件</span><br><span class="line">-v 显示操作过程</span><br></pre></td></tr></table></figure><p>有关 gzip 及 bzip2 压缩:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gzip 实例：压缩 gzip fileName .tar.gz 和.tgz  解压：gunzip filename.gz 或 gzip -d filename.gz</span><br><span class="line">          对应：tar zcvf filename.tar.gz     tar zxvf filename.tar.gz</span><br><span class="line"></span><br><span class="line">bz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2</span><br><span class="line">       对应：tar jcvf filename.tar.gz         解压：tar jxvf filename.tar.bz2</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）将文件全部打包成 tar 包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf log.tar 1.log,2.log 或tar -cvf log.*</span><br></pre></td></tr></table></figure><p>（2）将 /etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf /tmp/etc.tar.gz /etc</span><br></pre></td></tr></table></figure><p>（3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -ztvf /tmp/etc.tar.gz</span><br></pre></td></tr></table></figure><p>（4）要压缩打包 /home, /etc ，但不要 /home/dmtsai</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc</span><br></pre></td></tr></table></figure><h3 id="20、chown-命令"><a href="#20、chown-命令" class="headerlink" title="20、chown 命令"></a>20、chown 命令</h3><p>chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-c 显示更改的部分的信息</span><br><span class="line">-R 处理指定目录及子目录</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）改变拥有者和群组 并显示改变信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -c mail:mail log2012.log</span><br></pre></td></tr></table></figure><p>（2）改变文件群组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -c :mail t.log</span><br></pre></td></tr></table></figure><p>（3）改变文件夹及子文件目录属主及属组为 mail</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -cR mail: test/</span><br></pre></td></tr></table></figure><h3 id="21、df-命令"><a href="#21、df-命令" class="headerlink" title="21、df 命令"></a>21、df 命令</h3><p>显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a 全部文件系统列表</span><br><span class="line">-h 以方便阅读的方式显示信息</span><br><span class="line">-i 显示inode信息</span><br><span class="line">-k 区块为1024字节</span><br><span class="line">-l 只显示本地磁盘</span><br><span class="line">-T 列出文件系统类型</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示磁盘使用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -l</span><br></pre></td></tr></table></figure><p>（2）以易读方式列出所有文件系统及其类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -haT</span><br></pre></td></tr></table></figure><h3 id="22、du-命令"><a href="#22、du-命令" class="headerlink" title="22、du 命令"></a>22、du 命令</h3><p>du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：</p><p>命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du [选项] [文件]</span><br></pre></td></tr></table></figure><p><strong>常用参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-a 显示目录中所有文件大小</span><br><span class="line">-k 以KB为单位显示文件大小</span><br><span class="line">-m 以MB为单位显示文件大小</span><br><span class="line">-g 以GB为单位显示文件大小</span><br><span class="line">-h 以易读方式显示文件大小</span><br><span class="line">-s 仅显示总计</span><br><span class="line">-c或--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）以易读方式显示文件夹内及子文件夹大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h scf/</span><br></pre></td></tr></table></figure><p>（2）以易读方式显示文件夹内所有文件大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -ah scf/</span><br></pre></td></tr></table></figure><p>（3）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -hc test/ scf/</span><br></pre></td></tr></table></figure><p>（4）输出当前目录下各个子目录所使用的空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -hc --max-depth=1 scf/</span><br></pre></td></tr></table></figure><h3 id="23、ln-命令"><a href="#23、ln-命令" class="headerlink" title="23、ln 命令"></a>23、ln 命令</h3><p>功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。</p><p>链接分类：软件链接及硬链接</p><p>软链接：</p><ul><li>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li><li>2.软链接可以 跨文件系统 ，硬链接不可以</li><li>3.软链接可以对一个不存在的文件名进行链接</li><li>4.软链接可以对目录进行链接</li></ul><p>硬链接:</p><ul><li>1.硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>2.不允许给目录创建硬链接</li><li>3.硬链接只有在同一个文件系统中才能创建</li></ul><p><strong>需要注意：</strong></p><ul><li>第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；</li><li>第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。</li><li>第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</li></ul><p><strong>常用参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-b 删除，覆盖以前建立的链接</span><br><span class="line">-s 软链接（符号链接）</span><br><span class="line">-v 显示详细处理过程</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）给文件创建软链接，并显示操作信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sv source.log link.log</span><br></pre></td></tr></table></figure><p>（2）给文件创建硬链接，并显示操作信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -v source.log link1.log</span><br></pre></td></tr></table></figure><p>（3）给目录创建软链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sv /opt/soft/test/test3 /opt/soft/test/test5</span><br></pre></td></tr></table></figure><h3 id="24、date-命令"><a href="#24、date-命令" class="headerlink" title="24、date 命令"></a>24、date 命令</h3><p>显示或设定系统的日期与时间。</p><p>命令参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-d&lt;字符串&gt; 　显示字符串所指的日期与时间。字符串前后必须加上双引号。</span><br><span class="line">-s&lt;字符串&gt; 　根据字符串来设置日期与时间。字符串前后必须加上双引号。</span><br><span class="line">-u 　显示GMT。</span><br><span class="line">%H 小时(00-23)</span><br><span class="line">%I 小时(00-12)</span><br><span class="line">%M 分钟(以00-59来表示)</span><br><span class="line">%s 总秒数。起算时间为1970-01-01 00:00:00 UTC。</span><br><span class="line">%S 秒(以本地的惯用法来表示)</span><br><span class="line">%a 星期的缩写。</span><br><span class="line">%A 星期的完整名称。</span><br><span class="line">%d 日期(以01-31来表示)。</span><br><span class="line">%D 日期(含年月日)。</span><br><span class="line">%m 月份(以01-12来表示)。</span><br><span class="line">%y 年份(以00-99来表示)。</span><br><span class="line">%Y 年份(以四位数来表示)。</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示下一天</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date +%Y%m%d --date=&quot;+1 day&quot;  //显示下一天的日期</span><br></pre></td></tr></table></figure><p>（2）-d参数使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">date -d &quot;nov 22&quot;  今年的 11 月 22 日是星期三</span><br><span class="line">date -d &#x27;2 weeks&#x27; 2周后的日期</span><br><span class="line">date -d &#x27;next monday&#x27; (下周一的日期)</span><br><span class="line">date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d</span><br><span class="line">date -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d</span><br><span class="line">date -d last-month +%Y%m(上个月是几月)</span><br><span class="line">date -d next-month +%Y%m(下个月是几月)</span><br></pre></td></tr></table></figure><h3 id="25、cal-命令"><a href="#25、cal-命令" class="headerlink" title="25、cal 命令"></a>25、cal 命令</h3><p>可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份：</p><p>常用参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-3 显示前一月，当前月，后一月三个月的日历</span><br><span class="line">-m 显示星期一为第一列</span><br><span class="line">-j 显示在当前年第几天</span><br><span class="line">-y [year]显示当前年[year]份的日历</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示指定年月日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal 9 2012</span><br></pre></td></tr></table></figure><p>（2）显示2013年每个月日历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal -y 2013</span><br></pre></td></tr></table></figure><p>（3）将星期一做为第一列,显示前中后三月</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal -3m</span><br></pre></td></tr></table></figure><h3 id="26、grep-命令"><a href="#26、grep-命令" class="headerlink" title="26、grep 命令"></a>26、grep 命令</h3><p>强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。</p><p>grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p>命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [option] pattern file|dir</span><br></pre></td></tr></table></figure><p>常用参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-A n --after-context显示匹配字符后n行</span><br><span class="line">-B n --before-context显示匹配字符前n行</span><br><span class="line">-C n --context 显示匹配字符前后n行</span><br><span class="line">-c --count 计算符合样式的列数</span><br><span class="line">-i 忽略大小写</span><br><span class="line">-l 只列出文件内容符合指定的样式的文件名称</span><br><span class="line">-f 从文件中读取关键词</span><br><span class="line">-n 显示匹配内容的所在文件中行数</span><br><span class="line">-R 递归查找文件夹</span><br></pre></td></tr></table></figure><p>grep 的规则表达式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">^  #锚定行的开始 如：&#x27;^grep&#x27;匹配所有以grep开头的行。 </span><br><span class="line">$  #锚定行的结束 如：&#x27;grep$&#x27;匹配所有以grep结尾的行。 </span><br><span class="line">.  #匹配一个非换行符的字符 如：&#x27;gr.p&#x27;匹配gr后接一个任意字符，然后是p。  </span><br><span class="line">*  #匹配零个或多个先前字符 如：&#x27;*grep&#x27;匹配所有一个或多个空格后紧跟grep的行。</span><br><span class="line">.*   #一起用代表任意字符。  </span><br><span class="line">[]   #匹配一个指定范围内的字符，如&#x27;[Gg]rep&#x27;匹配Grep和grep。 </span><br><span class="line">[^]  #匹配一个不在指定范围内的字符，如：&#x27;[^A-FH-Z]rep&#x27;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。  </span><br><span class="line">\(..\)  #标记匹配字符，如&#x27;\(love\)&#x27;，love被标记为1。   </span><br><span class="line">\&lt;      #锚定单词的开始，如:&#x27;\&lt;grep&#x27;匹配包含以grep开头的单词的行。</span><br><span class="line">\&gt;      #锚定单词的结束，如&#x27;grep\&gt;&#x27;匹配包含以grep结尾的单词的行。</span><br><span class="line">x\&#123;m\&#125;  #重复字符x，m次，如：&#x27;0\&#123;5\&#125;&#x27;匹配包含5个o的行。 </span><br><span class="line">x\&#123;m,\&#125;  #重复字符x,至少m次，如：&#x27;o\&#123;5,\&#125;&#x27;匹配至少有5个o的行。  </span><br><span class="line">x\&#123;m,n\&#125;  #重复字符x，至少m次，不多于n次，如：&#x27;o\&#123;5,10\&#125;&#x27;匹配5--10个o的行。  </span><br><span class="line">\w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#x27;G\w*p&#x27;匹配以G后跟零个或多个文字或数字字符，然后是p。  </span><br><span class="line">\W    #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。  </span><br><span class="line">\b    #单词锁定符，如: &#x27;\bgrep\b&#x27;只匹配grep。</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找指定进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep svn</span><br></pre></td></tr></table></figure><p>（2）查找指定进程个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep svn -c</span><br></pre></td></tr></table></figure><p>（3）从文件中读取关键词</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test1.txt | grep -f key.log</span><br></pre></td></tr></table></figure><p>（4）从文件夹中递归查找以grep开头的行，并只列出文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -lR &#x27;^grep&#x27; /tmp</span><br></pre></td></tr></table></figure><p>（5）查找非x开关的行内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;^[^x]&#x27; test.txt</span><br></pre></td></tr></table></figure><p>（6）显示包含 ed 或者 at 字符的内容行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E &#x27;ed|at&#x27; test.txt</span><br></pre></td></tr></table></figure><h3 id="27、wc-命令"><a href="#27、wc-命令" class="headerlink" title="27、wc 命令"></a>27、wc 命令</h3><p>wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出</p><p>命令格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc [option] file..</span><br></pre></td></tr></table></figure><p><strong>命令参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-c 统计字节数</span><br><span class="line">-l 统计行数</span><br><span class="line">-m 统计字符数</span><br><span class="line">-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找文件的 行数 单词数 字节数 文件名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc text.txt</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7     8     70     test.txt</span><br></pre></td></tr></table></figure><p>（2）统计输出结果的行数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt | wc -l</span><br></pre></td></tr></table></figure><h3 id="28、ps-命令"><a href="#28、ps-命令" class="headerlink" title="28、ps 命令"></a>28、ps 命令</h3><p>ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top</p><p>linux上进程有5种状态:</p><ul><li>\1. 运行(正在运行或在运行队列中等待)</li><li>\2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li><li>\3. 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li><li>\4. 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li><li>\5. 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</li></ul><p>ps 工具标识进程的5种状态码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D 不可中断 uninterruptible sleep (usually IO)</span><br><span class="line">R 运行 runnable (on run queue)</span><br><span class="line">S 中断 sleeping</span><br><span class="line">T 停止 traced or stopped</span><br><span class="line">Z 僵死 a defunct (”zombie”) process</span><br></pre></td></tr></table></figure><p><strong>命令参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-A 显示所有进程</span><br><span class="line">a 显示所有进程</span><br><span class="line">-a 显示同一终端下所有进程</span><br><span class="line">c 显示进程真实名称</span><br><span class="line">e 显示环境变量</span><br><span class="line">f 显示进程间的关系</span><br><span class="line">r 显示当前终端运行的进程</span><br><span class="line">-aux 显示所有包含其它使用的进程</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示当前所有进程环境变量及进程间关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><p>（2）显示当前所有进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -A</span><br></pre></td></tr></table></figure><p>（3）与grep联用查找某进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep apache</span><br></pre></td></tr></table></figure><p>（4）找出与 cron 与 syslog 这两个服务有关的 PID 号码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep &#x27;(cron|syslog)&#x27;</span><br></pre></td></tr></table></figure><h3 id="29、top-命令"><a href="#29、top-命令" class="headerlink" title="29、top 命令"></a>29、top 命令</h3><p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等</p><p><strong>常用参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-c 显示完整的进程命令</span><br><span class="line">-s 保密模式</span><br><span class="line">-p &lt;进程号&gt; 指定进程显示</span><br><span class="line">-n &lt;次数&gt;循环显示次数</span><br></pre></td></tr></table></figure><p>实例：</p><p><strong>（1）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">top - 14:06:23 up 70 days, 16:44,  2 users,  load average: 1.25, 1.32, 1.35</span><br><span class="line">Tasks: 206 total,   1 running, 205 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s):  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%st</span><br><span class="line">Mem:  32949016k total, 14411180k used, 18537836k free,   169884k buffers</span><br><span class="line">Swap: 32764556k total,        0k used, 32764556k free,  3612636k cached</span><br><span class="line">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND  </span><br><span class="line">28894 root      22   0 1501m 405m  10m S 52.2  1.3   2534:16 java  </span><br></pre></td></tr></table></figure><p>前五行是当前系统情况整体的统计信息区。</p><p><strong>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：</strong></p><p>14:06:23 — 当前系统时间</p><p>up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）</p><p>2 users — 当前有2个用户登录系统</p><p>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。</p><p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p><p><strong>第二行，Tasks — 任务（进程），具体信息说明如下：</strong></p><p>系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</p><p><strong>第三行，cpu状态信息，具体属性说明如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5.9%us — 用户空间占用CPU的百分比。</span><br><span class="line">3.4% sy — 内核空间占用CPU的百分比。</span><br><span class="line">0.0% ni — 改变过优先级的进程占用CPU的百分比</span><br><span class="line">90.4% id — 空闲CPU百分比</span><br><span class="line">0.0% wa — IO等待占用CPU的百分比</span><br><span class="line">0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比</span><br><span class="line">0.2% si — 软中断（Software Interrupts）占用CPU的百分比</span><br></pre></td></tr></table></figure><p><strong>备注：</strong>在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！</p><p>第四行，内存状态，具体信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">32949016k total — 物理内存总量（32GB）</span><br><span class="line">14411180k used — 使用中的内存总量（14GB）</span><br><span class="line">18537836k free — 空闲内存总量（18GB）</span><br><span class="line">169884k buffers — 缓存的内存量 （169M）</span><br></pre></td></tr></table></figure><p><strong>第五行，swap交换分区信息，具体信息说明如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">32764556k total — 交换区总量（32GB）</span><br><span class="line">0k used — 使用的交换区总量（0K）</span><br><span class="line">32764556k free — 空闲交换区总量（32GB）</span><br><span class="line">3612636k cached — 缓冲的交换区总量（3.6GB）</span><br></pre></td></tr></table></figure><p><strong>第六行，空行。</strong></p><p><strong>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PID — 进程id</span><br><span class="line">USER — 进程所有者</span><br><span class="line">PR — 进程优先级</span><br><span class="line">NI — nice值。负值表示高优先级，正值表示低优先级</span><br><span class="line">VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</span><br><span class="line">RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</span><br><span class="line">SHR — 共享内存大小，单位kb</span><br><span class="line">S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</span><br><span class="line">%CPU — 上次更新到现在的CPU时间占用百分比</span><br><span class="line">%MEM — 进程使用的物理内存百分比</span><br><span class="line">TIME+ — 进程使用的CPU时间总计，单位1/100秒</span><br><span class="line">COMMAND — 进程名称（命令名/命令行）</span><br></pre></td></tr></table></figure><p><strong>top 交互命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h 显示top交互命令帮助信息</span><br><span class="line">c 切换显示命令名称和完整命令行</span><br><span class="line">m 以内存使用率排序</span><br><span class="line">P 根据CPU使用百分比大小进行排序</span><br><span class="line">T 根据时间/累计时间进行排序</span><br><span class="line">W 将当前设置写入~/.toprc文件中</span><br><span class="line">o或者O 改变显示项目的顺序</span><br></pre></td></tr></table></figure><h3 id="30、kill-命令"><a href="#30、kill-命令" class="headerlink" title="30、kill 命令"></a>30、kill 命令</h3><p>发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用”-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。</p><p><strong>常用参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称</span><br><span class="line">-a  当处理当前进程时，不限制命令名和进程号的对应关系</span><br><span class="line">-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号</span><br><span class="line">-s  指定发送信号</span><br><span class="line">-u  指定用户</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）先使用ps查找进程pro1，然后用kill杀掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 $(ps -ef | grep pro1)</span><br></pre></td></tr></table></figure><h3 id="31、free-命令"><a href="#31、free-命令" class="headerlink" title="31、free 命令"></a>31、free 命令</h3><p>显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。</p><p><strong>命令参数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-b 以Byte显示内存使用情况</span><br><span class="line">-k 以kb为单位显示内存使用情况</span><br><span class="line">-m 以mb为单位显示内存使用情况</span><br><span class="line">-g 以gb为单位显示内存使用情况</span><br><span class="line">-s&lt;间隔秒数&gt; 持续显示内存</span><br><span class="line">-t 显示内存使用总合</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示内存使用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free</span><br><span class="line">free -k</span><br><span class="line">free -m</span><br></pre></td></tr></table></figure><p>（2）以总和的形式显示内存的使用信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -t</span><br></pre></td></tr></table></figure><p>（3）周期性查询内存使用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -s 10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2024/01/22/3-Python/"/>
      <url>/2024/01/22/3-Python/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL数据库</title>
      <link href="/2024/01/22/2-SQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/01/22/2-SQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库:<br><code>SHOW DATABASES;</code>  show databases;<br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库:<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code>  </p><p>创建表：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><br>所有的要用英文的格式<br><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code>  </p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code> </p><p>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code> </p><p>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code>  </p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code></p><p>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code>  </p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code>  </p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code>  </p><h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名字段</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure></p><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code>  </p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code>  </p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code>  </p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>/ 之后的_不作为通配符  </p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code>  </p><p>条件：  </p><div class="table-container"><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 &#124;&#124;</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table></div><p>例子：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 年龄等于30</span><br><span class="line">select * from employee where age = 30;</span><br><span class="line">-- 年龄小于30</span><br><span class="line">select * from employee where age &lt; 30;</span><br><span class="line">-- 小于等于</span><br><span class="line">select * from employee where age &lt;= 30;</span><br><span class="line">-- 没有身份证</span><br><span class="line">select * from employee where idcard is null or idcard = &#x27;&#x27;;</span><br><span class="line">-- 有身份证</span><br><span class="line">select * from employee where idcard;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">-- 不等于</span><br><span class="line">select * from employee where age != 30;</span><br><span class="line">-- 年龄在20到30之间</span><br><span class="line">select * from employee where age between 20 and 30;</span><br><span class="line">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class="line">-- 下面语句不报错，但查不到任何信息</span><br><span class="line">select * from employee where age between 30 and 20;</span><br><span class="line">-- 性别为女且年龄小于30</span><br><span class="line">select * from employee where age &lt; 30 and gender = &#x27;女&#x27;;</span><br><span class="line">-- 年龄等于25或30或35</span><br><span class="line">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class="line">select * from employee where age in (25, 30, 35);</span><br><span class="line">-- 姓名为两个字</span><br><span class="line">select * from employee where name like &#x27;__&#x27;;</span><br><span class="line">-- 身份证最后为X</span><br><span class="line">select * from employee where idcard like &#x27;%X&#x27;;</span><br></pre></td></tr></table></figure></p><h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table></div><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee whe                                    re workaddress = &quot;广东省&quot;;</code></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code>  </p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class="line">select count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性数量</span><br><span class="line">select gender, count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class="line">select gender, avg(age) from employee group by gender;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组</span><br><span class="line">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 根据年龄升序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC;</span><br><span class="line">SELECT * FROM employee ORDER BY age;</span><br><span class="line">-- 两字段排序，根据年龄升序排序，入职时间降序排序(如果年龄相同那么就按这个)</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code>  </p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询第一页数据，展示10条</span><br><span class="line">SELECT * FROM employee LIMIT 0, 10;</span><br><span class="line">-- 查询第二页</span><br><span class="line">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER mysql;</span><br><span class="line">SELECT * FROM user;</span><br></pre></td></tr></table></figure><p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p><p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">create user &#x27;test&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user &#x27;test&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p><div class="table-container"><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table></div><p>更多权限请看<a href="#权限一览表" title="权限一览表">权限一览表</a>  </p><p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数  是指一段可以直接被另外一段程序调用的程序或代码。</p><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table></div><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 拼接</span><br><span class="line">SELECT CONCAT(&#x27;Hello&#x27;, &#x27;World&#x27;);</span><br><span class="line">-- 小写</span><br><span class="line">SELECT LOWER(&#x27;Hello&#x27;);</span><br><span class="line">-- 大写</span><br><span class="line">SELECT UPPER(&#x27;Hello&#x27;);</span><br><span class="line">-- 左填充</span><br><span class="line">SELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 右填充</span><br><span class="line">SELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 去除空格</span><br><span class="line">SELECT TRIM(&#x27; Hello World &#x27;);</span><br><span class="line">-- 切片（起始索引为1）</span><br><span class="line">SELECT SUBSTRING(&#x27;Hello World&#x27;, 1, 5);</span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table></div><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table></div><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- DATE_ADD</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table></div><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)</span><br><span class="line">from employee;</span><br><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case workaddress when &#x27;北京市&#x27; then &#x27;一线城市&#x27; when &#x27;上海市&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ol><li>概念：约束是用来作用于表中字段上的规则，用于限制存储在表中的数据。</li><li>目的：保证数据库中的数据的正确、有效性和完整性</li></ol><p>分类：</p><div class="table-container"><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table></div><p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</p><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><div class="table-container"><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table></div><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(10) not null unique,</span><br><span class="line">age int check(age &gt; 0 and age &lt; 120),</span><br><span class="line">status char(1) default &#x27;1&#x27;,</span><br><span class="line">gender char(1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p><p>添加外键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">...</span><br><span class="line">[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);  </span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line"></span><br><span class="line">-- 例子  </span><br><span class="line">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);  </span><br></pre></td></tr></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code>  </p><h4 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除/更新行为"></a>删除/更新行为</h4><div class="table-container"><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table></div><p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code>  </p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键  </p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键  </p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）  </p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code>  </p><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）  </p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code>  </p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code>   </p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code>  </p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工姓名，及关联的部门的名称</span><br><span class="line">-- 隐式</span><br><span class="line">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class="line">-- 显式</span><br><span class="line">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据  </p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code>  </p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 左</span><br><span class="line">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;  </span><br><span class="line">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样  </span><br><span class="line">-- 右</span><br><span class="line">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;  </span><br></pre></td></tr></table></figure><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept  </p><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名  </p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code>  </p><p>自连接查询，可以是内连接查询，也可以是外连接查询  </p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工及其所属领导的名字  </span><br><span class="line">select a.name, b.name from employee a, employee b where a.manager = b.id;  </span><br><span class="line">-- 没有领导的也查询出来  </span><br><span class="line">select a.name, b.name from employee a left join employee b on a.manager = b.id;  </span><br></pre></td></tr></table></figure><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure><h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong>  </p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=  </p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 查询销售部所有员工</span><br><span class="line">select id from dept where name = &#x27;销售部&#x27;;</span><br><span class="line">-- 根据销售部部门ID，查询员工信息</span><br><span class="line">select * from employee where dept = 4;</span><br><span class="line">-- 合并（子查询）  </span><br><span class="line">select * from employee where dept = (select id from dept where name = &#x27;销售部&#x27;);  </span><br><span class="line"></span><br><span class="line">-- 查询xxx入职之后的员工信息  </span><br><span class="line">select * from employee where entrydate &gt; (select entrydate from employee where name = &#x27;xxx&#x27;);  </span><br></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。  </p><p>常用操作符：  </p><div class="table-container"><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table></div><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查询销售部和市场部的所有员工信息  </span><br><span class="line">select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;);</span><br><span class="line">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="line">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));</span><br><span class="line">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="line">select * from employee where salary &gt; any(select salary from employee where dept = (select id from dept where name = &#x27;研发部&#x27;));</span><br></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查询与xxx的薪资及直属领导相同的员工信息  </span><br><span class="line">select * from employee where (salary, manager) = (12500, 1);  </span><br><span class="line">select * from employee where (salary, manager) = (select salary, manager from employee where name = &#x27;xxx&#x27;);  </span><br></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN  </p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class="line">select * from employee where (job, salary) in (select job, salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);</span><br><span class="line">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class="line">select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- 1. 查询张三账户余额</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">-- 2. 将张三账户余额-1000</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class="line">模拟sql语句错误</span><br><span class="line">-- 3. 将李四账户余额+1000</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">SET @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">-- 回滚事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 设置手动提交后上面代码改为：</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;  </span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;  </span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;  </span><br><span class="line">commit;  </span><br></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start transaction; </span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>开启事务后，只有手动提交才会改变数据库中的数据。  </p><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><div class="table-container"><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table></div><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p></blockquote><p>并发事务隔离级别：</p><div class="table-container"><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table></div><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效  </p><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL体系结构_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL体系结构层级含义_20220315034359342837.png" alt="层级描述" title="层级描述">  </p><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。  </p><p>相关操作：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询建表语句</span><br><span class="line">show create table account;  </span><br><span class="line">-- 建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line">-- 查看当前数据库支持的存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。  </p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/逻辑存储结构_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构">  </p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><div class="table-container"><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table></div><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code>  </p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：  </p><pre><code># 开启慢查询日志开关  slow_query_log=1  # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志  long_query_time=2  </code></pre><p>更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log  </p><p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code>  </p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code>  </p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：  </p><pre><code># 直接在select语句之前加上关键字 explain / desc  EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;  </code></pre><p>EXPLAIN 各字段含义：  </p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）  </li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、   SUBQUERY（SELECT/WHERE之后包含了子查询）等  </li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的IO成本  </li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><div class="table-container"><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table></div><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/二叉树_20220316153214227108.png" alt="二叉树" title="二叉树"></p><p>二叉树形成链表的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/红黑树_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree结构_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree结构图_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/结构图_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/Hash索引原理图_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p><p>特点：</p><ul><li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><div class="table-container"><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table></div><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><div class="table-container"><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table></div><p>演示图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/原理图_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/演示图_20220319215403721066.png" alt="演示图" title="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id = 10;</span><br><span class="line">select * from user where name = &#x27;Arm&#x27;;</span><br><span class="line">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。  </p><p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。  </p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。  </p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引  </p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code>  </p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class="line">create index idx_user_name on tb_user(name);</span><br><span class="line">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class="line">create unique index idx_user_phone on tb_user (phone);</span><br><span class="line">-- 为profession, age, status创建联合索引</span><br><span class="line">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class="line">-- 为email建立合适的索引来提升查询效率</span><br><span class="line">create index idx_user_email on tb_user(email);</span><br><span class="line"></span><br><span class="line">-- 删除索引  </span><br><span class="line">drop index idx_user_email on tb_user;  </span><br></pre></td></tr></table></figure><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。跳过的话，后面的排序就无从说起了。最左前缀法则在用select的时候，和放的位置是没有关系的，只要存在就行。  </p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。  </p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code> 换成 <code>explain select * from tb_user where phone = &#39;17799990015&#39;;</code>这是可以的。  </li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号  </li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。<code>explain select * from tb_user where profession like &#39;软件%&#39;;</code> 这个是不会失效的，只有前面加了%才会失效。  </li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。因为只要有一个没有索引，另外一个用不用索引都没有意义，都要进行全表扫描。所以就无需用索引。</li></ol><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。  </p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>覆盖索引：<br>如果在生成的二级索引（辅助索引）中可以一次性获得select所需要的字段，不需要回表查询。</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；<br>如果在辅助索引（二级索引）中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；<br>如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code>  </p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段  </p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引。<br>username和password字段建立联合索引的叶子节点挂的就是 id 所以不需要三者同时建索引。</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。  </p><p>求选择性公式：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure><br>前缀索引中是有可能碰到相同的索引的情况的（因为选择性可能不为1），所以使用前缀索引进行查询的时候，mysql 会有一个回表查询的过程，确定是否为所需数据。如图中的查询到lvbu6之后还要进行回表，回表完再查xiaoy，看到xiaoy是不需要的数据，则停止查下一个。</p><p><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/pre.png" alt="images" title="索引流程"></p><p>show index 里面的sub_part可以看到接取的长度</p><h4 id="单列索引-amp-联合索引"><a href="#单列索引-amp-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：</p><p><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>phone 和 name 都建立了索引情况下，这句只会用到phone索引字段。</p><p>联合索引的数据组织图：</p><p><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/uion.png" alt="images"></p><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询。</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过1000条，500 - 1000 为宜）</li><li>手动提交事务</li><li>主键顺序插入（主键顺序插入的效率大于乱序插入）</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中，先要把表建立起来。</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>主键的顺序的插入过程如下：  </p><p><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/keySort.png" alt="images"></p><p>但是如果主键是乱序插入的话，就会导致需要插入的位置为中间的位置，会有页分裂的过程。</p><p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。</p><p>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度，二级索引的叶子节点保存的就是主键，所以主键小占用的空间也就会少。</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号，占用的空间大。</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 此语句耗时很长</span><br><span class="line">select * from tb_sku limit 9000000, 10;</span><br><span class="line">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class="line">select id from tb_sku order by id limit 9000000, 10;</span><br><span class="line">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class="line">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class="line">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class="line">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis  </p><p>count的几种用法：</p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值 </li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引，就可以由表锁变成行锁。  </p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图（View）是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。<br>通俗的讲，视图只保存了查询的SQL逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。  </p><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p><code>CREATE [ OR REPLACE ] VIEW 视图名称[（列名列表）] AS SELECT 语句 [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]</code>  </p><blockquote><p>例子： <code>create or replace view stu_wll as select id,name from student where id&lt;=10;</code></p></blockquote><h3 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h3><p>查看创建视图语句： <code>SHOW CREATE VIEW</code>视图名称；  </p><p>查看视图数据：<code>SELECT*FROM</code> 视图名称；<br><code>show create view stu_v_1;</code></p><h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><p>方式一：<code>CREATE[OR REPLACE] VIEW 视图名称[（列名列表)）] AS SELECT 语句[ WITH[ CASCADED | LOCAL ] CHECK OPTION ]</code></p><p>方式二：<code>ALTER VIEW 视图名称 [（列名列表)] AS SELECT语句 [WITH [CASCADED | LOCAL] CHECK OPTION]</code></p><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><p><code>DROP VIEW [IF EXISTS] 视图名称 [视图名称]</code></p><h3 id="视图检查选项"><a href="#视图检查选项" class="headerlink" title="视图检查选项"></a>视图检查选项</h3><p>当使用WITH CHECK QPTION子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如插入，更新，删除，以使其符合视图的定义。MySQL允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，mysql提供了两个选项：CASCADED 和 LOCAL ，默认值为 CASCADED。</p><p>NOTE：如果没有开检查选项就不会进行检查。不同版本是不同含义的，要看版本。</p><h4 id="CASCADED"><a href="#CASCADED" class="headerlink" title="CASCADED"></a>CASCADED</h4><p><code>级联，一旦选择了这个选项，除了会检查创建视图时候的条件，还会检查所依赖视图的条件。</code></p><blockquote><p>比如下面的例子：创建stu_V_l 视图，id是小于等于 20的。<br><code>create or replace view stu_V_l as select id,name from student where id &lt;=20;</code><br>再创建 stu_v_2 视图，20 &gt;= id &gt;=10。<br><code>create or replace view stu_v_2 as select id,name from stu_v_1 where id &gt;=10 with cascaded check option;</code><br>再创建 stu_v_3 视图。<br><code>create or replace view stu_v_3 as select id,name from stu_v_2 where id&lt;=15;</code><br>这条数据能够成功，stu_v_3 没有开检查选项所以不会 去判断 id 是否小于等于15, 直接检查 是否满足 stu_v_2。<br><code>insert into stu_v_3 values(17,&#39;Tom&#39;);</code></p></blockquote><h4 id="LOCAL"><a href="#LOCAL" class="headerlink" title="LOCAL"></a>LOCAL</h4><p>本地的条件也会检查，还会向上检查。在向上找的时候，就要看是否上面开了检查选项，如果没开就不检查。和 CASCADED 的区别就是 CASCADED 不管上面开没开检查选项都会进行检查。</p><h3 id="更新及作用"><a href="#更新及作用" class="headerlink" title="更新及作用"></a>更新及作用</h3><p>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新</p><ol><li>聚合函数或窗口函数 ( SUM()、MIN()、MAX()、COUNT() 等 )</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION 或者UNION ALL</li></ol><blockquote><p>例子： 使用了聚合函数，插入会失败。<br><code>create view stu_v_count as select count(*) from student;</code><br><code>insert into stu_v_count values(10);</code>  </p></blockquote><p>作用</p><p>视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件。 </p><blockquote><p>安全<br>数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据<br>数据独立<br>视图可帮助用户屏蔽真实表结构变化带来的影响。  </p></blockquote><p>总而言之 类似于给表加上了一个外壳，通过这个外壳访问表的时候，只能按照所设计的方式进行访问与更新。</p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>存储过程是事先经过编译并存储在数据库中的一段SQL 语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。<br>存储过程思想上很简单，就是数据库SQL 语言层面的代码封装与重用。</p><p>特点</p><ol><li>封装</li><li>复用</li><li>可以接收参数，也可以返回数据减少网络交互，效率提升</li></ol><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre><code>CREATE PROCEDURE 存储过程名称( [参数列表] ) BEGIN     SQL 语句 END;</code></pre><p>NOTE: 在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter 指定SQL语句的结束符。默认是 分号作为结束符。</p><p>delimiter $ ，则 $ 符作为结束符。</p><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>CALL 名称 ( [参数])</p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>查询指定数据库的存储过程及状态信息</p><p><code>SELECT* FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = &#39;xxx&#39;</code></p><p>存储过程名称；—查询某个存储过程的定义</p><p><code>SHOW CREATE PROCEDURE</code></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>DROP PROCEDURE [ IFEXISTS ] 存储过程名称</code></p><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>游标（CURSOR）是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、OPEN、FETCH和CLOSE，其语法分别如下。</p><blockquote><p>声明游标：<br><code>DECLARE 游标名称 CURSOR FOR 查询语句</code></p><p>打开游标：<br><code>OPEN 游标名称</code></p><p>获取游标记录：<br><code>FETCH 游标名称INTO变量[变量]</code></p></blockquote><p>条件处理程序：<br>条件处理程序（Handler）可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。具体语法为：  </p><blockquote><p>DECLARE handler action HANDLER FOR condition value L condition value]..statement  </p></blockquote><p>handler_action CONTINUE：继续执行当前程序</p><p>EXIT：终止执行当前程序</p><p>condition_value :</p><p><code>SQLSTATE sqlstate_value：状态码，如02000</code></p><p><code>SQLWARNING：所有以01开头的SQLSTATE代码的简写</code></p><p><code>NOT FOUND：所有以02开头的SQLSTATE代码的简写</code></p><p><code>SQLEXCEPTION：所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE代码的简写</code></p><p>例子：</p><p>NOTE：要先声明普通变量，再申请游标。</p><p>要求：<br><code>根据传入的参数uage，来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名（name）和专业（profession），并将用户的姓名和专业插入到所创建的一张新表（id，name，profession）中。</code></p><pre><code>create procedure p1l(in uage int)    begin        declare uname varchar(100);         decLare upro varchar(100);        declare u_cursor cursor for select name,profession from tb_user where age &lt;= uage;         当 条件处理程序的处理的状态码为02000的时候，就会退出。        declare exit handler for SQLSTATE &#39;02000&#39;close u_cursor;        drop table if exists tb_user_pro;         create table if not exists tb_user_pro(        id int primary key auto_increment,         name varchar(100),         profession varchar(100)        );        open u_cursor;         while true do         fetch u_cursor into uname,Upro;         insert into tb_user_pro values(null,uname,Upro);         end while;        close u_cursor;     end;</code></pre><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>介绍<br>触发器是与表有关的数据库对象，指在insert/update/delete之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。<br>使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发（比如说 一条语句影响了 5 行 则会被触发 5 次），不支持语句级触发（比如说 一条语句影响了 5 行 则会被触发 1 次）。  </p><div class="table-container"><table><thead><tr><th>触发器类型</th><th>NEW 和 OLD</th></tr></thead><tbody><tr><td>INSERT</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE</td><td>OLD表示修改之前的数据，NEW表示将要或已经修改后的数据</td></tr><tr><td>DELETE</td><td>OLD表示将要或者已经删除的数据</td></tr></tbody></table></div><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源（CPU、RAM、I/O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><p>NOTE : 针对事物才有加锁的意义。</p><p>分类：MySQL中的锁，按照锁的粒度分，分为以下三类：</p><ol><li>全局锁：锁定数据库中的所有表。</li><li>表级锁：每次操作锁住整张表。</li><li>行级锁：每次操作锁住对应的行数据。</li></ol><p>全局锁：</p><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。<br>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。  </p><p>表锁：</p><p>表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中。  </p><p>对于表级锁，主要分为以下三类：</p><ol><li><p>表锁：对于表锁，分为两类：1.表共享读锁（read lock）所有的事物都只能读（当前加锁的客户端也只能读，不能写），不能写 2.表独占写锁（write lock），对当前加锁的客户端，可读可写，对于其他的客户端，不可读也不可写。<br>读锁不会阻塞其他客户端的读，但是会阻塞写。写锁既会阻塞其他客户端的读，又会阻塞其他客户端的写。</p></li><li><p>元数据锁（meta data lock，MDL），MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。在MySQL5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁（共享）;当对表结构进行变更操作的时候，加MDL写锁（排他）。  </p></li><li><p>意向锁: 为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。<br>一个客户端对某一行加上了行锁，那么系统也会对其加上一个意向锁，当别的客户端来想要对其加上表锁时，便会检查意向锁是否兼容，若是不兼容，便会阻塞直到意向锁释放。  </p></li></ol><p>意向锁兼容性：</p><ol><li>意向共享锁（IS）：与表锁共享锁（read）兼容，与表锁排它锁（write）互斥。  </li><li>意向排他锁（lX）：与表锁共享锁（read）及排它锁（write）都互斥。意向锁之间不会互斥。  </li></ol><p>行锁：</p><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。<br>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。对于行级锁，主要分为以下三类：  </p><ol><li>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。在RC（read commit ）、RR（repeat read）隔离级别下都支持。</li><li>间隙锁（GapLock）：锁定索引记录间隙（不含该记录），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。比如说 两个临近叶子节点为 15 23，那么间隙就是指 [15 , 23],锁的是这个间隙。</li><li>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。在RR隔离级别下支持。</li></ol><p>InnoDB实现了以下两种类型的行锁：  </p><ol><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。</li><li>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</li></ol><div class="table-container"><table><thead><tr><th>SQL</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td>insert</td><td>排他锁  　</td><td>自动加锁 　　　　　　　　　　　　　　　</td></tr><tr><td>update</td><td>排他锁  　</td><td>自动加锁</td></tr><tr><td>delete</td><td>排他锁</td><td>自动加锁 　　　　　　　　　　　　　　</td></tr><tr><td>select</td><td>不加任何锁　</td><td></td></tr><tr><td>select　lock　in　share mode</td><td>排他锁</td><td>需要手动在SELECT之后加LOCK IN SHARE MODE</td></tr><tr><td>select　for　update</td><td>排他锁</td><td>需要手动在SELECT之后加FOR UPDATE 　　　　</td></tr></tbody></table></div><p>行锁 - 演示  </p><p>默认情况下，InnoDB在REPEATABLE READ事务隔离级别运行，InnoDB使用next-key 锁进行搜索和索引扫描，以防止幻读。</p><ol><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</li><li>InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时就会升级为表锁。</li></ol><p>间隙锁/临键锁-演示</p><p>默认情况下，InnoDB在REPEATABLE READ事务隔离级别运行，InnoDB使用next-key 锁进行搜索和索引扫描，以防止幻读。</p><ol><li>索引上的等值查询（唯一索引），给不存在的记录加锁时，优化为间隙锁。</li><li>索引上的等值查询（普通索引），向右遍历时最后一个值不满足查询需求时，next-key lock 退化为间隙锁。</li><li>索引上的范围查询（唯一索引）—会访问到不满足条件的第一个值为止。</li></ol><p>注意：间隙锁唯一目的是防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。</p><h2 id="InnoDB-引擎"><a href="#InnoDB-引擎" class="headerlink" title="InnoDB 引擎"></a>InnoDB 引擎</h2><h3 id="逻辑存储结构"><a href="#逻辑存储结构" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h3><p>表空间（ibd文件），一个mysql实例可以对应多个表空间，用于存储记录、索引等数据。</p><p>段，分为数据段（Leaf node segment）、索引段（Non-leaf node segment）、回滚段（Rollback segment），InnoDB是索引组织表，数据段就是B+树的叶子节点，索引段即为B+树的非叶子节点。段用来管理多个Extent（区）。</p><p>区，表空间的单元结构，每个区的大小为1M。默认情况下，InnoDB存储引擎页大小为16K，即一个区中一共有64个连续的页。</p><p>页，是InnoDB存储引擎磁盘管理的最小单元，每个页的大小默认为16KB。为了保证页的连续性，InnoDB存储引擎每从磁盘申请4-5个区。一页包含若干行。</p><p>行，InnoDB存储引擎数据是按进行存放的。</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/artic.png" alt="images"></p><p>Buffer Pool：缓冲池是主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），然后再以一定频率刷新到磁盘，从而减少磁盘I0，加快处理速度。</p><p><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/artic2.png" alt="images"><br><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/artic3.png" alt="images"><br><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/artic4.png" alt="images"><br><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/artic5.png" alt="images"></p><p>磁盘架构：<br><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/artic6.png" alt="images"><br><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/artic7.png" alt="images"><br><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/artic8.png" alt="images"></p><p>InnoDB的整个体系结构为：</p><p>当业务操作的时候直接操作的是内存缓冲区，如果缓冲区当中没有数据，则会从磁盘中加载到缓冲区，增删改查都是在缓冲区的，后台线程以一定的速率刷新到磁盘。</p><h2 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h2><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时败。具有ACID四大特征。</p><p>原子性，一致性，持久性这三大特性由 redo log 和 undo log 日志来保证的。<br>隔离性 是由锁机制和MVCC保证的。</p><p>redo log:</p><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。<br>该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file），前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中，用于在刷新脏页到磁盘，发生错误时，进行数据恢复使用。</p><blockquote><p>个人理解： 事物每次提交的时候都会将数据刷到redo log中而不是直接将buffer pool中的数据直接刷到磁盘中（ibd文件中），是因为redo log 是顺序写，性能处理的够快，直接刷到ibd中，是随机写，性能慢。所以脏页是在下一次读的时候，或者后台线程采用一定的机制进行刷盘到ibd中。</p></blockquote><p>undo log:<br>回滚日志，用于记录数据被修改前的信息，作用包含两个：提供回滚和MVCC（多版本并发控制）。<br>undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。  </p><blockquote><p>Undo log销毁：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC。<br>Undo log存储：undo log采用段的方式进行管理和记录，存放在前面介绍的rollback segment回滚段中，内部包含1024个undo log segment。</p></blockquote><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><h3 id="当前读"><a href="#当前读" class="headerlink" title="当前读:"></a>当前读:</h3><p>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如：</p><ul><li>select…lock in share mode（共享锁）。</li><li>select..…for update、update、insert、delete（排他锁）都是一种当前读。</li></ul><h3 id="快照读"><a href="#快照读" class="headerlink" title="快照读:"></a>快照读:</h3><p>简单的select（不加锁）就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。</p><ul><li>Read Committed：每次select，都生成一个快照读。</li><li>Repeatable Read：开启事务后第一个select语句才是快照读的地方。</li><li>Serializable：快照读会退化为当前读。</li></ul><h3 id="MVCC-1"><a href="#MVCC-1" class="headerlink" title="MVCC:"></a>MVCC:</h3><p>全称Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、readView。</p><h4 id="MVCC-实现原理"><a href="#MVCC-实现原理" class="headerlink" title="MVCC 实现原理:"></a>MVCC 实现原理:</h4><p>有三个隐藏的字段:</p><p><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/MVCC.png" alt="images"></p><blockquote><p>undo log回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。<br>当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。<br>而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。</p></blockquote><p>undo log 版本链：</p><p>undo log日志会记录原来的版本的数据，因为是通过undo log 日志进行回滚的。</p><p><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/MVCCList.png" alt="images"></p><p>如何确定返回哪一个版本 这是由read view决定返回 undo log 中的哪一个版本。</p><p><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/readview0.png" alt="images"></p><blockquote><p>RC隔离级别下，在事务中每一次执行快照读时生成ReadView。<br>RR隔离级别下，在事务中第一次执行快照读时生成ReadView，后续会复用。  </p><p><a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=145&amp;spm_id_from=pageDriver&amp;vd_source=bbc04b831b54029788a178a7c2e9ae20">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=145&amp;spm_id_from=pageDriver&amp;vd_source=bbc04b831b54029788a178a7c2e9ae20</a></p></blockquote><p>MVCC 靠 隐藏字段 , undo log 版本链 , read view 实现的。</p><ul><li>原子性-undo log </li><li>持久性-redo log</li><li>一致性-undo log + redo log</li><li>隔离性-锁 + MVCC</li></ul><p><img src="https://github.com/Buildings-Lei/mysql_note/blob/main/images/readview.png" alt="images"></p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><div class="table-container"><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8个字节</td></tr></tbody></table></div><p>无符号在数据类型后加 unsigned 关键字。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><div class="table-container"><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table></div><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><div class="table-container"><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table></div><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><div class="table-container"><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;=M&lt;=255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table></div><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><div class="table-container"><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)/8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table></div><h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><div class="table-container"><table><thead><tr><th style="text-align:left">Privilege</th><th style="text-align:left">Grant Table Column</th><th style="text-align:left">Context</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td><td style="text-align:left">Synonym for “all privileges”</td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td><td style="text-align:left"><code>Alter_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td><td style="text-align:left"><code>Alter_routine_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td><td style="text-align:left"><code>Create_priv</code></td><td style="text-align:left">Databases, tables, or indexes</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td><td style="text-align:left"><code>Create_role_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td><td style="text-align:left"><code>Create_routine_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td><td style="text-align:left"><code>Create_tablespace_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td><td style="text-align:left"><code>Create_tmp_table_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td><td style="text-align:left"><code>Create_user_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td><td style="text-align:left"><code>Create_view_priv</code></td><td style="text-align:left">Views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td><td style="text-align:left"><code>Delete_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td><td style="text-align:left"><code>Drop_priv</code></td><td style="text-align:left">Databases, tables, or views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td><td style="text-align:left"><code>Drop_role_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td><td style="text-align:left"><code>Event_priv</code></td><td style="text-align:left">Databases</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td><td style="text-align:left"><code>Execute_priv</code></td><td style="text-align:left">Stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td><td style="text-align:left"><code>File_priv</code></td><td style="text-align:left">File access on server host</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td><td style="text-align:left"><code>Grant_priv</code></td><td style="text-align:left">Databases, tables, or stored routines</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td><td style="text-align:left"><code>Index_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td><td style="text-align:left"><code>Insert_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td><td style="text-align:left"><code>Lock_tables_priv</code></td><td style="text-align:left">Databases</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td><td style="text-align:left"><code>Process_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td><td style="text-align:left">See <code>proxies_priv</code> table</td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td><td style="text-align:left"><code>References_priv</code></td><td style="text-align:left">Databases or tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td><td style="text-align:left"><code>Reload_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td><td style="text-align:left"><code>Repl_client_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td><td style="text-align:left"><code>Repl_slave_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td><td style="text-align:left"><code>Select_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td><td style="text-align:left"><code>Show_db_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td><td style="text-align:left"><code>Show_view_priv</code></td><td style="text-align:left">Views</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td><td style="text-align:left"><code>Shutdown_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td><td style="text-align:left"><code>Super_priv</code></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td><td style="text-align:left"><code>Trigger_priv</code></td><td style="text-align:left">Tables</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td><td style="text-align:left"><code>Update_priv</code></td><td style="text-align:left">Tables or columns</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td><td style="text-align:left">Synonym for “no privileges”</td><td style="text-align:left">Server administration</td></tr></tbody></table></div><p>GRANT 和 REVOKE 允许的动态权限</p><div class="table-container"><table><thead><tr><th style="text-align:left">Privilege</th><th style="text-align:left">Context</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td><td style="text-align:left">Dual password administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td><td style="text-align:left">Allow queries blocked by audit log filter</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td><td style="text-align:left">Audit log administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td><td style="text-align:left">Authentication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td><td style="text-align:left">Backup administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td><td style="text-align:left">Backup and Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td><td style="text-align:left">Backup and Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td><td style="text-align:left">Clone administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td><td style="text-align:left">Firewall administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td><td style="text-align:left">Redo log archiving administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td><td style="text-align:left">NDB Cluster</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td><td style="text-align:left">Authentication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td><td style="text-align:left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td><td style="text-align:left">Replication administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td><td style="text-align:left">Resource group administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td><td style="text-align:left">Resource group administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr><tr><td style="text-align:left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td><td style="text-align:left">Server administration</td></tr></tbody></table></div><h1 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol><li>在SQL语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看Mysql数据库占用空间：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_schema &quot;Database Name&quot;</span><br><span class="line">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">GROUP BY table_schema;</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote><p><a href="https://dhc.pythonanywhere.com/entry/share/?key=3ad29aad765a2b98b2b2a745d71bef715507ee9db8adbec98257bac0ad84cbe4#h1-u6743u9650u4E00u89C8u8868">https://dhc.pythonanywhere.com/entry/share/?key=3ad29aad765a2b98b2b2a745d71bef715507ee9db8adbec98257bac0ad84cbe4#h1-u6743u9650u4E00u89C8u8868</a><br>这篇笔记是在别人的基础上完善而来，感谢B站的黑马程序员up主，也感谢路途博客。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SQL数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python框架测试</title>
      <link href="/2024/01/22/4-Python%E6%A1%86%E6%9E%B6%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/01/22/4-Python%E6%A1%86%E6%9E%B6%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Python自动化测试"><a href="#Python自动化测试" class="headerlink" title="Python自动化测试"></a>Python自动化测试</h2><h2 id="unittest框架"><a href="#unittest框架" class="headerlink" title="unittest框架"></a>unittest框架</h2><p>​    python自带的一个单元测试框架，不用额外安装，即可直接使用。测试人员用来做自动化测试（接口/UI自动化），作为自动化测试的执行框架，即管理和执行测试用例。</p><p><strong>使用UnitTest框架的原因</strong></p><ul><li>能够组织多个用例去执行：能把多个测试用例放在一起，一起去执行</li><li>提供丰富的断言方法：代替人工自动的判断实际结果和预期结果是否相符</li><li>能够生成测试报告</li></ul><p><strong>unittest中最核心的四个概念是：</strong></p><p>test case===&gt;测试用例, test suite===&gt;测试套件, </p><p>test runnerr===&gt;测试执行, test fixture===&gt;测试夹具。</p><p><strong>UnitTest框架核心要素（组成部分）</strong></p><ul><li>TestCase：测试用例，作用是用来书写真正的用例代码（脚本）</li><li>TestSuite：测试套件，作用是用来组装（打包）TestCase（测试用例）的，既可以将多个用例脚本文件组装到一起</li><li>TestRunner：测试执行（测试运行），作用是用来执行TestSuite（测试套件）的</li><li>TestLoader：测试加载，是对TestSuite（测试套件）功能的补充，也是用来 组装（打包）TestCase（测试用例）的</li><li>Fixture：测试夹具，是一种代码结构，相当于书写前置方法（执行用例之前的方法）代码和后置方法（执行用例之后）代码，即用例执行顺序为前置-&gt;用例-&gt;后置</li></ul><h3 id="1、TestCase"><a href="#1、TestCase" class="headerlink" title="1、TestCase"></a><strong>1、TestCase</strong></h3><p>1、作用</p><ul><li>用来书写真正的用例代码（脚本）</li><li>单独一个测试用例，也可以执行</li></ul><p>2、定义测试用例的步骤</p><ul><li>步骤1：导包—-&gt;import unittest</li><li>步骤2：定义测试类—-&gt;新建测试类 必须 继承unittest.TestCase类，习惯性类名以Test开头</li><li>步骤3：定义测试方法—-&gt;测试方法名称命名 必须 以test开头</li><li>步骤4：执行</li></ul><p>3、注意事项</p><ul><li>代码文件名，要满足标识符的规则：字母数字下划线组成，不能以数字开头</li><li>代码文件名，不要使用中文</li></ul><p>4、执行测试用例的两种方式</p><ul><li>方式1：使用pycharm在代码上点击鼠标右键，选择使用UnitTest运行<ul><li>在类名后边右键运行：会执行测试类中所有的测试方法</li><li>在方法名后边右键运行：只执行当前的测试方法</li></ul></li><li>方式2：调用unittest.main()来运行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">学习TestCase（测试用例）的使用</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 1、导包</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="comment"># 2、定义测试类：只需要让类继承unittest.TestCase类，这个类就是测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 3、定义测试方法：测试方法中的代码就是真正的用例代码，测试方法名必须以test开头</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试方法一&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_method2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试方法二&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">4、执行测试用例的4种方式</span></span><br><span class="line"><span class="string">    4.1 在类名或者方法名后边右键运行</span></span><br><span class="line"><span class="string">        4.1.1在类名后边右键运行：会执行测试类中所有的测试方法</span></span><br><span class="line"><span class="string">        4.1.2在方法名后边右键运行：只执行当前的测试方法</span></span><br><span class="line"><span class="string">    4.2 使用unittest.main()执行测试用例</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 4.2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        unittest.main()</span><br></pre></td></tr></table></figure><p>6、可能出现的错误</p><p>（1）文件名包含中文</p><p>（2）右键运行 没有unit test for……</p><ul><li>解决方案1：新建一个代码文件，将之前的代码复制过来</li><li>解决方案2：在主程序使用unittest.main()来执行</li><li>解决方案3：使用减号，将python中内容移除</li></ul><h3 id="2、TestSuite和TestRunner"><a href="#2、TestSuite和TestRunner" class="headerlink" title="2、TestSuite和TestRunner"></a>2、TestSuite和TestRunner</h3><p>1、TestSuite的作用</p><ul><li>将多条用例脚本集合在一起就是套件，即TestSuite是用来组装用例的</li></ul><p>2、将用例脚本集合到测试套件中的步骤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">步骤<span class="number">1</span>： 导包---&gt;<span class="keyword">import</span> unittest</span><br><span class="line">步骤<span class="number">2</span>：实例化套件对象---&gt; suite = unittest.TestSuite()</span><br><span class="line">步骤<span class="number">3</span>：添加用例方法</span><br><span class="line">（<span class="number">1</span>）一次添加一个测试方法---&gt;suite.addTest(ClassName(‘MethodName’))</span><br><span class="line">                                                        </span><br><span class="line">    <span class="comment">#ClassName:测试类名 MethodName：测试方法名</span></span><br><span class="line">       （<span class="number">2</span>） 一次添加整个测试类---&gt;suite .addTest(unittest.makeSuite(测试类名))                       <span class="comment">#在不同的Python版本中，可能没有提示</span></span><br><span class="line">        （<span class="number">3</span>）一次添加整个测试类</span><br><span class="line">suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(ClassName))</span><br><span class="line">             <span class="comment">#把指定测试类中的测试方法全部添加到测试套件中</span></span><br></pre></td></tr></table></figure><p>3、TestRunner的作用</p><ul><li>用来执行测试用例和测试套件</li></ul><p>4、执行对象执行测试套件的步骤</p><ul><li>步骤1： 导包—-&gt;import unittest</li><li>步骤2：实例化执行对象（运行对象）—-&gt; runner = unittest.TextTestRunner()</li><li>步骤:3：执行对象执行套件对象—-&gt; runner.run(suite) </li></ul><p>​                                 #执行对象.run(套件对象)</p><p>5、整体步骤</p><ul><li>步骤1： 导包—-&gt;import unittest</li><li>步骤2： 实例化套件对象—-&gt; suite = unittest.TestSuite()</li><li>步骤3：添加用例方法</li><li>步骤4：实例化执行对象（运行对象）—-&gt; runner = unittest.TextTestRunner()</li><li>步骤:5：执行对象执行套件对象—-&gt; runner.run(suite) </li></ul><p>6、注意事项</p><ul><li>TextSuite需要配合TestRunner才能被执行</li></ul><p>7、举例说明</p><p>（1）需求</p><ul><li>创建2个文件，并在每个文件中定义1个测试类和2个测试方法</li><li>批量执行所有的测试用例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 步骤1：导包---&gt;import unittest</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 导包：导入其他包含测试类测试方法的Python文件</span></span><br><span class="line"><span class="keyword">from</span> hm_02_testcase1 <span class="keyword">import</span> TestDemo1</span><br><span class="line"><span class="keyword">from</span> hm_02_testcase2 <span class="keyword">import</span> TestDemo2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 步骤2：实例化套件对象---&gt; suite = unittest.TestSuite()</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">步骤3：添加用例方法</span></span><br><span class="line"><span class="string">3.1 方式1：一次添加一个测试方法---&gt;套件对象.addTest(测试类名(&#x27;测试方法名&#x27;))</span></span><br><span class="line"><span class="string">3.2 方式2：一次添加整个测试类-&gt;套件对象.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(ClassName))</span></span><br><span class="line"><span class="string">                           #把指定测试类中的测试方法全部添加到测试套件中</span></span><br><span class="line"><span class="string">3.3 方式3：一次添加整个测试类---&gt;套件对象.addTest(unittest.makeSuite(测试类名))</span></span><br><span class="line"><span class="string">                           #在不同的Python版本中，可能没有提示</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 3.1</span></span><br><span class="line">suite.addTest(TestDemo1(<span class="string">&#x27;test_method1&#x27;</span>))</span><br><span class="line">suite.addTest(TestDemo1(<span class="string">&#x27;test_method2&#x27;</span>))</span><br><span class="line">suite.addTest(TestDemo2(<span class="string">&#x27;test_method1&#x27;</span>))</span><br><span class="line">suite.addTest(TestDemo2(<span class="string">&#x27;test_method2&#x27;</span>))</span><br><span class="line"><span class="comment"># 3.2</span></span><br><span class="line">suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestDemo1))</span><br><span class="line">suite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(TestDemo2))</span><br><span class="line"><span class="comment"># 3.3</span></span><br><span class="line">suite.addTest(unittest.makeSuite(TestDemo1))</span><br><span class="line">suite.addTest(unittest.makeSuite(TestDemo2))</span><br><span class="line"><span class="comment"># 步骤4：实例化执行对象（运行对象）---&gt; runner = unittest.TextTestRunner()</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line"><span class="comment"># 步骤5：执行对象执行套件对象---&gt; runner.run(suite)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8、test suite(测试套件)、test runne(测试执行)==&gt;runCase</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">概念:</span><br><span class="line">    test suite 测试套件:把需要执行的测试用例放到一个套子</span><br><span class="line">    test runner 测试执行:使用测试执行去执行所有在套子里面的测试用例</span><br><span class="line">语法:</span><br><span class="line">    测试套件:适合作为调试测试用例</span><br><span class="line">        suite = unittest.TestSuite()</span><br><span class="line">        suite.addTest(测试类(<span class="string">&#x27;测试方法&#x27;</span>))</span><br><span class="line">    测试执行:</span><br><span class="line">        runner = unittest.TextTestRunner()</span><br><span class="line">        runner.run(suite)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试套件、测试执行代码实现</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> Case.test_03_用例执行顺序 <span class="keyword">import</span> TestLoginPay</span><br><span class="line"><span class="keyword">from</span> Case.test_04_断言 <span class="keyword">import</span> TestLogin03</span><br><span class="line"><span class="comment"># unittest.main()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加不同的测试用例</span></span><br><span class="line"><span class="comment"># 实例化一个测试套件</span></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line">suite.addTest(TestLoginPay(<span class="string">&#x27;test_01_login&#x27;</span>))</span><br><span class="line">suite.addTest(TestLoginPay(<span class="string">&quot;test_04_create_order&quot;</span>))</span><br><span class="line">suite.addTest(TestLogin03(<span class="string">&quot;test_login&quot;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 实例化一个测试执行</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line">runner.run(suite)</span><br></pre></td></tr></table></figure><p>9、执行所有==&gt;runAllcase</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">    test suite:</span><br><span class="line">        unittest.defaultTestLoader.discover(start_dir=测试用例的目录,pattern=选取</span><br><span class="line">测试用例执行的规则)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#执行所有case代码实现</span><br><span class="line">import unittest</span><br><span class="line"># 添加所有的测试用例套件</span><br><span class="line">suite = unittest.defaultTestLoader.discover(&quot;./Case&quot;,pattern=&quot;test_03*.py&quot;)</span><br><span class="line"># 实例化一个测试执行</span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line"># 执行测试</span><br><span class="line">runner.run(suite)</span><br></pre></td></tr></table></figure><p>10、 测试执行==&gt;test runner</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">概念：</span><br><span class="line">    HTMLTestRunner:第三方插件</span><br><span class="line">    下载resource里面的HTMLTestRunnerPlugins放到python安装目录下的 lib 目录下</span><br><span class="line">     <span class="number">1.</span>生成的报告应该放在Report里面</span><br><span class="line">     <span class="number">2.</span>生成的报告应该以 .html结尾</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test runner报告生成实现代码</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> HTMLTestRunnerPlugins</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 获取测试报告的路径进行拼接</span></span><br><span class="line">report_path = os.path.dirname(__file__) + <span class="string">&#x27;/Report/&#x27;</span></span><br><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line">now = time.strftime(<span class="string">&#x27;%Y-%m-%d %H_%M_%S&#x27;</span>)</span><br><span class="line"><span class="comment"># 根据路径和时间拼接最终的文件路径</span></span><br><span class="line">report_name = report_path + now + <span class="string">&#x27;HTMLReport.html&#x27;</span></span><br><span class="line"><span class="comment"># 添加执行的测试目录到套件里面</span></span><br><span class="line">suite = unittest.defaultTestLoader.discover(<span class="string">&#x27;./Case&#x27;</span>)</span><br><span class="line"><span class="comment"># 打开我们刚才拼接好的路径</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(report_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fq:</span><br><span class="line">    <span class="comment"># 实例化一个 HTMLTestRunner</span></span><br><span class="line">    runner = HTMLTestRunnerPlugins.HTMLTestRunner(</span><br><span class="line">        stream=fq,</span><br><span class="line">        verbosity=<span class="number">2</span>,</span><br><span class="line">        title=<span class="string">&#x27;web自动化测试报告&#x27;</span>,</span><br><span class="line">        description=<span class="string">&quot;执行完所有的测试用例&quot;</span>,</span><br><span class="line">        tester=<span class="string">&#x27;第一组成员&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 执行套件</span></span><br><span class="line">    runner.run(suite)</span><br></pre></td></tr></table></figure><p>11、数据驱动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">概念：</span><br><span class="line">    数据驱动:有的用例只是参数不一样,其他代码完全一样,就可以通过改变测试参数来实现一条</span><br><span class="line">用例方法执行多种不同的测试场景.在unittest里面需要使用 ddt 来提供参数化的功能</span><br><span class="line">            pip install ddt  安装</span><br><span class="line">语法：</span><br><span class="line">    ddt可以参数化读取列表嵌套列表或者列表嵌套字典的数据</span><br><span class="line">    列表嵌套列表读取:</span><br><span class="line">        先在类前面加上: @ddt.ddt</span><br><span class="line">        在方法前面加上: @ddt.data(*列表嵌套列表)</span><br><span class="line"><span class="meta">                      @ddt.unpack</span></span><br><span class="line">    列表嵌套字典读取:</span><br><span class="line">        先在类前面加上: @ddt.ddt</span><br><span class="line">        在方法前面加上: @ddt.data(*列表嵌套列表)</span><br><span class="line">                      在方法里面使用一个形式参数来接收</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据驱动代码实现</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> ddt</span><br><span class="line"><span class="keyword">from</span> Common.OperationData <span class="keyword">import</span> OperationData</span><br><span class="line"><span class="keyword">from</span> Page.Login_Page <span class="keyword">import</span> LoginPage</span><br><span class="line"> </span><br><span class="line">data_list = OperationData(<span class="string">&#x27;user_data.xls&#x27;</span>).get_data_list()</span><br><span class="line">data_dict = OperationData(<span class="string">&#x27;user_data.xls&#x27;</span>).get_data_dict()</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ddt.ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLoginDDt</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @ddt.data(<span class="params">*data_dict</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_dict</span>(<span class="params">self, dict_data</span>):</span><br><span class="line">        <span class="built_in">print</span>(dict_data)</span><br><span class="line">        login = LoginPage(<span class="string">&quot;chrome&quot;</span>)</span><br><span class="line">        login.open_login_url()</span><br><span class="line">        <span class="comment"># 输入账号</span></span><br><span class="line">        login.send_user_name(dict_data[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">        <span class="comment"># 输入密码</span></span><br><span class="line">        login.send_password(dict_data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        <span class="comment"># 点击登录</span></span><br><span class="line">        login.click_login()</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 进行断言</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(dict_data[<span class="string">&quot;expected&quot;</span>]) == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;判断表达式:&quot;</span>,login.login_after_assert())</span><br><span class="line">            self.assertTrue(login.login_after_assert(),msg=<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">str</span>(dict_data[<span class="string">&quot;expected&quot;</span>]) == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            self.assertTrue(<span class="keyword">not</span> login.login_after_assert(), msg=<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;预期结果超过限制&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="3、TestLoader"><a href="#3、TestLoader" class="headerlink" title="3、TestLoader"></a><strong>3、TestLoader</strong></h3><p><strong>TestLoader：测试加载</strong></p><p>1、作用</p><ul><li>作用和 TestSuite一样，也是 用来组装测试用例的，同样需要使用 TextTestRunner()去 执行</li></ul><p>2、为什么有了TestSuite还要用TestLoader？</p><ul><li>TestSuite：假如有10个用例脚本，通过makeSuite(测试类名)也需要10次才能将所有用例脚本都添加到测试套件中</li><li>TestLoader：使用unittest.TestLoader，通过该类下面的discover()方法自动搜索指定目录下指定开头的.py文件，并将查找到的测试用例组装到套件中 ，一行代码就可以将10个用例脚本都添加到套件中</li><li>结论：使用 TestLoader加载用例脚本更方便</li></ul><p>3、通过TestLoader批量添加用例方法到套件中的步骤</p><blockquote><ul><li>步骤1： 导包—-&gt;import unittest</li><li>步骤2：实例化加载对象 并加载用例— -&gt; 得到的是套件对象</li></ul><p>​    suite = unittest.TestLoader().discover(‘用例所在的目录’,’用例代码文件名*.py’)</p><ul><li>步骤3：实例化执行对象并执行套件对象</li></ul></blockquote><p>4、注意事项</p><ul><li>unittest.TestLoader().discover( ‘用例所在的目录’,’用例代码文件名*.py’ )最终返回的还是套件对象，执行套件对象需要使用TestRunner</li></ul><p>5、TestLoader与TestSuite区别</p><p><img src="https://img-blog.csdnimg.cn/062e85bd3c3542cc96b537cf30ae6f20.png" alt="img"></p><h3 id="4、Fixture"><a href="#4、Fixture" class="headerlink" title="4、Fixture"></a><strong>4、Fixture</strong></h3><p>1、Fixture引入案例</p><p>tpshop网页登录用例：</p><p>1、打开浏览器（一般只打开一次）</p><p>2、打开网页，点击登录（每次）</p><p>3、输入用户名、密码、验证码，点击【登录】（每次）</p><p>4、关闭页面（每次）</p><p>5、关闭浏览器（一般只关闭一次）</p><p><strong><em>\</em>如果有3条用例：**</strong></p><p>1、打开浏览器（一般只打开一次，类，使用类 级别 Fixture）</p><p>2、打开网页，点击登录（每次）</p><p>3、输入用户名1、密码1、验证码1，点击【登录】（每次，测试方法，使用 方法级别 Fixture）</p><p>4、关闭页面（每次）</p><p>2、打开网页，点击登录（每次）</p><p>3、输入用户名2、密码2、验证码2，点击【登录】（每次，测试方法，使用 方法级别 Fixture）</p><p>4、关闭页面（每次）</p><p>2、打开网页，点击登录（每次）</p><p>3、输入用户名3、密码3、验证码3，点击【登录】（每次，测试方法，使用 方法级别 Fixture）</p><p>4、关闭页面（每次）</p><p>5、关闭浏览器（一般只关闭一次，类，使用类 级别 Fixture）</p><p><strong><em>\</em>结论：**</strong></p><ul><li>对于1、打开浏览器，2、打开网页，3、关闭网页，4、关闭浏览器，每个测试方法中都需要写，很麻烦，使用Fixture的话，这部分代码只写一次就可以了，执行每个测试用例方法前后都会自动执行Fixture写的2、4、这部分的代码</li></ul><p><strong>2、Fixture介绍</strong></p><p>（1）作用</p><ul><li>是一种代码结构，会在用例执行前后自动执行</li><li>简单理解就是对一个测试用例环境的初始化和销毁</li></ul><p>（2）Fixture控制级别</p><ul><li>方法级别 Fixture：在每个用例执行前、后都会自动调用，方法名是固定的</li><li>类级别 Fixture：在类中所有的测试方法执行前、后会自动执行的代码，一个类中只执行一次，类级别的Fixture需要写作类方法</li><li>模块级别 Fixture （了解）：模块就是代码文件，模块级别就是在这个代码文件执行前、后会自动执行的代码，在类外部定义函数</li></ul><p><strong>3、方法级别Fixture</strong></p><p>（1）使用方式</p><ul><li>初始化（前置处理）<ul><li>def setUp(self):  #每个用例执行之前都会自动调用</li></ul></li><li>销毁（后置处理）<ul><li>def tearDown(self):  #每个用例执行之后都会自动调用</li></ul></li></ul><p>（2）总结</p><ul><li>运行于测试方法的始末，即：运行一次用例就会运行一次setUp和tearDown</li></ul><p><strong>4、类级别Fixture</strong></p><p>（1）使用方式</p><ul><li>初始化（前置处理）<ul><li>@classmethod</li><li>def setUpClass(cls):  #类前置方法，方法名不能变，因为这里相当于覆盖式重写了父类unittest中的setUpClass方法</li></ul></li><li>销毁（后置处理）<ul><li>@classmethod</li><li>def tearDownClass(cls):  #类后置方法</li></ul></li></ul><p>（2）总结</p><ul><li>运行于测试类的始末，即：每个测试类只会运行一次setUpClass和tearDownClass</li><li>类前置 方法前置 用例 方法后置 方法前置 用例 方法后置 类后置</li></ul><p><strong>5、模块级别Fixture（了解）</strong></p><p>（1）使用方式</p><ul><li>初始化（前置处理）<ul><li>def setUpModule():  #首先自动执行</li></ul></li><li>销毁（后置处理）<ul><li>def tearDownModule():  #最后自动执行</li></ul></li></ul><p>（2）总结</p><ul><li>运行于整个模块的始末，即：整个模块只会运行一次setUpModule和tearDownModule</li></ul><p><strong>6、注意</strong></p><ul><li>Fixture不一定是成对出现的，需要前置写前置，需要后置写后置即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;2、打开网页，点击登录&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;4、关闭网页&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1、打开浏览器&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;5、关闭浏览器&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;3、输入用户名1、密码1、验证码1，点击【登录】&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;3、输入用户名2、密码2、验证码2，点击【登录】&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_3</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;3、输入用户名3、密码3、验证码3，点击【登录】&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">概念：</span><br><span class="line">    test fixture==&gt;测试夹具</span><br><span class="line">语法</span><br><span class="line">    方法级别:</span><br><span class="line">        setup()     在每一个测试方法执行之前执行 setup 的代码</span><br><span class="line">        teardown()  在每一个测试方法执行之后执行 teardown 的代码</span><br><span class="line">    类级别:</span><br><span class="line">        setupClass() 在每一个测试类执行之前执行的方法 需要使用@<span class="built_in">classmethod</span>装饰</span><br><span class="line">        teardownClass() 在每一个测试类执行之后执行的方法 需要使用@<span class="built_in">classmethod</span>装饰</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试夹具实现代码</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;普通登录测试&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;普通登录测试&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login_remember</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;记住密码测试&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;记住密码测试&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在每一个测试方法执行之前执行&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在每一个测试方法执行之后执行&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在每一个测试类执行之前执行的方法，需要使用@classmethod装饰&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;在每一个测试类执行之后执行的方法,需要使用@classmethod装饰&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#unittest断言方法</span></span><br><span class="line"><span class="comment"># 概念</span></span><br><span class="line">    断言:判断预期和实际结果是否相符合</span><br><span class="line"><span class="comment"># 语法</span></span><br><span class="line">    self.assertEqual(a,b,msg=<span class="string">&#x27;错误描述&#x27;</span>) ==&gt; 判断  a==b成立则测试用例通过</span><br><span class="line">    self.assertTrue(x,msg=<span class="string">&#x27;错误描述&#x27;</span>) ==&gt; 判断 表达式x 是否为true,为true通过测试</span><br><span class="line">    self.assertIn(a,b,msg=<span class="string">&#x27;错误描述&#x27;</span>) ==&gt; 判断 a <span class="keyword">in</span> b成立则测试通过</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#unittest断言实现代码</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLogin03</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login</span>(<span class="params">self</span>):</span><br><span class="line">        expected = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">        result = <span class="string">&quot;admin&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登录测试&quot;</span>)</span><br><span class="line">        self.assertEqual(expected,result, msg=<span class="string">&#x27;用户名输入错误&#x27;</span>)  <span class="comment"># 判断表达式a==b成立，则测试通过</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_to_cart</span>(<span class="params">self</span>):</span><br><span class="line">        expected = <span class="number">12</span></span><br><span class="line">        result = <span class="number">12</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;加入购物车的界面&quot;</span>)</span><br><span class="line">        self.assertTrue(expected == result,msg=<span class="string">&#x27;数量不对&#x27;</span>)  <span class="comment"># 判断表达式a==b是否为True,为true通过测试</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_create_order</span>(<span class="params">self</span>):</span><br><span class="line">        expected = <span class="string">&#x27;230527&#x27;</span></span><br><span class="line">        result = <span class="string">&#x27;tbd230527&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建订单的界面&quot;</span>)</span><br><span class="line">        self.assertIn(expected,result,msg=<span class="string">&quot;订单号错误&quot;</span>)  <span class="comment"># 判断表达式a是否在b里面</span></span><br><span class="line">        <span class="comment"># self.assertTrue(expected in result,msg=&#x27;订单号错误&#x27;)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">跳过测试</span><br><span class="line">    概念</span><br><span class="line">        <span class="number">1.</span>当我们写的部分用例,在某些情况下不需要执行的时候可以跳过</span><br><span class="line">        <span class="number">2.</span>当系统更新之后,部分的测试用例失效,但是不确定后面是否还会再改回来,就直接跳过</span><br><span class="line">    语法</span><br><span class="line">    装饰器实现的跳过测试用例</span><br><span class="line"><span class="meta">        @unittest.skip(<span class="params">原因</span>) ==&gt; 没有条件,直接跳过</span></span><br><span class="line"><span class="meta">        @unittest.skipIf(<span class="params">表达式,原因</span>) ==&gt; 表达式为真跳过测试</span></span><br><span class="line"><span class="meta">        @unittest.skipUnless(<span class="params">表达式,原因</span>) ==&gt; 表达式为假跳过测试</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跳过测试代码实现</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 为0性别为男，为1性别为女</span></span><br><span class="line">sex = random.randint(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestLoginPay</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_page_enter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;进入商品界面&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @unittest.skip(<span class="params">reason=<span class="string">&#x27;不想浏览&#x27;</span></span>)  </span><span class="comment"># 没有必要条件直接跳过</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_browse_products</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;浏览商品的界面&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @unittest.skipIf(<span class="params"><span class="number">1</span>==<span class="number">1</span>,reason=<span class="string">&#x27;不想加入购物车&#x27;</span></span>)  </span><span class="comment"># 表达式为真跳过测试</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_03_add_to_cart</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;加入购物车的界面&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_04_create_order</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;创建订单的界面&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @unittest.skipUnless(<span class="params">sex==<span class="number">1</span>, reason=<span class="string">&#x27;不想支付订单&#x27;</span></span>)  </span><span class="comment"># 表达式为假跳过测试，引用随机数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_05_pay_order</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;支付订单的界面&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p><strong>六、练习1</strong></p><p>1、需求</p><ul><li>创建一个目录case，作用就是用来存放用例脚本</li><li>在case目录中创建5个用例代码文件，test_case1.py……</li><li>使用TestLoader去执行用例</li></ul><p>2、注意</p><ul><li>实际应用中，用例都是存放在单独的目录中的</li></ul><p>3、实现代码</p><p><img src="https://img-blog.csdnimg.cn/645fffc6025f4b31b1ed6032bd8bd069.png" alt="img"></p><p><strong>七、练习2</strong></p><p>1、需求</p><ul><li>定义一个tools模块，在这个模块中定义add方法，add方法可以对两个数字求和，返回求和结果 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br></pre></td></tr></table></figure><ul><li>这个add函数相当于开发的功能代码，进行自动化测试时可以调用开发的代码，但是不能修改开发的代码</li><li>书写用例，通过多组数据对add()函数进行测试</li></ul><p>2、代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试用例</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> lx2.tools <span class="keyword">import</span> add</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAdd</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_tools_add1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">2</span> == add(<span class="number">1</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;用例<span class="subst">&#123;<span class="number">1</span>&#125;</span><span class="subst">&#123;<span class="number">1</span>&#125;</span><span class="subst">&#123;<span class="number">2</span>&#125;</span>测试通过&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;用例<span class="subst">&#123;<span class="number">1</span>&#125;</span><span class="subst">&#123;<span class="number">1</span>&#125;</span><span class="subst">&#123;<span class="number">2</span>&#125;</span>测试不通过&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_tools_add2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">3</span> == add(<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;用例<span class="subst">&#123;<span class="number">1</span>&#125;</span><span class="subst">&#123;<span class="number">2</span>&#125;</span><span class="subst">&#123;<span class="number">3</span>&#125;</span>测试通过&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;用例<span class="subst">&#123;<span class="number">1</span>&#125;</span><span class="subst">&#123;<span class="number">2</span>&#125;</span><span class="subst">&#123;<span class="number">3</span>&#125;</span>测试不通过&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_tools_add3</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">7</span> == add(<span class="number">3</span>, <span class="number">4</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;用例<span class="subst">&#123;<span class="number">3</span>&#125;</span><span class="subst">&#123;<span class="number">4</span>&#125;</span><span class="subst">&#123;<span class="number">7</span>&#125;</span>测试通过&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;用例<span class="subst">&#123;<span class="number">3</span>&#125;</span><span class="subst">&#123;<span class="number">4</span>&#125;</span><span class="subst">&#123;<span class="number">7</span>&#125;</span>测试不通过&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_tools_add4</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">9</span> == add(<span class="number">4</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;用例<span class="subst">&#123;<span class="number">4</span>&#125;</span><span class="subst">&#123;<span class="number">5</span>&#125;</span><span class="subst">&#123;<span class="number">9</span>&#125;</span>测试通过&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;用例<span class="subst">&#123;<span class="number">4</span>&#125;</span><span class="subst">&#123;<span class="number">5</span>&#125;</span><span class="subst">&#123;<span class="number">9</span>&#125;</span>测试不通过&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/effd9d427e9c40d0a3cb2aa4b83a27c3.png" alt="img"></p><p><strong>总结一下</strong>：</p><ol><li>unittest是Python自带的单元测试框架，我们可以用其来作为我们自动化测试框架的用例组织执行框架。</li><li>unittest的流程：写好TestCase，然后由TestLoader加载TestCase到TestSuite，然后由TextTestRunner来运行TestSuite，运行的结果保存在TextTestResult中，我们通过命令行或者unittest.main()执行时，main会调用TextTestRunner中的run来执行，或者我们可以直接通过TextTestRunner来执行用例。</li><li>一个class继承unittest.TestCase即是一个TestCase，其中以 <code>test</code> 开头的方法在load时被加载为一个真正的TestCase。</li><li>verbosity参数可以控制执行结果的输出，<code>0</code> 是简单报告、<code>1</code> 是一般报告、<code>2</code> 是详细报告。</li><li>可以通过addTest和addTests向suite中添加case或suite，可以用TestLoader的loadTestsFrom__()方法。</li><li>用 <code>setUp()</code>、<code>tearDown()</code>、<code>setUpClass()</code>以及 <code>tearDownClass()</code>可以在用例执行前布置环境，以及在用例执行后清理环境</li><li>我们可以通过skip，skipIf，skipUnless装饰器跳过某个case，或者用TestCase.skipTest方法。</li><li>参数中加stream，可以将报告输出到文件：可以用TextTestRunner输出txt报告，以及可以用HTMLTestRunner输出html报告。</li></ol><h2 id="pytest框架"><a href="#pytest框架" class="headerlink" title="pytest框架"></a>pytest框架</h2><h3 id="pytest"><a href="#pytest" class="headerlink" title="pytest"></a>pytest</h3><ol><li>简单灵活，容易上手;支持参数化; 测试用例的skip和xfail 处理;</li><li>能够支持简单的单元测试和复杂的功能测试，还可以用来做 selenium/appium等自动化测试、接口自动化测试 (pytest+requests);</li><li>pytest具有很多第三方插件，并且可以自定义扩展， 比较好 用的如 pytest-allure(完美html测试报告生成) pytest-xdist (多CPU分发)等;</li><li>可以很好的和jenkins集成;</li><li>等等</li></ol><p><strong>安装</strong></p><p>导入相关依赖库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install –U pytest 安装pytest，U表示升级,也可取消-U</span><br><span class="line">pip install sugar</span><br><span class="line">pip install pytest-rerunfailures</span><br><span class="line">pip install pytest-xdist</span><br><span class="line">pip install pytest-assume</span><br><span class="line">pip install pytest-html …</span><br><span class="line">pip list查看</span><br><span class="line">pytest --version</span><br><span class="line">pytest –h 帮助</span><br></pre></td></tr></table></figure><p><strong>pytest的框架结构</strong><br>Import pytest 类似的setup,teardown同样更灵活，还有个session()</p><p>模块级 (setup_module/teardown_module) 不在类中的函数有用<br>函数级 (setup_function/teardown_function) 不在类中的函数有用<br>类级 (setup_class/teardown_class)只在 类中前后运行一次。<br>方法级 (setup_method/teardown_methond) 运行在类中方法始末**</p><p><strong>执行方式</strong></p><p>pytest的执行方式<br>Pytest/py.test(终端，命令行，pycharm可配置pytest方式执行)</p><ol><li>Pytest –v (最高级别信息—verbose)</li><li>pytest -v -s filename 3.Pytest-q (静默)<br>(输出打印)<br>多种执行方式<br>1.pytest将在当前目录及其子目录中运行test _ <em> .py或</em> test.py形 式的所有文件。*<br>2.以test开头的函数，以Test开头的类，以test开头的方法。所有包 package都要有_init.py文件。<br>3.Pytest可以执行unittest框架写的用例和方法</li></ol><p><strong>pytets执行测试用例</strong></p><p>1：py测试文件必须以test（test_xxx）开头（或者以test结尾）<br>2：测试类必须以Test开头，并且不能有init方法——-测试类Test开头<br>3：测试方法必须以test开头<br>4：断言必须使用assert</p><p><strong>一般做项目是新建package包</strong></p><p>项目文件<br>　lib库文件（登录接口源代码，其他接口公共的类,封装的库，登录的，订单的）（包）<br>　data文件（参数化数据，excel文件，yaml文件，csv文件—-测试文件，用例，文档）(可以是普通文件夹)<br>　test_case文件（放测试用例的 ）（包）<br>　test_func01.py（测试用例，写的最好见名知意）<br>　report文件（存放测试报告的普通文件夹）<br>　config（配置文件）</p><h3 id="pytest标记"><a href="#pytest标记" class="headerlink" title="pytest标记"></a>pytest标记</h3><p>由于某种原因（如test_func2的功能尚未开发完成），我们只想执行指定的测试函数。在pytest中有几种方式可以解决：</p><p>第一种，显式指定函数名，通过：：标记test_no_mark.py::test_func1</p><p>第二种，使用模糊匹配，使用-k选项标识。pytest -k func1 test_no_mark.py</p><p>第三种，使用 pytest.mark在函数上进行标记</p><p>给用例打标签</p><p>注册标签名，通过.ini配置文件，格式如下：</p><ul><li>[pytest]</li><li>markers =</li><li>do: do</li><li>undo: undo</li><li>在用例上打标记</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.mark.do</span><br><span class="line">deftest01():</span><br><span class="line">print(&#x27;test01&#x27;)</span><br><span class="line">@pytest.mark.undo</span><br><span class="line">def test02():</span><br><span class="line">print(&#x27;test02&#x27;)</span><br></pre></td></tr></table></figure><p>创建pytest.ini文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[test]</span></span><br><span class="line"><span class="attr">markers</span>=</span><br><span class="line">do:do</span><br><span class="line">undo:do</span><br></pre></td></tr></table></figure><h3 id="pytest函数"><a href="#pytest函数" class="headerlink" title="pytest函数"></a>pytest函数</h3><p>函数级别的测试用例必须test_开头：如下test_tc01，test_tc02两个测试用例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_tc01</span>():　　　　<span class="comment">#定义函数类型测试用例　　</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span>+<span class="number">1</span>==<span class="number">2</span>  　　<span class="comment">#断言</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_tc02</span>():</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span>+<span class="number">1</span>==<span class="number">3</span>  　　<span class="comment">#断言</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        pytest.main([<span class="string">&quot;test_func01.py&quot;</span>])        <span class="comment">#我主动运行我的pytest框架(自动调用所有的test测试函数，按照顺序依次运行，test开头的用例自动识别）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>工作一般以类位单元，一个模块一个类，登录类，订单类，购物类</p><p>类级别的测试l类必须以Test开头，并且类李不能有init方法，类里面的函数都是test_开头</p><p>封装好函数和类就行，其他的交给框架，设置好，框架帮你自动组织怎么运行</p><p>封装为了分层，后面更好维护，代码结构整洁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test_login</span>():  　　　　　　　　　　　　<span class="comment">#登录模块的测试类</span></span><br><span class="line">　　<span class="keyword">def</span> <span class="title function_">test_login01</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---test_login01----&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line">　　<span class="keyword">def</span> <span class="title function_">test_login02</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---test_login02----&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">　　pytest.main([<span class="string">&quot;test_func01.py&quot;</span>,<span class="string">&quot;-s&quot;</span>])  <span class="comment">#框架自己调用函数　　需要打印对应的信息，需要在列表里面加-s</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>自动化测试里面的环境初始化与清除</strong></p><p>环境初始化目的：清空测试环境的垃圾数据，前置条件</p><p>需不需要分层：需要。比如：课程模块：课程模块的初始化需要</p><p>1：删除所有的课程</p><p>2：新增我们的一些课程（这个给修改/查询/删除接口使用）模块级别的（大的课程模块第一件事就是删除以前的课程）</p><p>干掉数据后假如需要删除课程，这个接口需要单独的fixture的初始化，增加课程才能删除，其他的接口不需要这个fixture初始化，）</p><p>分层：模块层次的初始化，某个接口也需要初始化——框架的分层</p><p>条件初始化要和接口挂钩，接口该怎么就要怎么设计</p><p>环境初始化和清除，</p><p>一头一尾，两个不同概念，（环境的初始化也可以是清除数据）一个接口可以多个级别的fixture，可以</p><p>分布式：</p><p>1：并行执行 2：分布式</p><p>优化运行时间：分布式，（搭建环境麻烦）</p><p>什么是环境初始化：</p><p>做这个用例之前想要做个操作，初始化动作，比如登录，首先需要连上这个项目(要先能ping通)，环境初始化–比如课程新增需要数据全部清空，也是环境初始化。</p><p>功能测试：保证测试环境数据和跑什么系统的，或者后台有什么进程执行，或者项目里面测试这功能，功能里面有没有垃圾数据要清除　　做个初始化</p><p>unittest：最基础的框架，python自带（环境初始化和数据清除用setup和teardown）</p><p>jemeter：也有环境清除和初始化</p><p>不管做什么测试比如（功能，自动化，性能）都要对当前测试环境初始化，做完后要垃圾数据进行回收（特别是自动化，不然很多用例明明是对的会失败）每次做一个场景，模块的时候，看看模块有没有需要前置的或者环境清除的步骤（基本操作流程）。</p><p>pytest是unittest的升级版，对环境清除操作非常灵活（分层分级）</p><p>pytest：fixture操作类进行环境初始化 @fixture这样的一个装饰器</p><p>pytest的fixture操作</p><p>环境初始化与清除</p><p>pytest提供的fixture实现unitest中的setup/teardown功能，可以在每次执行case之前初始化数据</p><p>不同的是，fixture可以只在执行某几个特定case前运行，只需要在运行case前调用即可，比setup/teardown使用灵活</p><p>pytest的初始化和清除可以类里面写个setup_class方法做，以类为单元，模块，包，方法为单元都可以，也可以用fixture来做</p><p><strong>pytest前置和后置条件（环境初始化与清除）</strong></p><p>环境初始化</p><p>1：清除以前的数据</p><p>2：测试的时候不是每个接口都要执行，可以定制化执行，固定执行某些接口，先执行删除用例，但是数据已经被清除了，无法删除，修改–需要新增一批测试数据，所以这时候需要环境初始化和清除的想法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Test_login</span>(): <span class="comment">#登录模块的测试类</span></span><br><span class="line">       <span class="comment">#该测试类---有个前置的操作（初始化）</span></span><br><span class="line">       <span class="keyword">def</span> <span class="title function_">setup_class</span>(<span class="params">self</span>): <span class="comment">#类级别的初始化--可选项</span></span><br><span class="line">           <span class="comment">#一个项目，先登录，再购物，登录就是购物类的前置条件，可以放在setup_class里面</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&quot;执行测试类之前，我需要执行操作&quot;</span>)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">def</span> <span class="title function_">test_login01</span>(<span class="params">self</span>):</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&quot;---test_login01----&quot;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">2</span></span><br><span class="line">       <span class="keyword">def</span> <span class="title function_">test_login02</span>(<span class="params">self</span>):</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&quot;---test_login02----&quot;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == <span class="number">3</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self</span>):　<span class="comment">#看业务本身需不需要初始化和清除环境，--可选项</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&quot;------该测试类的环境清除-----&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">       pytest.main([<span class="string">&quot;test_func01.py&quot;</span>,<span class="string">&quot;-s&quot;</span>]) </span><br></pre></td></tr></table></figure><p><strong>pyets种有四种级别的setup和teardown</strong></p><p>1：setup_module和teardown_module,在整个测试用例所在的文件中所在的文件中所有的方法运行前和运行后运行，只运行一次—模块的<br>2：setup_class和teardown_class,在整个测试文件中的一个class中所有的用例的签后运行 ——class类<br>3：setup_method和teardown_method,在class内的每个方法运行前后运行 ————-方法的<br>4：setup_function和teardown_function,在非class下属的每个测试方法的前后运行 ——函数的分层分级（不同级别有不同方法）</p><h3 id="pytest参数"><a href="#pytest参数" class="headerlink" title="pytest参数"></a>pytest参数</h3><p>在pytest 中，也可以使用参数化测试，即每组参数都独立执行一次测试。</p><p>使用的工具就是 pytest.mark.parametrize（argnames，argvalues)。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="comment">#列表</span></span><br><span class="line">data1 =[<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;456&#x27;</span>]</span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;pwd&#x27;</span>,data1</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">pwd</span>):</span><br><span class="line">    <span class="built_in">print</span>(pwd)</span><br><span class="line"><span class="comment">#元组</span></span><br><span class="line">data2 = [</span><br><span class="line">    (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">]</span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;a,b,c&#x27;</span>,data2</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">a,b,c</span>):</span><br><span class="line">    <span class="built_in">print</span>(a,b,c)</span><br><span class="line"><span class="comment">#字典</span></span><br><span class="line">data3 = (</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;pwd&#x27;</span>:<span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">3</span>,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;4@qq.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;pwd&#x27;</span>,data3</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test3</span>(<span class="params">dic</span>):</span><br><span class="line">    <span class="built_in">print</span>(dic)</span><br><span class="line"><span class="comment">#id</span></span><br><span class="line">data4=[</span><br><span class="line">    pytest.param(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="built_in">id</span>=<span class="string">&quot;(a+b):pass&quot;</span>),<span class="comment"># id的值可以自定义，只要方便理解每个用例是干什么的即可</span></span><br><span class="line">    pytest.param(<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="built_in">id</span>=<span class="string">&quot;(a+b):fail&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestParametrize</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&#x27;a,b，expect&#x27;</span>，data_1</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_parametrize_l</span>(<span class="params">self，a，b， expect</span>):</span><br><span class="line">    <span class="keyword">assert</span> add(a,b) == expect</span><br><span class="line"><span class="comment">#列表</span></span><br></pre></td></tr></table></figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a><strong>读取文件</strong></h3><p><strong>Selenium读取csV文件</strong></p><ul><li>CSV文件就是逗号分隔的文本文件。</li><li>使用python的csv模块来处理csv文件</li><li>结合pytest的参数化处理方式来，实现ddt</li><li>实例</li></ul><p>创建CSV文件，py文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wqaq,sced,cxx,sdss</span><br><span class="line">123,456,789,000</span><br><span class="line">qwe,qaz,qsx,qdv</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test_csv.csv&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lst = csv.reader(f)</span><br><span class="line">        my_data = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> lst:</span><br><span class="line">            my_data.extend(row)</span><br><span class="line">        <span class="keyword">return</span> my_data</span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;name&#x27;</span>,get_data(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test01</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-sv&#x27;</span>,<span class="string">&#x27;test_csv.py&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>Selenium读取json文件</strong></p><ul><li>使用python的json模块来处理json文件</li><li>结合pytest的参数化处理方式来，实现ddt</li><li>实例</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Tom&quot;</span><span class="punctuation">,</span><span class="string">&quot;Kite&quot;</span><span class="punctuation">,</span><span class="string">&quot;Jod&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test_json.json&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lst = []</span><br><span class="line">        data = json.load(f)</span><br><span class="line">        lst.extend(data[<span class="string">&#x27;key&#x27;</span>])</span><br><span class="line">        <span class="keyword">return</span> lst</span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;name&#x27;</span>,get_data(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test01</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-sv&#x27;</span>,<span class="string">&#x27;test_json.py&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>Selenium读取Excel文件</strong></p><ul><li>安装xlrd模块</li><li>使用xlrd模块来处理excel文件</li><li>结合pytest的参数化处理方式来，实现ddt</li><li>实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    filename = <span class="string">&#x27;test_excel.xls&#x27;</span></span><br><span class="line">    wb = xlrd.open_workbook(filename)</span><br><span class="line">    sheet = wb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">    rows = sheet.nrows</span><br><span class="line">    cols = sheet.ncols</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">            cell_data = sheet.cell_value(row, col)</span><br><span class="line">            lst.append(cell_data)</span><br><span class="line">    <span class="keyword">return</span> lst</span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;name&#x27;</span>, get_data(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-sv&#x27;</span>,<span class="string">&#x27;test_excel.py&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>Selenium读取MySql数据库文件</strong></p><ul><li>安装mysqlclient模块</li><li>获得数据库连接</li><li>查询数据</li><li>实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line">conn = MySQLdb.connect(</span><br><span class="line">    host=<span class="string">&quot;192.168.0.104&quot;</span>,</span><br><span class="line">    user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    password=<span class="string">&quot;0000&quot;</span>,</span><br><span class="line">    database=<span class="string">&quot;mydb1&quot;</span>,</span><br><span class="line">    charset=<span class="string">&quot;utf8&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    query_sql = <span class="string">&#x27;select * from user&#x27;</span></span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        cursor.execute(query_sql)</span><br><span class="line">        r = cursor.fetchall()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> r:</span><br><span class="line">            u = (x[<span class="number">0</span>],x[<span class="number">1</span>],x[<span class="number">2</span>])</span><br><span class="line">            lst.append(u)</span><br><span class="line">        <span class="keyword">return</span> lst</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;username,birthday,sex&#x27;</span>, get_data(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testl</span>(<span class="params">username,birthday,sex</span>):</span><br><span class="line">    <span class="built_in">print</span>(username,birthday,sex)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&#x27;-sv&#x27;</span>,<span class="string">&#x27;test_mysql.py&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>Selenium  ddt(用处不多)</strong></p><ul><li>安装ddt模块</li><li>使用@ddt、@data、@unpack、@file_data加载数据</li><li>实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt,data,unpack,file_data</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    testdata = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kite&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>&#125;]</span><br><span class="line">    <span class="keyword">return</span> testdata</span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestCase</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 读取元组数据-单组元素</span></span><br><span class="line"><span class="meta">    @data(<span class="params"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="comment"># 读取元组数据-多组元素</span></span><br><span class="line"><span class="meta">    @data(<span class="params">(<span class="params"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span>),(<span class="params"><span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="comment"># 读取元组数据-拆分数据</span></span><br><span class="line"><span class="meta">    @data(<span class="params">(<span class="params"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span>),(<span class="params"><span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span>)</span>)</span></span><br><span class="line"><span class="meta">    @unpack</span></span><br><span class="line">    <span class="comment"># 拆分数据</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test3</span>(<span class="params">self,value1,value2,value3</span>):</span><br><span class="line">        <span class="built_in">print</span>(value1,value2,value3)</span><br><span class="line">    <span class="comment"># 列表</span></span><br><span class="line"><span class="meta">    @data(<span class="params">[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kite&#x27;</span>,<span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>&#125;]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test4</span>(<span class="params">self,value</span>):</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="comment"># 字典</span></span><br><span class="line"><span class="meta">    @data(<span class="params">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;20&#x27;</span>&#125;,&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kite&#x27;</span>,<span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;30&#x27;</span>&#125;</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test5</span>(<span class="params">self,value</span>):</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="comment"># 字典-拆分</span></span><br><span class="line"><span class="meta">    @data(<span class="params">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;20&#x27;</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kite&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;30&#x27;</span>&#125;</span>)</span></span><br><span class="line"><span class="meta">    @unpack</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test6</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        <span class="built_in">print</span>(name,age)</span><br><span class="line">    <span class="comment"># 变量或者方法调用</span></span><br><span class="line">    testdata = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;,&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kite&#x27;</span>,<span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>&#125;]</span><br><span class="line">    <span class="comment"># @data（*testdata)</span></span><br><span class="line"><span class="meta">    @data(<span class="params">get_data(<span class="params"></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test7</span>(<span class="params">self,value</span>):</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="comment"># 读文件</span></span><br><span class="line"><span class="meta">    @file_data(<span class="params">os.getcwd(<span class="params"></span>)+<span class="string">&#x27;/test_json.json&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test8</span>(<span class="params">self, value2</span>):</span><br><span class="line">        <span class="built_in">print</span>(value2)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="fixture"><a href="#fixture" class="headerlink" title="fixture"></a>fixture</h3><p><strong>unittest setup 和 teardown 简介</strong></p><p>学过 unittest 的都知道里面用前置和后置setup和teardown 非常好用。</p><ul><li>在每次用例开始前和结束后都去执行一次。</li><li>当然还有更高级一点的 setupClass 和 teardownClass，需配合 @classmethod 装饰器一起使用。</li><li>在做 selenium 自动化的时候，它的效率尤为突出，可以只启动一次浏览器执行多个用例。</li></ul><ol><li>模块级（setup_module/teardown_module）开始于模块始末，全局的</li><li>函数级（setup_function/teardown_function）只对函数用例生效（不在类中）</li><li>类级（setup_class/teardown_class）只在类中前后运行一次(在类中)</li><li>方法级（setup_method/teardown_method）开始于方法始末（在类中）</li><li>类里面的（setup/teardown）运行在调用方法的前后</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="comment">#函数级别的@pytest.fixture()初始化操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture() </span><span class="comment">#标记函数是个初始化操作，标记后需要传给每个函数statr_func这个函数名才会执行初始化操作（函数级别的）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">statr1_func</span>():</span><br><span class="line"></span><br><span class="line"><span class="comment">#这不是测试函数，一个普通函数,pytest执行用例只能识别test开头的方法和函数，所以pytest.main不会执行(不参加pytest用例)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------初始化操作1------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">statr2_func</span>():</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------初始化操作2------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#fixture:有哪些操作（可以多个初始化可以一起调，需要两个初始化，需要连接，需要登录）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这种写法很方便，函数需要statr_func1函数做一个初始化操作可以调用statr_func1这个函数，---def test_001(statr1_func):</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要其他初始化方法可以选择性调用其他初始化函数，传递函数名就行（灵活选择）----def test_002(statr2_func):</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#函数初始化操作需要传递几个函数也可以多个函数名传递--def test_003(statr2_func,statr1_func):</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方便灵活</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_001</span>(<span class="params">statr1_func</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----test01------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_002</span>(<span class="params">statr2_func</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----test02 ------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_003</span>(<span class="params">statr2_func,statr1_func</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----test03 ------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    pytest.main([<span class="string">&quot;test_pytest.py&quot;</span>,<span class="string">&quot;-s&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>类级别的初始化class，可以使用setup做初始化，也可以使用fixture做初始化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="meta">      @pytest.fixture(<span class="params">scope=<span class="string">&quot;class&quot;</span></span>)  </span><span class="comment">#类级别的初始化函数  scope=&quot;class&quot; 就是把这个初始化定义成类级别的</span></span><br><span class="line">      <span class="keyword">def</span> <span class="title function_">statr1_func</span>():</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;------初始化操作1------&quot;</span>)</span><br><span class="line">      <span class="keyword">class</span> <span class="title class_">Test_00</span>:　<span class="comment">#需要执行 Test_00测试类，需要做初始化(可以setup_class)</span></span><br><span class="line">          <span class="comment"># def setup_class(self):</span></span><br><span class="line">          <span class="comment"># print(&quot;类内部的初始化,&quot;)#只对类有用,类级别的，类里只做一次(几个类的初始化操作一样这种不适合，需要重复写)</span></span><br><span class="line">            <span class="comment">#fixture初始化类就是避免重复代码</span></span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">test_001</span>(<span class="params">self,statr1_func</span>):</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;-----test01------&quot;</span>)</span><br><span class="line"> </span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">test_002</span>(<span class="params">self,statr1_func</span>):</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;-----test02 ------&quot;</span>)</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">          pytest.main([<span class="string">&quot;test_pytest01.py&quot;</span>,<span class="string">&quot;-s&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类级别初始化fixture，虽然test_001和test_002都调用了statr1_func这个类级别的初始化函数，但是执行类测试用例的时候只执行statr1_func初始函数一次<br>多个类都可以调用statr1_func这个类级别的初始化方法,调用的时候最好放在类里的第一个函数，后面的函数可以不传(因为对应的是类级别的初始化)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="meta">     @pytest.fixture(<span class="params">scope=<span class="string">&quot;class&quot;</span></span>)  </span><span class="comment">#类级别的初始化函数</span></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">statr1_func</span>():</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;------初始化操作1------&quot;</span>)</span><br><span class="line">     <span class="comment">#一个模块里面有函数用例也有类的用例怎么做：（class级别的初始化只对类有用，对函数没用）</span></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">test_003</span>(<span class="params">statr1_func</span>):  <span class="comment">#测试函数,</span></span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;-----test03------&quot;</span>)</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">class</span> <span class="title class_">Test_00</span>:   <span class="comment">#需要执行test00测试类，需要做初始化(可以setup_class)</span></span><br><span class="line">         <span class="keyword">def</span> <span class="title function_">test_001</span>(<span class="params">self,statr1_func</span>):</span><br><span class="line">             <span class="built_in">print</span>(<span class="string">&quot;-----test01------&quot;</span>)</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">def</span> <span class="title function_">test_002</span>(<span class="params">self,statr1_func</span>):</span><br><span class="line">             <span class="built_in">print</span>(<span class="string">&quot;-----test02 ------&quot;</span>)</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">         pytest.main([<span class="string">&quot;test_pytest01.py&quot;</span>,<span class="string">&quot;-s&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>初始化方法statr1_func定义成class类级别的，函数级别的测试测试用例test__003调用初始化函数会执行一次，<br>　　class类级别的测试用例Test_00调用初始化函数会执行一次（一共执行两次）<br>　　看级别的，整个模块的级别的化最好用module，否则有问题，fixture可以做return，会有返回值的，对应级别来做，<br>执行结果：<br>　test_pytest01.py<br>　———初始化操作1———<br>　———test03———<br>　———初始化操作1———<br>　———test01———<br>　———test02 ———</p><p><strong>类级别初始化实际代码：初始化操作是登录操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#课程模块的测试类</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> lib.api_lib.lesson <span class="keyword">import</span> Lesson</span><br><span class="line"><span class="keyword">from</span> lib.api_lib.lesson <span class="keyword">import</span> Login</span><br><span class="line"><span class="keyword">from</span> tools.execlMethod <span class="keyword">import</span> get_excelData</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="meta">   @pytest.fixture(<span class="params">scope=<span class="string">&quot;class&quot;</span></span>) 　　</span><span class="comment">#类级别的初始化函数</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">start_func</span>():</span><br><span class="line">      <span class="keyword">global</span> sessionid</span><br><span class="line">      sessionid = Login().login(<span class="string">&#x27;&#123;&quot;username&quot;:&quot;auto&quot;,&quot;password&quot;:&quot;sdfsdfsdf&quot;&#125;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Test_lesson</span>:</span><br><span class="line">   <span class="comment">#1:课程新增接口,前置条件登录(封装完一个方法后想办法做数据驱动)，课程增加需要通过excel表用例来做</span></span><br><span class="line"><span class="meta">   @pytest.mark.parametrize(<span class="params"><span class="string">&quot;inData,repsData&quot;</span>, get_excelData(<span class="params"><span class="string">&#x27;2-课程模块&#x27;</span>, <span class="number">2</span>, <span class="number">26</span></span>)</span>)</span></span><br><span class="line">      <span class="keyword">def</span> <span class="title function_">test_lesson_add</span>(<span class="params">self,start_func,inData,repsData</span>):</span><br><span class="line">        reps=Lesson(sessionid).lesson_add(inData)</span><br><span class="line">        <span class="built_in">print</span>(reps)</span><br><span class="line">        <span class="keyword">assert</span> reps[<span class="string">&quot;retcode&quot;</span>]==json.loads(repsData)[<span class="string">&quot;retcode&quot;</span>]</span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">      pytest.main([<span class="string">&quot;test_lesson01.py&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;--alluredir&quot;</span>, <span class="string">&quot;../report/tmp&quot;</span>])</span><br><span class="line">      os.system(<span class="string">&quot;allure serve ../report/tmp&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>模块级别的初始化mudule，不管是类还是方法@pytest.fixture(scope=“module”)模块（module）级别的初始化，（整个模块所有的类所有的东西要做一步操作，可以使用module这个模式）只在模块运行前面只做一次，后面不做了，哪怕多调用也没用，一个模块里面有test_003函数测试用例，也有classTest_00类级别的测试用例，定义一个模块级别的初始化函数statr1_func函数里面调用初始化方法def test_003(statr1_func):</p><p>和类里面的方法调用初始化方法</p><p>test_001(self,statr1_func):，test_001(self,statr1_func):</p><p>整个模块执行的时候初始化函数都只执行一次（不管你这个模块里面调用多少次）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="meta">        @pytest.fixture(<span class="params">scope=<span class="string">&quot;module&quot;</span></span>)  </span><span class="comment">#模块级别的初始化函数</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">statr1_func</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;------初始化操作1------&quot;</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment">#一个模块里面有函数用例也有类的用例怎么做：（class级别的初始化只对类有用，对函数没用）</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">test_003</span>(<span class="params">statr1_func</span>):  　<span class="comment">#测试函数,</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-----test03------&quot;</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Test_00</span>:   </span><br><span class="line"><span class="comment">#需要执行test00测试类，需要做初始化(可以setup_class)</span></span><br><span class="line">            <span class="comment"># def setup_class(self):</span></span><br><span class="line">            <span class="comment"># print(&quot;类内部的初始化,&quot;) 　</span></span><br><span class="line">            <span class="comment"># 只对类有用,类级别的，类里只做一次(几个类的初始化操作一样这种不适合，需要重复写)</span></span><br><span class="line">            <span class="comment"># fixture初始化类就是避免重复代码</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">test_001</span>(<span class="params">self,statr1_func</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;-----test01------&quot;</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">test_001</span>(<span class="params">self,statr1_func</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;-----test02 ------&quot;</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">            pytest.main([<span class="string">&quot;test_pytest01.py&quot;</span>,<span class="string">&quot;-s&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">执行结果：test_pytest01.py</span><br><span class="line">------初始化操作<span class="number">1</span>------</span><br><span class="line">-----test03------</span><br><span class="line">.-----test01------</span><br><span class="line">.-----test02 ------</span><br></pre></td></tr></table></figure><p>在这个模块下面所有的都会调用（包级别的，包里面运行前做个环境清除）需要在testcase文件夹里面创建一个conftest.py模块，这个固定名称，pytest自动识别这个名称</p><p>testcase里面：新增课程前面需要登录，增加课程前面需要清除数据，需要2个级别的初始化，1：登录 2：整个环境的清除test_case（测试用例文件夹）创建一个：conftest.py文件　　里面写包级别的初始化conftest.py文件里也能写类级别和模块级别的初始化，而且不需要调用，这个conftest.py模块是pytest自动识别导入的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> test_case <span class="comment">#文件夹</span></span><br><span class="line">     conftest.py           </span><br><span class="line">         <span class="keyword">import</span> pytest</span><br><span class="line">         <span class="comment">#包级别的初始化，在运行整个包之前做个初始化，包里面不同作用域，每个包里面都可以放一个，每个包里面的操作都可以不一样</span></span><br><span class="line"><span class="meta">         @pytest.fixture(<span class="params">scope=<span class="string">&quot;session&quot;</span>,autouse=<span class="literal">True</span></span>)</span></span><br><span class="line">         <span class="comment">#session级别的处于时候autouse=True默认自动执行</span></span><br><span class="line">         <span class="keyword">def</span> <span class="title function_">start_demo</span>(<span class="params">request</span>):  <span class="comment">#包的开始</span></span><br><span class="line">             <span class="built_in">print</span>(<span class="string">&quot;我是整个包的初始化&quot;</span>)</span><br><span class="line">             <span class="keyword">def</span> <span class="title function_">fin</span>(): </span><br><span class="line">                 <span class="comment">#尾部这是包级别的，整个包做完后做个环境数据的清除    包的结束</span></span><br><span class="line">                 <span class="built_in">print</span>(<span class="string">&#x27;---测试完成，包的数据清除---&#x27;</span>)</span><br><span class="line">             request.addfinalizer(fin)　</span><br><span class="line">             <span class="comment">#回调，当我整个包运行完了后回调fin这个方法</span></span><br><span class="line"><span class="comment">#fixture的参数autouse: bool = False,---自动执行参数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#session的级别，包里面有很多模块，很多模块需要对整个包进行初始化在conftest.py里面做模块的数据初始化和清除（conftest.py只对当前包有用）</p><p><strong>两种调用初始化和清除函数的方式+初始化清除函数的返回值的使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">befor_func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;xxxxxxxxxxxxx测试用例的初始化xxxxxxxxxxxxxxxx&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;zzzzzzzzzzzzzzzzzz测试用例的清除zzzzzzzzzzzzzz&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_001</span>(<span class="params">befor_func</span>):</span><br><span class="line">    <span class="comment">#调用初始化和清除方式一：直接在测试用例里传递初始化清除函数的函数名来调用</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试用例001&quot;</span>)</span><br><span class="line">    res=befor_func　　　　　　　　　　　　　　　　　　　　</span><br><span class="line">    <span class="comment">#如果初始化清除函数有返回值，可以直接这样接收参数来使用</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@pytest.mark.usefixtures(<span class="params"><span class="string">&#x27;befor_func&#x27;</span></span>)　　　　　　　　</span></span><br><span class="line"><span class="comment">#调用初始化和清除方式二：使用usefixtures放在测试用例前面直接调用初始化清除函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_002</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试用例002&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&quot;test1.py&quot;</span>,<span class="string">&#x27;-s&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>pytest前置条件+后置条件的两种写法</strong></p><p>1：使用yield关键字来是实现　　推荐使用这种，因为yield关键字能返回函数的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">befor_func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;xxxxxxxxxxxxx测试用例的初始化xxxxxxxxxxxxxxxx&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">10</span>　　　　　　　　　　　　　　　　　　　　　　　　　　　　</span><br><span class="line">    <span class="comment">#yield后面跟的是测试用例的后置条件，支持用例执行后就执行yield里的内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;zzzzzzzzzzzzzzzzzz测试用例的清除zzzzzzzzzzzzzz&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_001</span>(<span class="params">befor_func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试用例001&quot;</span>)</span><br><span class="line">    res=befor_func</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&quot;test1.py&quot;</span>,<span class="string">&#x27;-s&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2：使用finc()函数来实现　　　　这种就不能返回返回值了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">befor_func</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;xxxxxxxxxxxxx测试用例的初始化xxxxxxxxxxxxxxxx&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fin</span>():　　　　　　　　　　　　　　　　　　　　　　　　</span><br><span class="line">        <span class="comment">#尾部这是后置条件，测试用例执行后就会调用这个函数　　　　　　</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;zzzzzzzzzzzz测试用例的清除zzzzzzzzzzz&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    request.addfinalizer(fin)　　　　　　　　　　　　　　　</span><br><span class="line">    <span class="comment">#回调，当我整个包运行完了后回调fin这个方法　　　　　　　　　　</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_001</span>(<span class="params">befor_func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试用例001&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&quot;test1.py&quot;</span>,<span class="string">&#x27;-s&#x27;</span>])</span><br></pre></td></tr></table></figure><p>16：pytest数据驱动（参数化）　<br>pytest数据驱动的意义：</p><p>参数化（登录用例4条，每一个账号密码都不同，使用框架把4个用例全部执行完，不需要for循环遍历执行，采用数据驱动方案来做）</p><p>pytest内置装饰器@pytest.mark.parametrize可以让测试数据参数化，把测试数据单独管理，类似ddt数据驱动的作用，方便代码和测试数据分离</p><p>@pytest.mark.parametrize(“a”,[1,2,3])：　　　　　　　　参数化传一组参数</p><p>@pytest.mark.parametrize(“a,b”, [(1,2),(3,4),(5,6)]) 　　 参数化传多组参数</p><p>登录账户密码（name和psw不同的用例组合，一个接口几十个用例怎么做——几十组数据——传的参数不同（什么请求方式和各种都一样）可以把name和psw分别采取多组数据进行参数化，数据分离，一个接口跑4次，每次用不同的参数）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="comment">#[(1,2),(3,4),(5,6)]   [1,2,3]</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test_login</span>():  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_class</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;执行测试类之前，我需要执行操作&quot;</span>)</span><br><span class="line"><span class="meta">    @pytest.mark.parametrize(<span class="params"><span class="string">&quot;a&quot;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span>)            </span></span><br><span class="line"> <span class="comment">#(&quot;变量名&quot;,[1,2,3]),数据需要封装成一个列表，多个数据需要封装成列表嵌套元组----数据驱动</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_login01</span>(<span class="params">self,a</span>):                  </span><br><span class="line">        <span class="comment">#数据驱动，一定要把变量名a引入引来，不然无法参数化</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---test_login01----&quot;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == a</span><br><span class="line"><span class="meta">        @pytest.mark.parametrize(<span class="params"><span class="string">&quot;a,b&quot;</span>, [(<span class="params"><span class="number">1</span>,<span class="number">2</span></span>),(<span class="params"><span class="number">3</span>,<span class="number">4</span></span>),(<span class="params"><span class="number">5</span>,<span class="number">6</span></span>)]</span>)    \</span></span><br><span class="line">        <span class="comment">#数据驱动传多组参数</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">test_login02</span>(<span class="params">self,a,b</span>):</span><br><span class="line">             <span class="built_in">print</span>(<span class="string">&quot;---test_login02----&quot;</span>)</span><br><span class="line">             <span class="keyword">assert</span> a + <span class="number">1</span> == b</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">teardown_class</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;------该测试类的环境清除-----&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        pytest.main([<span class="string">&quot;test_func01.py&quot;</span>,<span class="string">&quot;-s&quot;</span>])  </span><br></pre></td></tr></table></figure><p><strong>fixture的自动应用autouse</strong></p><p>平常写自动化用例会写一些前置的fixture操作，用例需要用到就直接传该函数的参数名称就行了。当用例很多的时候，每次都传这个参数，会比较麻烦。<br>fixture里面有个参数autouse，默认是Fasle没开启的，可以设置为True开启自动使用fixture功能，这样用例就不用每次都去传参了</p><p>设置autouse=True<br>autouse设置为True，自动调用fixture功能<br>start设置scope为module级别，在当前.py用例模块只执行一次，autouse=True自动使用[图片]open_home设置scope为function级别，<br>每个用例前都调用一次，自动使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;module&quot;</span>,autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n----开始执行module------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;module : %s&#x27;</span>% request.module.__name__)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------启动浏览器-------&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------结束测试 end!----------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;function&quot;</span>,autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_home</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;function:%s \n--回到首页--&quot;</span>% request.function.__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_01</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----用例01-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_02</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----用例02-----&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&quot;-s&quot;</span>,<span class="string">&quot;autouse.py&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">----开始执行module------</span><br><span class="line">module : autouse</span><br><span class="line">------启动浏览器-------</span><br><span class="line">function:test_01 </span><br><span class="line">--回到首页--</span><br><span class="line">.----用例01-----</span><br><span class="line">function:test_02 </span><br><span class="line">--回到首页--</span><br><span class="line">.----用例02-----</span><br><span class="line">------结束测试 end!----------</span><br></pre></td></tr></table></figure><h3 id="allure"><a href="#allure" class="headerlink" title="allure"></a>allure</h3><p>部署使用<br>Pytest作为一个高扩展性、功能强大的自动化测试框架，自身的测试结果是较为简单的，如果想要一份完整<a href="https://so.csdn.net/so/search?q=测试报告&amp;spm=1001.2101.3001.7020">测试报告</a>需要其他插件的支持。如果你对测试报告要求没那么高，你可以使用 pytest-html 插件，基本覆盖了测试报告的常规内容。</p><p>注意：allure-pytest 从1.7之后已弃用，从2.0版本开始迁移至 allure-python 项目（即使用allure2），另外要运行allure命令行也需要Java的支持。</p><p>Allure提供了一个清晰的全局，涵盖了所涵盖的功能，缺陷聚集的位置，执行时间表，以及许多其他方便的事情。</p><p>独特的模块化和可扩展性，确保你能够进行适当的微调，以使更适合你自己。</p><p>官方文档：Allure Framework</p><p><a href="https://docs.qameta.io/">https://docs.qameta.io/</a></p><p><strong>安装：</strong><br>（1）allure-pytest插件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -U allure-pytest</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>这将安装allure-pytest和allure-python-commons程序包，以生成与allure2兼容的报告数据。</p><p>（2）allure工具：</p><p>官方下载地址：<a href="https://github.com/allure-framework/allure2/releases">https://github.com/allure-framework/allure2/releases</a></p><p>解压软件包(建议直接放到Python文件夹下)，然后添加bin目录到环境变量中，最后使用 allure —version 验证是否安装成功。</p><p>一：pytest自带的报告框架 pytest-html</p><p>二：allure环境搭建（allure是报告库不是python专属的，很全面的框架）-allure报告漂亮</p><p>1：下载allure.zip（压缩包）<br>2：解压allure.zip到一个文件目录<br>3：将allure-2.13.3\bin路径添加到环境变量path<br>4：pip install allure-pytest ——-allure报告本身不是很漂亮，通过allure-pytest这个库可以定制化报告，让报告变得很漂亮<br>5：验证（cmd输入allure）</p><p>三：allure和pytest联合执行生成报告：运行两条语句</p><p>1：执行pytest单元测试，生成的allure报告需要的数据存在/tmp目录</p><p>pytest -sq —alluredir=…/report/tmp #pytest把allure报告的生成的中间文件放到一个临时文件里（pytets生成报告，需要数据，所以先把数据存起来）</p><p>#所有的报告需要数据支持的，数据来源pytest框架本身，结果数据存到一个文件，存在…/report/tmp文件夹#tmp临时文件，一般json格式</p><p>2：执行命令，生成测试报告</p><p>allure generate …/report/tmp -o …/report/report -clean #allure指令生成对应报告</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a><strong>描述</strong></h3><div class="table-container"><table><thead><tr><th style="text-align:center">使用方法</th><th style="text-align:center">参数值</th><th style="text-align:center">参数值</th></tr></thead><tbody><tr><td style="text-align:center">@allure.epic()</td><td style="text-align:center">epic描述</td><td style="text-align:center">敏捷里面的概念，定义史诗，往下是feature</td></tr><tr><td style="text-align:center">@allure.feature()</td><td style="text-align:center">模块名称</td><td style="text-align:center">功能点的描述，往下是story</td></tr><tr><td style="text-align:center">@allure.story()</td><td style="text-align:center">用户故事</td><td style="text-align:center">用户故事，往下是title</td></tr><tr><td style="text-align:center">@allure.title(用例的标题)</td><td style="text-align:center">用例的标题</td><td style="text-align:center">重命名html报告名称</td></tr><tr><td style="text-align:center">@allure.testcase()</td><td style="text-align:center">测试用例的链接地址</td><td style="text-align:center">对应功能测试用例系统里面的case</td></tr><tr><td style="text-align:center">@allure.issue()</td><td style="text-align:center">缺陷</td><td style="text-align:center">对应缺陷管理系统里面的链接</td></tr><tr><td style="text-align:center">@allure.description</td><td style="text-align:center">用例描述</td><td style="text-align:center">测试用例的描述</td></tr><tr><td style="text-align:center">@allure.step()</td><td style="text-align:center">操作步骤</td><td style="text-align:center">测试用例的步骤</td></tr><tr><td style="text-align:center">@allure.severity()</td><td style="text-align:center">用例等级</td><td style="text-align:center">blocker, critical, normal, minor, trivial</td></tr><tr><td style="text-align:center">@allure.link()</td><td style="text-align:center">链接</td><td style="text-align:center">定义一个链接，在测试报告展现</td></tr><tr><td style="text-align:center">@allure.attachment()</td><td style="text-align:center">附件</td><td style="text-align:center">报告添加附件</td></tr></tbody></table></div><p><strong>allure模拟代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line">      <span class="keyword">import</span> os</span><br><span class="line">      <span class="keyword">class</span> <span class="title class_">Test_login</span>():  </span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">setup_class</span>(<span class="params">self</span>):</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;执行测试类之前，我需要执行操作&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">          @pytest.mark.parametrize(<span class="params"><span class="string">&quot;a&quot;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span>)</span></span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">test_login01</span>(<span class="params">self,a</span>):  </span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;---test_login01----&quot;</span>)</span><br><span class="line">              <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == a</span><br><span class="line"> </span><br><span class="line"><span class="meta">          @pytest.mark.parametrize(<span class="params"><span class="string">&quot;a,b&quot;</span>, [(<span class="params"><span class="number">1</span>,<span class="number">2</span></span>),(<span class="params"><span class="number">3</span>,<span class="number">4</span></span>),(<span class="params"><span class="number">5</span>,<span class="number">6</span></span>)]</span>)</span></span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">test_login02</span>(<span class="params">self,a,b</span>):</span><br><span class="line">               <span class="built_in">print</span>(<span class="string">&quot;---test_login02----&quot;</span>)</span><br><span class="line">               <span class="keyword">assert</span> a + <span class="number">1</span> == b</span><br><span class="line"> </span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">teardown_class</span>(<span class="params">self</span>):</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;------该测试类的环境清除-----&quot;</span>)</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">                          </span><br><span class="line">      <span class="comment">#需要打印对应的信息，需要在列表里面加-s            </span></span><br><span class="line">      <span class="comment">#1:--alluredir ---生成临时文件，测试用例的结果数据放到目录   --alluredir   存放目录</span></span><br><span class="line">          pytest.main([<span class="string">&quot;test_func01.py&quot;</span>,<span class="string">&quot;-s&quot;</span>,<span class="string">&quot;--alluredir&quot;</span>,<span class="string">&quot;../report/tmp&quot;</span>])  </span><br><span class="line">          <span class="comment">#框架自己调用函数</span></span><br><span class="line">          <span class="comment">#通过--alluredir把allure需要的数据存到../report/tmp这个路径下面            </span></span><br><span class="line">          <span class="comment">#../--所在路径的父级别目录是test_case的目录隔壁邻居report文件下tmp，专门放alluer报告生成的需要的数据源</span></span><br><span class="line">          <span class="comment"># 2:临时数据没有报告的，allure generate allure才会生成报告   -----allure生成器生成allure报告--generate allure生成器,cmd指令</span></span><br><span class="line">          <span class="comment">#需要os模块os.system()调用指令可以在local的cmd里面敲</span></span><br><span class="line">          os.system(<span class="string">&quot;allure generate ../report/tmp -o ../report/report --clean&quot;</span>)</span><br><span class="line">          <span class="comment">#os.system(&quot;allure generate 报告需要的数据 -o 报告存放目录 --clean&quot;)</span></span><br><span class="line">          <span class="comment">#-o生成</span></span><br><span class="line">          <span class="comment">#allure generate生成报告指令，把../report/tmp 的文件-o生成报告out out一下，生成的报告放在../report/report</span></span><br><span class="line">          <span class="comment">#--clean把上次报告清除一下用--clean</span></span><br><span class="line">　 　　　　　 <span class="comment">#allure报告生成的是一个服务，（本地服务）和jinkins结合，放在整个里面去集成，放到公共服务器里面          </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>allure报告的优化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line">      <span class="keyword">import</span> os</span><br><span class="line">      <span class="keyword">import</span> allure       </span><br><span class="line"><span class="meta">      @allure.feature(<span class="params"><span class="string">&quot;登录模块&quot;</span></span>)                                                      </span><span class="comment">#一级标题，大模块标题（类标签）</span></span><br><span class="line">      <span class="keyword">class</span> <span class="title class_">Test_login</span>():                                                         </span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">setup_class</span>(<span class="params">self</span>):                                                 </span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;执行测试类之前，我需要执行操作&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">          @allure.story(<span class="params"><span class="string">&quot;登录login01&quot;</span></span>)                                                  </span><span class="comment"># 二级标签（每个接口的标签）</span></span><br><span class="line"><span class="meta">          @allure.title(<span class="params"><span class="string">&quot;login01&quot;</span></span>)                                                     </span><span class="comment"># 标题，每个用例带个标题（报告体现在每个测试用例）(一个接口有几个用例，title用例的标签)</span></span><br><span class="line"><span class="meta">          @pytest.mark.parametrize(<span class="params"><span class="string">&quot;a&quot;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span>)                                      </span></span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">test_login01</span>(<span class="params">self,a</span>):                                                      </span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;---test_login01----&quot;</span>)</span><br><span class="line">              <span class="keyword">assert</span> <span class="number">1</span> + <span class="number">1</span> == a</span><br><span class="line"> </span><br><span class="line"><span class="meta">          @allure.story(<span class="params"><span class="string">&quot;登录login02&quot;</span></span>)                                                </span><span class="comment"># 二级标签，定制allure报告层级</span></span><br><span class="line"><span class="meta">          @allure.title(<span class="params"><span class="string">&quot;login02&quot;</span></span>) </span></span><br><span class="line">          <span class="comment"># 标题，每个用例带个标题（报告体现在每个测试用例）</span></span><br><span class="line"><span class="meta">          @pytest.mark.parametrize(<span class="params"><span class="string">&quot;a,b&quot;</span>, [(<span class="params"><span class="number">1</span>,<span class="number">2</span></span>),(<span class="params"><span class="number">3</span>,<span class="number">4</span></span>),(<span class="params"><span class="number">5</span>,<span class="number">6</span></span>)]</span>)                      </span></span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">test_login02</span>(<span class="params">self,a,b</span>):</span><br><span class="line">               <span class="built_in">print</span>(<span class="string">&quot;---test_login02----&quot;</span>)</span><br><span class="line">               <span class="keyword">assert</span> a + <span class="number">1</span> == b</span><br><span class="line"> </span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">teardown_class</span>(<span class="params">self</span>):                                               </span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;------该测试类的环境清除-----&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">      @allure.feature(<span class="params"><span class="string">&quot;购物模块&quot;</span></span>)</span></span><br><span class="line">      <span class="keyword">class</span> <span class="title class_">Test_Shopping</span>():</span><br><span class="line"><span class="meta">          @allure.story(<span class="params"><span class="string">&quot;shopping&quot;</span></span>)</span></span><br><span class="line"><span class="meta">          @allure.title(<span class="params"><span class="string">&quot;shopping01&quot;</span></span>)</span></span><br><span class="line"><span class="meta">          @pytest.mark.parametrize(<span class="params"><span class="string">&quot;a,b&quot;</span>, [(<span class="params"><span class="number">1</span>, <span class="number">2</span></span>), (<span class="params"><span class="number">3</span>, <span class="number">4</span></span>), (<span class="params"><span class="number">5</span>, <span class="number">6</span></span>)]</span>)</span></span><br><span class="line">          <span class="keyword">def</span> <span class="title function_">test_shopping</span>(<span class="params">self, a, b</span>):</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;---test_login02----&quot;</span>)</span><br><span class="line">              <span class="keyword">assert</span> a + <span class="number">1</span> == b</span><br><span class="line">      <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">          pytest.main([<span class="string">&quot;test_func01.py&quot;</span>,<span class="string">&quot;-s&quot;</span>,<span class="string">&quot;--alluredir&quot;</span>,<span class="string">&quot;../report/tmp&quot;</span>])    </span><br><span class="line">          os.system(<span class="string">&quot;allure generate ../report/tmp -o ../report/report --clean&quot;</span>)</span><br><span class="line">          <span class="comment">#allure报告生成的是一个服务，（本地服务）和jinkins结合，放在整个里面去集成，放到公共服务器里面。</span></span><br></pre></td></tr></table></figure><p><strong>其他知识点</strong><br>测试用例一般写在excel表格文件里面，数据分离（维护好excel就行）</p><p>pytest–从头到尾到报告执行发邮件</p><p>字典是一种存储类型，json是一种格式（完全不同）</p><p><strong>pytest参数解析</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">　pytest.main([<span class="string">&#x27;test_boss.py&#x27;</span>,<span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;-k test_modify_psw&#x27;</span>,<span class="string">&#x27;--alluredir=tmp/my_allure_results&#x27;</span>])</span><br><span class="line"> </span><br><span class="line">　　　　test_boss.py 　　　　　　　　指定测试用例文件，</span><br><span class="line">　　　　-s 　　　　　　　　　　　　 显示<span class="built_in">print</span>语句</span><br><span class="line">　　　　-k test_modify_psw 　　　　 指定某个测试用例</span><br><span class="line"> </span><br><span class="line">　　　　-n 　　　　　　　　　　　　表示用两个进程启动测试脚本</span><br><span class="line"> </span><br><span class="line">　　　　生成报告缓存文件　　--alluredir=tmp/my_allure_results</span><br><span class="line"> </span><br><span class="line">　　　　os.system(<span class="string">&#x27;allure serve tmp/my_allure_results&#x27;</span>)　　　　打开测试报告，命令行需要python 的os模块调用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>pytest的初始化和清除：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line">        <span class="comment">#假设启动被测app的时候需要去填写配置项信息，每个的端口号不同，多终端需要两个appim server</span></span><br><span class="line">        <span class="comment">#这时候setup_module和teardown_module不能传参，搞不定，需要换一种方法做测试用例的初始化和清除，　　　　　　　　　　　</span></span><br><span class="line">    <span class="comment">#setup_module以模块为作用域，不写module以测试用例（测试函数）为作用域</span></span><br><span class="line">        <span class="comment"># def setup_module(): 　　 </span></span><br><span class="line">        <span class="comment">#测试用例之前执行，原始的setup和teardown有个缺陷，里面不能传参数        　　　　　　   </span></span><br><span class="line">        <span class="comment">#默认test级别，每个测试用例执行的时候都会执行一次，希望当前某个模块执行的时候只执行一次（不管里面用例执行多少次）          　　　　　　   </span></span><br><span class="line">        <span class="comment">#setup初始化和tear_down升个级，升级成module模块级别的</span></span><br><span class="line">        <span class="comment">#     print(&quot;启动被测app&quot;)</span></span><br><span class="line">        <span class="comment">#     print(&#x27;连接appium服务&#x27;)</span></span><br><span class="line">        <span class="comment"># def teardown_module():</span></span><br><span class="line">        <span class="comment">#     print(&#x27;关闭被测app&#x27;)</span></span><br><span class="line">        <span class="comment">#     print(&#x27;断开appium服务&#x27;)</span></span><br><span class="line">        <span class="comment">#定义个函数，名字随便取　　使用@pytest.fixture装饰器把这个函数装饰成初始化清除函数</span></span><br><span class="line"><span class="meta">        @pytest.fixture(<span class="params">scope=<span class="string">&#x27;module&#x27;</span></span>)    </span></span><br><span class="line">        <span class="comment">#作用域默认test，初始化，加装饰器，初始化清除函数,autouse=True（自动执行）这种方法不建议使用</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">before_test</span>():                  </span><br><span class="line">            <span class="comment">#初始化函数升级作用域到module模块级别</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;启动被测app&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;连接appium服务&#x27;</span>)</span><br><span class="line">            <span class="keyword">yield</span>   <span class="comment">#后面写清除动作，</span></span><br><span class="line">            after_test()</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#清除函数，清除函数并不会直接被初始化函数使用，我们必须放在初始化函数yiled后面才能回被调用</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">after_test</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;关闭被测app&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;断开appium服务&#x27;</span>)</span><br><span class="line">        <span class="comment">#目前一共有两个port，需要测试两个手机，两个多终端,before_test需要装饰器标记</span></span><br><span class="line">        <span class="comment">#测试用例的参数化</span></span><br><span class="line"><span class="meta">        @pytest.mark.usefixtures(<span class="params"><span class="string">&#x27;before_test&#x27;</span></span>)                        </span></span><br><span class="line">        <span class="comment">#这表示调用某个自定义的初始化函数，括号里面的字符串写被调用函数的名字</span></span><br><span class="line"><span class="meta">        @pytest.mark.parametrize(<span class="params"><span class="string">&#x27;psw&#x27;</span>,[<span class="string">&#x27;boss123&#x27;</span>,<span class="string">&#x27;boss456&#x27;</span>]</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">test_app</span>(<span class="params">psw</span>):                        </span><br><span class="line">            <span class="comment">#测试用例，可能涉及到其他参数,比如需要一些配置信息,测试用例涉及到参数，　　　　　　　　　　　　　　　　　　　　　　</span></span><br><span class="line">            <span class="comment">#多组参数需要使用装饰器pytest.mark.parametrize(数据驱动)，psw传参和形参名字对应</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;测试boss app&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;登录测试账号<span class="subst">&#123;psw&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">            pytest.main([<span class="string">&#x27;pytest_ywt.py&#x27;</span>,<span class="string">&#x27;-s&#x27;</span>])</span><br></pre></td></tr></table></figure><p>pytest之：不只是测试函数test_app能参数化，初始化函数before_test也能参数化。</p><p>重点：</p><p>测试用例的参数化+初始化清除函数的参数化　　</p><p>初始化清除函数的参数化能够实现appium的多终端测试</p><p>初始化清除函数的参数化，方法很多种：</p><p>before_test初始化函数注入参数，因为print(f’连接appium服务{port}’)里面port需要变化的，</p><p>@pytest.fixture(scope=‘module’,params=[(4723,),(4727,)])　　：初始化清除函数的参数化</p><p>始化函数装饰器里面加params参数传参，port=request.param[0] 来调用params里的参数</p><p>#初始化清除函数的参数化：只传单个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=‘module’,params=[(<span class="params"><span class="number">4723</span>,</span>),(<span class="params"><span class="number">4727</span>,</span>)]</span>) </span></span><br><span class="line"><span class="comment">#初始化清除函数的参数化params</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_test</span>(<span class="params">request</span>):</span><br><span class="line">port=request.param[<span class="number">0</span>] 　　　　　　　　　　　　　　</span><br><span class="line"><span class="comment">#param[0]，假如注入多个参数一个port和一个data–需要params传元组，</span></span><br><span class="line"><span class="comment">#params=[(4723,100),(4727,200)],一个参数的话不需要写成列表嵌套元素，　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</span></span><br><span class="line"><span class="comment">#params[0]代表获取元组第一个</span></span><br><span class="line"><span class="built_in">print</span>(“启动被测app”)</span><br><span class="line"><span class="built_in">print</span>(f’连接appium服务&#123;port&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">yield #后面写清除动作，</span></span><br><span class="line"><span class="string">after_test()　　　　　　　　　　　　　　　　　　　　　　　　</span></span><br><span class="line"><span class="string">#request是pytest的对象，我们在用对象里面的方法的时候pycham不会自动帮我们取显示名字，</span></span><br><span class="line"><span class="string">#它也不知道request里面到底什么内容</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">def</span> <span class="title function_">after_test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;关闭被测app&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;断开appium服务&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@pytest.mark.usefixtures(<span class="params"><span class="string">&#x27;before_test&#x27;</span></span>)    </span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&#x27;psw&#x27;</span>,[<span class="string">&#x27;boss123&#x27;</span>,<span class="string">&#x27;boss456&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_app</span>(<span class="params">psw</span>):                                   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;测试boss app&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;登录测试账号<span class="subst">&#123;psw&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        pytest.main([<span class="string">&#x27;pytest_ywt.py&#x27;</span>,<span class="string">&#x27;-s&#x27;</span>])    　　</span><br><span class="line">        <span class="comment">#初始化清除函数的参数化：传多个参数　　　　　　　　　　　　　　</span></span><br><span class="line">        <span class="keyword">import</span> pytest</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">　　　　　@pytest.fixture(scope=<span class="string">&#x27;module&#x27;</span>,params=[(<span class="number">4723</span>,<span class="string">&#x27;xiaomi&#x27;</span>),(<span class="number">4727</span>,<span class="string">&#x27;meizu&#x27;</span>)])  </span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">before_testquest</span>):           </span><br><span class="line">                port=request.param[<span class="number">0</span>]    　　　　　　</span><br><span class="line">                <span class="comment">#param[0]，假如注入多个参数一个port和一个data，需要params传元组，params=[(4723,100),(4727,200)],                        　　　　</span></span><br><span class="line">                <span class="comment">#一个参数的话不需要写成列表嵌套元素，request.params[0]代表获取元组第一个</span></span><br><span class="line">                device=request.param[<span class="number">1</span>]      　　　　</span><br><span class="line">                <span class="comment">#request.param[1]对应元素里面第二个参数，</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;在<span class="subst">&#123;device&#125;</span>启动被测app&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;连接appium服务<span class="subst">&#123;port&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">yield</span>   </span><br><span class="line">                <span class="comment">#后面写清除动作，</span></span><br><span class="line">                after_test()</span><br><span class="line">                <span class="comment">#request是pytest的对象，(固定写法：request.param)</span></span><br><span class="line">　　　　　　　　　 <span class="comment">#我们在用对象里面的方法的时候pycham不会自动帮我们去显示名字，它也不知道request里面到底什么内容</span></span><br><span class="line">```cpp</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">after_test</span>():</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;关闭被测app&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;断开appium服务&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">            @pytest.mark.usefixtures(<span class="params"><span class="string">&#x27;before_test&#x27;</span></span>)                    </span></span><br><span class="line"><span class="meta">            @pytest.mark.parametrize(<span class="params"><span class="string">&#x27;psw&#x27;</span>,[<span class="string">&#x27;boss123&#x27;</span>,<span class="string">&#x27;boss456&#x27;</span>]</span>)</span></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">test_app</span>(<span class="params">psw</span>):           </span><br><span class="line">                                        </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;测试boss app&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;登录测试账号<span class="subst">&#123;psw&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">                pytest.main([<span class="string">&#x27;pytest_ywt.py&#x27;</span>,<span class="string">&#x27;-s&#x27;</span>])</span><br></pre></td></tr></table></figure><p>pytest框架执行代码也能在cmd里面直接输入命令执行<br>xxx\test_case&gt; pytest -s 　　</p><p>在test_case这个目录执行会运行test_case文件里面所有的测试文件（test开头的测试用例）</p><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>设置用例每个模块独立，有什么前置做到模块里面，比如测试10个模块，用相关联来做，不能做分布式(并发执行)</p><p>每个模块独立还能定制执行那个模块，关联性太强做不到</p><p>最好做到每个接口都独立化（前置条件做好）不要做太大关联性的接口</p><p>每一层都能做环境清除和定制化（包，模块。类，函数）分层，为后面mark（定点执行哪些用例）和分布式打基础</p><p>分布式：必须做到用例的隔离（低耦合，高内聚），用例走串行风险很大，很难维护</p><p>3000个请求，全部独立化，然后分布式来做（效率提高几倍–几十倍）</p><p>26：分布式的实现<br>　　分布式的核心点：封装设计：相互独立，登录和课程相互独立，至少模块为单元要相互独立，封装相互独立，接口用例之间最好也相互独立　　才能进行分布式</p><p>一：pytest分布式环境搭建和理论介绍：</p><p>第一步：安装一个库 pip install pytest-xdist 　　分布式运行插件,可以做分布式（这个库有两种运行方式）</p><p>运行方式：</p><p>1：串行，顺序运行，串行运行，从头到尾</p><p>2：并行:pytest-xdist做分布式有两种，一种多核，一种多台机器</p><p>一：多核：单机多核来做（同时跑） 使用-n参数</p><p>电脑多核有假有真：超线程技术（8内核搞成16核），真8核假8核—</p><p>cpu个数：硬件，几个cpu槽，i9900.i710–一般电脑就算一个cpu，单cpu，服务器可能有多个cpu</p><p>核数： 电脑的核数，</p><p>逻辑核数：逻辑核数可以虚拟化，8核可以变成16核（超线程技术）</p><p>多核的话xdist本身的多核的话一般用逻辑核数来做的</p><p>二：多机（可以使用虚拟机）—需要搭环境，多台机器 很麻烦，装环境，下库</p><p>二：测试用例比较多怎么办：分布式 两种情况</p><p>1：量大：多机 （需要文件报告收集还需要搭环境，做起来比较麻烦）</p><p>2：单机多核　　很简单，加-n 参数就行 （做ui和需要一些时间等待的时候时间优化特别明显）</p><p>串行运行：本身是线程去跑的，python就一个进程，里面很多线程，</p><p>走进程的话需要多台机器来做，分量， 用例设计不好会有大问题，数据不对(用例一定要独立化)</p><p>并行和多机：用例一定要设计好，不然数据容易出错，逻辑独立（不能有任何关联，不能有前后关系）　　数据和代码封装时候独立化</p><p>三：分布式运行代码</p><p>#验证单机多核分布式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line">   <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">test_01</span>():</span><br><span class="line">       time.sleep(<span class="number">3</span>)</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;-----test01-----&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">test_02</span>():</span><br><span class="line">       time.sleep(<span class="number">3</span>)</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;-----test01-----&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">       <span class="comment"># pytest.main([&quot;test_xdist.py&quot;,&quot;-sq&quot;])  　　　　　　　　</span></span><br><span class="line">       <span class="comment">#这是串行跑的   6s</span></span><br><span class="line">       pytest.main([<span class="string">&quot;test_xdist.py&quot;</span>, <span class="string">&quot;-sq&quot;</span>,<span class="string">&quot;-n&quot;</span>,<span class="string">&quot;8&quot;</span>]) 　　　　</span><br><span class="line">       <span class="comment">#单机多核并行   加&quot;-n&quot;,&quot;8&quot; 参数  ，用8个核来跑,5.41s,时间少了</span></span><br><span class="line">       <span class="comment">#或者测试用例文件目录下 cmd，输入 pytest test_xdist.py -n 8  也可以    这样cmd里执行看到的结果更直观，</span></span><br><span class="line">       <span class="comment">#多核来跑在ui里面时间提升很大，ui里面很多地方需要sleep，等待元素（有等待的的提升比较大）多核跑更快</span></span><br><span class="line">       <span class="comment">#有等待的情况用多核跑效果越明显</span></span><br></pre></td></tr></table></figure><p>串行运行本身按照线程去跑的，python本身就一个进程，里面很多线程<br>走进程的话，多台机器做比较合适—分量，<br>用例一定要设计好，不然数据容易出错，逻辑独立（不能有任何关联，不能有前后关系）——数据和代码封装时候独立化</p><p>pytest cmd执行多个模块用例：pytest test_xdist.py test_login.py -sq 　　：运行两个.py文件（写多个运行多个）<br>pytest cmd执行多个包的用例：pytest test_xdist test_login -sq 　　：运行test_xdist包和test_login 包<br>还可以运行不同模块的两个包,加包路径 case/test_xdist.py case2/test2_xdist.py</p><p><strong>pytest的用例定制化执行　　mark标签</strong></p><p>所有的接口不需要全部都跑（冒烟，定制化执行某些指定的业务，）　　　　　“-m”,“test_lesson_add”</p><p>一：pytest框架mark标签　　标记非常丰富　　mark标签</p><p>mark标签：对于pytest，我们可以再每一个模块，每一个类，每一个方法和用例前面都加上mark，</p><p>那样我们在pytest运行的时候就可以只运行带有该mark标签的模块，类，用例</p><p>这样的话可以方便我们选择执行自动化时，是执行全部用例，某个模块用例，</p><p>某个流程用例，某个单独用例，总之就是可以某个单独的标签下所有用例</p><p>mark可以标记不同层次的东西（类，函数，方法都可以标记）文件不用标记（本身就可以定制化执行）</p><p>@pytest.mark.lessson_moudle 　　给测试类贴个标签，标签名字叫lessson_moudle标识课程模块，</p><p>各个函数，类都可以贴上标签（类似别称），选择某个标签就运行某一个（灵活方便）</p><p>什么都不选中照常运行，（全部运行，没有限制）</p><p>mark标签pytest运行可能报错，</p><p>PytestUnknownMarkWarning报错:是一个标签的mark警告，整个pytest这么写不识别你，但是不会报错，只是警告，</p><p>消除警告（增加标签栏，相当于标签的声明）</p><p>标签声明写法：teach_sq文件夹里创建一个pytest.ini的文件（pycham需要安装ini插件 file-setting-plugins(搜索ini)社区版似乎不行）</p><p>pycham找不到可以离线装</p><p>teach_sq<br>pytest.ini——-文件内容如下，相当于pytest的mark标签声明一下</p><p><strong>筛选测试用例代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"> </span><br><span class="line"><span class="meta">@pytest.mark.zzzzz</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_001</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test_001&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_002</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test_001&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pytest.main([<span class="string">&quot;test1.py&quot;</span>,<span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;-m&#x27;</span>,<span class="string">&#x27;zzzzz&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="allure报告"><a href="#allure报告" class="headerlink" title="allure报告"></a>allure报告</h2><p><strong>1、基本使用</strong></p><p><strong>&gt;&gt;&gt; 要使allure侦听器能够在测试执行过程中收集结果，只需添加 —alluredir 选项并提供路径即可存储结果。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --alluredir=&lt;directory-with-results&gt;</span><br></pre></td></tr></table></figure><p><strong>单文件python例子(项目根目录,运行后生产一些文件)：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pytest --alluredir ./reports/pytest test01.py</span><br><span class="line"></span><br><span class="line">启动：</span><br><span class="line">allure serve ./reports</span><br></pre></td></tr></table></figure><p>插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pytest-dependency</span><br></pre></td></tr></table></figure><p>如果你运行后进行了用例更改，那么下次运行可能还是会查看到之前记录，可添加 <strong>—clean-alluredir</strong> 选项清除之前记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --alluredir=&lt;directory-with-results&gt; --clean-alluredir</span><br></pre></td></tr></table></figure><p><strong>&gt;&gt;&gt;</strong> 要在测试完成后查看实际报告，你需要使用allure命令行应用程序从结果生成报告。</p><p>（1）在默认浏览器中显示生成的报告</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allure serve &lt;my-allure-results&gt;</span><br><span class="line">allure serve output</span><br></pre></td></tr></table></figure><p>2）要从现有的Allure结果生成报告，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure generate &lt;directory-with-results&gt;</span><br></pre></td></tr></table></figure><p>默认报告将生成到allure-report文件夹，你可以使用 -o 标志更改目标文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure generate &lt;directory-with-results&gt;</span><br></pre></td></tr></table></figure><p>（3）生成报告后，可以在默认系统浏览器中将其打开，只需运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure open &lt;directory-with-report&gt;</span><br></pre></td></tr></table></figure><p>你也可以找到该目录，使用浏览器打开该目录下index.html。注意：有时打开会找不到数据或者乱码，如果你使用的是pycharm，请在pycharm中右击打开。</p><p>（4）如果要删除生成的报告数据，只需运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure report clean</span><br></pre></td></tr></table></figure><p>默认情况下，报告命令将在 <strong>allure-results</strong> 文件夹中查找报告，如果要从其他位置使用报告，则可以使用 <strong>-o</strong> 选项。</p><p>（5）你也可以使用 <strong>allure help</strong> 命令查看更多帮助。</p><p>测试报告，你可以在allure报告中看到所有默认的pytest状态：只有由于一个断言错误而未成功进行的测试将被标记为失败，其他任何异常都将导致测试的状态为坏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#更改测试文件的识别规则</span><br><span class="line">python_files=test_*.py</span><br><span class="line">#更改测试方法的命名规则</span><br><span class="line">python_functions=test_*</span><br><span class="line">#配置生成测试报告#</span><br><span class="line">-m level1只运行level1级别的用例</span><br><span class="line">addopts= --html=./reports/report.html -v --alluredir ./allure_temp</span><br><span class="line">markers=</span><br><span class="line">level1：高级别的用例</span><br><span class="line">level2：低级别的用例</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python框架测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web自动化</title>
      <link href="/2024/01/22/5-Web%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2024/01/22/5-Web%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><strong>web自动化测试的工具</strong></p><p>现在主流的web测试工具我们常用的就是selenium的那一套工具包括</p><ul><li>浏览器一般选择chrome</li><li>浏览器对应的driver(chromedriver)</li><li>Python</li><li>Selenium库</li></ul><p><strong>web自动化测试的环境安装</strong></p><ul><li>浏览器安装 下载浏览器下一步按照就好了</li><li>chromedriver 下载 可以到 <a href="https://npmmirror.com/?login=from_csdn">npmmirror.com/</a></li><li><a href="https://registry.npmmirror.com/binary.html?path=chromedriver/">https://registry.npmmirror.com/binary.html?path=chromedriver/</a>      低版本</li><li>​      高版本</li><li>注：找到和自己浏览器版本适配的driver版本   注：浏览器点击右上角‘…’—&gt;帮助—&gt;关于Google Chrome—&gt;可以看到浏览器的版本，根据当前浏览器的版本下载</li></ul><p>Selenium提供了一个webdriver_manager库，可以帮助自动下载和更新Chrome浏览器的驱动程序chromedriver.exe。您可以按照以下步骤操作：</p><ol><li><p>安装webdriver_manager库。可以在命令行或终端中运行以下命令进行安装：</p></li><li><p>```<br>pip install webdriver_manager</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在Selenium Python脚本中，导入webdriver_manager并使用ChromeDriverManager类来创建ChromeDriver实例。这样，如果您的Chrome浏览器版本发生变化，webdriver_manager将自动下载合适的chromedriver版本，并使用它来运行测试。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from webdriver_manager.chrome import ChromeDriverManager</span><br><span class="line"># 创建ChromeDriver实例</span><br><span class="line">driver = webdriver.Chrome(executable_path=ChromeDriverManager().install())</span><br><span class="line"># 在浏览器中打开网页</span><br><span class="line">driver.get(&#x27;https://www.baidu.com/&#x27;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装selenium包"><a href="#安装selenium包" class="headerlink" title="安装selenium包"></a><strong>安装selenium包</strong></h3><p>Selenium WebDriver是一个第三方模块，并不是Python的标准模块，所以在导入这个模块之前，还需要将这个第三方模块安装到Python的目录中，这样才能使用import或者from…import语句进行导入。</p><p>安装最新版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p>安装指定版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium==版本号</span><br></pre></td></tr></table></figure><p>卸载selenium</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall selenium</span><br></pre></td></tr></table></figure><p><strong>web自动化测试脚本编写的基本步骤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br></pre></td></tr></table></figure><p> <strong>创建驱动浏览器对象并启动浏览器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">浏览器驱动对象 = webdriver.Firefox()</span><br><span class="line">浏览器驱动对象 = webdriver.Chrome()</span><br><span class="line">浏览器驱动对象 = webdriver.Edge()</span><br></pre></td></tr></table></figure><p><strong>编写自动化执行步骤</strong></p><p><strong>打开网页：</strong></p><blockquote><p>浏览器驱动对象.get(“网页链接”)</p></blockquote><p><strong>浏览器窗口最大化：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.maxmimize()</span><br></pre></td></tr></table></figure><p><strong>关闭驱动对象</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器驱动对象.quit()</span><br></pre></td></tr></table></figure><p><strong>刷新窗口</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.refresh() *# 刷新*</span><br></pre></td></tr></table></figure><p><strong>使用 JavaScript 中的 <code>window.scrollTo()</code> 方法来实现滚动</strong></p><p>滚动到底部：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(&quot;window.scrollTo(0, 0);&quot;)</span><br></pre></td></tr></table></figure><p>滚动到页面中间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(f&quot;window.scrollTo(0, &#123;middle&#125;);&quot;)</span><br></pre></td></tr></table></figure><p>滚动到页面顶部：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(&quot;window.scrollTo(0, document.body.scrollHeight);&quot;)</span><br></pre></td></tr></table></figure><p>缓慢滚动到底部：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取页面高度</span></span><br><span class="line">height = driver.execute_script(<span class="string">&quot;return document.body.scrollHeight&quot;</span>)</span><br><span class="line"><span class="comment"># 模拟缓慢下滑操作</span></span><br><span class="line">scroll_speed = <span class="number">500</span>  <span class="comment"># 每次滚动的距离</span></span><br><span class="line">interval = <span class="number">0.01</span>  <span class="comment"># 每次滚动之间的时间间隔</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 缓慢滚动</span></span><br><span class="line">    driver.execute_script(<span class="string">f&quot;window.scrollBy(0, <span class="subst">&#123;scroll_speed&#125;</span>);&quot;</span>)</span><br><span class="line">    time.sleep(interval)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 到达页面底部时退出循环</span></span><br><span class="line">    new_height = driver.execute_script(<span class="string">&quot;return document.body.scrollHeight&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> new_height == height:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    height = new_height</span><br></pre></td></tr></table></figure><h3 id="八大元素"><a href="#八大元素" class="headerlink" title="八大元素"></a>八大元素</h3><ol><li><strong>id</strong></li><li><strong>name</strong></li><li><strong>class_name</strong>（使用元素的class属性）</li><li><strong>xpath</strong>（基于文件路径）</li><li><strong>css</strong>（元素选择器定位）</li><li><strong>tag_name</strong>（元素的标签名称<input …/>）</li><li><strong>link_text</strong>（定位超链接，a标签）</li><li><strong>partail_link_text</strong>（定位超链接，a标签 模糊）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">汇总：</span><br><span class="line">1.基于元素属性特有定有定位：id/name/class_name</span><br><span class="line">2. 基于元素标签名称定位：tag_name</span><br><span class="line">3. 定位超链接文本：link_text/partail_link_text</span><br><span class="line">4. 基于元素路径定位：xpath</span><br><span class="line">5. 基于选择器：css</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;底层代码&quot;&quot;&quot;</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line"></span><br><span class="line">    ID = &quot;id&quot;</span><br><span class="line">    XPATH = &quot;xpath&quot;</span><br><span class="line">    LINK_TEXT = &quot;link text&quot;</span><br><span class="line">    PARTIAL_LINK_TEXT = &quot;partial link text&quot;</span><br><span class="line">    NAME = &quot;name&quot;</span><br><span class="line">    TAG_NAME = &quot;tag name&quot;</span><br><span class="line">    CLASS_NAME = &quot;class name&quot;</span><br><span class="line">    CSS_SELECTOR = &quot;css selector&quot;</span><br></pre></td></tr></table></figure><h4 id="1、id"><a href="#1、id" class="headerlink" title="1、id"></a>1、id</h4><p>HTML规定id属性在HTML文档中必须是唯一的<br>driver.find_element(By.ID, “id名”).send_keys(“输入内容”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 窗口最大化</span></span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">driver.find_element(By.ID, <span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;输入的内容&quot;</span>)</span><br><span class="line">driver.find_element(By.ID, <span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="2、name"><a href="#2、name" class="headerlink" title="2、name"></a>2、name</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(By.NAME, <span class="string">&quot;wd&quot;</span>).send_keys(<span class="string">&quot;输入的内容&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 只获取属性的第一个元素</span></span><br><span class="line">driver.find_element(By.NAME, <span class="string">&#x27;wd&#x27;</span>).send_keys(<span class="string">&quot;软件测试老白&quot;</span>)</span><br><span class="line"><span class="comment"># 获取属性的所有元素</span></span><br><span class="line">driver.find_elements(By.NAME, <span class="string">&#x27;wd&#x27;</span>)[<span class="number">0</span>].send_keys(<span class="string">&quot;软件测试老白&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="3、class-name"><a href="#3、class-name" class="headerlink" title="3、class_name"></a>3、class_name</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(By.CLASS_NAME,<span class="string">&quot;login-top&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 窗口最大化</span></span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line"><span class="comment"># 只获取class属性的第一个元素</span></span><br><span class="line"><span class="comment"># driver.find_element(By.CLASS_NAME,&#x27;nav-search-input&#x27;).send_keys(&quot;2024新年快乐&quot;)</span></span><br><span class="line"><span class="comment"># driver.find_element(By.CLASS_NAME,&#x27;channel-link&#x27;).click()</span></span><br><span class="line"><span class="comment"># 获取class属性的所有元素</span></span><br><span class="line"><span class="comment"># driver.find_elements(By.CLASS_NAME,&#x27;channel-link&#x27;)[4].click()</span></span><br><span class="line"><span class="comment"># for ele in driver.find_elements(By.CLASS_NAME,&#x27;channel-link&#x27;):</span></span><br><span class="line"><span class="comment">#     print(ele.text)</span></span><br><span class="line"><span class="comment"># 错误用法</span></span><br><span class="line">driver.find_element(By.CLASS_NAME,<span class="string">&#x27;icon-bg icon-bg__channel&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="4、tag-name"><a href="#4、tag-name" class="headerlink" title="4、tag_name"></a>4、tag_name</h4><p>通过标签名来定位，一般很少使用<br>如果页面中存在多个相同的标签名，默认返回第一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(By.TAG_NAME,<span class="string">&quot;input&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="5、link-text"><a href="#5、link-text" class="headerlink" title="5、link_text"></a>5、link_text</h4><p>精确匹配超链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(By.LINK_TEXT,<span class="string">&quot;新闻&quot;</span>).click()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">driver.find_element(By.LINK_TEXT, <span class="string">&#x27;新闻&#x27;</span>).click()</span><br></pre></td></tr></table></figure><h4 id="6、partail-link-text"><a href="#6、partail-link-text" class="headerlink" title="6、partail_link_text"></a>6、partail_link_text</h4><p>模糊匹配超链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">driver.find_element(By.PARTIAL_LINK_TEXT, <span class="string">&#x27;闻&#x27;</span>).click()</span><br></pre></td></tr></table></figure><h4 id="7、xpath"><a href="#7、xpath" class="headerlink" title="7、xpath"></a>7、xpath</h4><p>如果要定位的元素没有id、name、class属性，该如何进行定位？<br>——使用xpath。</p><p>xPath是XML Path的简称，是一门在XML文档中查找元素信息的语言<br>XML是一种标记语言。<br>● 本质是一种查询语言<br>●支持逻辑运算、函数<br>● 实现非常强大的功能<br>● 可以用于APP自动化测试</p><p>依赖于元素的路径：<br>● 绝对路径：/开头是绝对路径<br>● 相对路径：//开头是相对路径</p><p>Xpath可以通过相对路径与绝对路径去定位元素，绝对路径从 HTML 根节点开始算，相对路径从任意节点开始。</p><div class="table-container"><table><thead><tr><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>从根节点开始选取(绝对路径)</td><td>/html/div/</td></tr><tr><td>从任意节点开始选取(相对路径)</td><td>//div，列举出所有div标签</td></tr><tr><td>选取当前节点的父节点</td><td>//input/.. 会选取 input 的父节点</td></tr><tr><td>选取属性，或者根据属性选取</td><td></td></tr><tr><td>使用id属性定位</td><td>//div[@id=’id_value’]</td></tr><tr><td>使用class属性定位</td><td>//a[@class=”mnav”]</td></tr><tr><td>使用name属性定位</td><td>//div[@name=’wd’]</td></tr><tr><td>多个属性定位</td><td>//input[@name=”wd” and @class=”s_ipt”]</td></tr><tr><td>第n个元素，使用index定位</td><td>//div[@id=”s-top-left”]/a[3]</td></tr><tr><td>最后一个元素</td><td>//a[@class=”mnav”] [last()]</td></tr><tr><td>属性包含某字段</td><td>//div[contains(@title,’text’)]</td></tr><tr><td>属性以某字段开头</td><td>//div[starts-with(@title,’text’)]</td></tr><tr><td>属性以某字段结尾</td><td>//div[ends-with(@title,’text’)]</td></tr><tr><td>文本包含</td><td>//a[contains(text(),”网盘”)]</td></tr><tr><td>文本等于</td><td>//span[text() = “菜单”]</td></tr><tr><td>同级弟弟元素</td><td>//div[@id==’id’]/following-sibling::div</td></tr><tr><td>同级哥哥元素</td><td>//div[@id==’id’]/preceding-sibling::div</td></tr></tbody></table></div><p>●使用绝对路径，一般不推荐绝对路径，因为写起来太麻烦了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 定位百度首页的新闻</span></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;/html/body/div/div/div[3]/a&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>下面使用相对路径定位<br>●使用id属性定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//input[@id=&quot;kw&quot;]&#x27;</span>).send_keys(<span class="string">&quot;软件测试老白&quot;</span>)</span><br></pre></td></tr></table></figure><p>●使用class属性定位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class="line"># class中间有空格，需要全部写上</span><br><span class="line">driver.find_element(By.XPATH, &#x27;//a[@class=&quot;mnav c-font-normal c-color-t&quot;]&#x27;)</span><br></pre></td></tr></table></figure><p>●根据name属性定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//input[@name=&quot;wd&quot;]&#x27;</span>).send_keys(<span class="string">&quot;软件测试老白&quot;</span>)</span><br></pre></td></tr></table></figure><p>●由子元素定位父元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 定位输入框的父元素</span></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//input[@id=&quot;kw&quot;]/..&#x27;</span>)</span><br></pre></td></tr></table></figure><p>●多个属性组合定位 支持and or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//input[@name=&quot;wd&quot; and @class=&quot;s_ipt&quot;]&#x27;</span>).send_keys(<span class="string">&quot;软件测试老白&quot;</span>)</span><br></pre></td></tr></table></figure><p>●多组数据使用下标定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 定位百度首页地图</span></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//div[@id=&quot;s-top-left&quot;]/a[3]&#x27;</span>)</span><br></pre></td></tr></table></figure><p>●根据文本内容定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 定位百度首页网盘</span></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//a[contains(text(),&quot;网盘&quot;)]&#x27;</span>) </span><br></pre></td></tr></table></figure><p>●其它定位方式，轴定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 最后一个子元素,last()</span></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//a[@class=&quot;mnav c-font-normal c-color-t&quot;][last()]&#x27;</span>) </span><br><span class="line">动态ID</span><br><span class="line">https://element.eleme.cn/<span class="comment">#/zh-CN/component/cascader</span></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//span[text() = &quot;默认 click 触发子菜单&quot;]/following-sibling::div/div/input&#x27;</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、相对路径+索引定位   //form/span/input</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//form/span/input&quot;</span>).send_keys(<span class="string">&quot;输入的内容&quot;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">#2、相对路径+属性定位   //input[@autocomplete=&#x27;off&#x27;]</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//input[@autocomplete=&#x27;off&#x27;]&quot;</span>).send_keys(<span class="string">&quot;输入的内容&quot;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">#3、相对路径+通配符定位  *复制xpath不是万能的，经常会报错</span></span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//*[@autocomplete=&#x27;off&#x27;]&quot;</span>).send_keys(<span class="string">&quot;输入的内容&quot;</span>)</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&quot;//*[@*=&#x27;off&#x27;]&quot;</span>).send_keys(<span class="string">&quot;输入的内容&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、相对路径+部分属性值定位input[starts-with(@autocomplete,&#x27;of&#x27;)]</span></span><br><span class="line">driver.find_element(<span class="comment"># auto属性以of开头：starts-with</span></span><br><span class="line">    By.XPATH,<span class="string">&quot;//input[starts-with(@autocomplete,&#x27;of&#x27;)]&quot;</span></span><br><span class="line">).send_keys(<span class="string">&quot;输入的内容&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element(<span class="comment"># auto属性从第二个字符开始截取，为ff的：substring</span></span><br><span class="line">    By.XPATH,<span class="string">&quot;//input[substring(@autocomplete,2)=&#x27;ff&#x27;]&quot;</span></span><br><span class="line">).send_keys(<span class="string">&quot;输入的内容&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element(<span class="comment"># auto属性包含字符of：contains</span></span><br><span class="line">    By.XPATH,<span class="string">&quot;//input[contains(@autocomplete,&#x27;of&#x27;)]&quot;</span></span><br><span class="line">).send_keys(<span class="string">&quot;输入的内容&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、相对路径+文本定位</span></span><br><span class="line">value = driver.find_element(</span><br><span class="line">    By.XPATH,<span class="string">&quot;//span[text()=&#x27;按图片搜索&#x27;]&quot;</span></span><br><span class="line">).get_attribute(<span class="string">&#x27;class&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>1、XPATH的语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法：表示层级+属性</span><br><span class="line">/（开头）表示根路径</span><br><span class="line">/html/body/div</span><br><span class="line">//（任意层级）（包括下级、下级的下级…）</span><br><span class="line">//div</span><br><span class="line">@属性</span><br><span class="line">‘//a[@target=“_top”]’</span><br><span class="line">/（中间）表示下一级</span><br><span class="line">‘//p//input’</span><br><span class="line">.表示本级</span><br><span class="line">…表示上一级</span><br></pre></td></tr></table></figure><p><strong>2、 XPATH的函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">函数是XPATH另一个魅力，常用的函数：</span><br><span class="line">● text：获取元素内的文本</span><br><span class="line">● contains：任意位置包含匹配</span><br><span class="line">● starts-with：开头</span><br><span class="line">● substring：截取</span><br><span class="line">$x(“//a[text=(vivoX5MAX L 移动4G 八核超薄大屏5.5双卡)]”)</span><br><span class="line">$x(“//a[contains( text=(),‘vivo’) ]”)</span><br><span class="line">$x(“//a[start-with( text=(),‘vivo’) ]”)</span><br><span class="line">$x(“//a[substring(@name,2)=‘vi’ ]”)</span><br></pre></td></tr></table></figure><h4 id="8、css"><a href="#8、css" class="headerlink" title="8、css"></a>8、css</h4><p><strong>1. id选择器</strong></p><ul><li>前提：元素必须有id属性</li><li>语法：#id 如：#password</li></ul><p><strong>2. class选择器</strong></p><ul><li>前提：元素必须是有class属性</li><li>语法：.class 如：.telA</li></ul><p><strong>3. 元素选择器</strong></p><ul><li>语法：element 如：input</li></ul><p><strong>4. 属性选择器</strong></p><ul><li>语法：[属性名=属性值]</li></ul><p><strong>5. 层级选择器</strong></p><ul><li>语法：<br>p&gt;input<br>p input</li><li>提示：<br>大于号和空格的区别，大于号必须为子元素，空格则不用</li></ul><p><strong>6. 【css延伸】</strong></p><p>input[type^=‘p’] type属性以p字母开头的元素<br>input[type$=‘d’] type属性以d字母结束的元素<br>input[type*=‘w’] type属性包含w字母的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.使用css id选择器 定位用户名 输入admin</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;#userA&quot;</span>).send_keys(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.使用css 属性选择器 定位密码框 输入123456</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;[name=&#x27;passwordA&#x27;]&quot;</span>).send_keys(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.使用css class选择器 定位电话号码 输入18611112222</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;.telA&quot;</span>).send_keys(<span class="string">&quot;18611112222&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.使用css 元素选择器 定位span标签获取文本值</span></span><br><span class="line">span = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;span&quot;</span>).text</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取的span标签文本值为：&quot;</span>,span)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.使用层级选择器 定位email 输入123@qq.com</span></span><br><span class="line">driver.find_element(</span><br><span class="line">    By.CSS_SELECTOR,<span class="string">&quot;p&gt;input[placeholder=&#x27;电子邮箱A&#x27;]&quot;</span></span><br><span class="line">).send_keys(<span class="string">&quot;123@qq.com&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>XPATH和CSS类似功能对比</strong></p><div class="table-container"><table><thead><tr><th>定位方式</th><th>XPath</th><th>CSS</th></tr></thead><tbody><tr><td>元素名</td><td>//input</td><td>input</td></tr><tr><td>id</td><td>//input[@id=‘userA’]</td><td>@userA</td></tr><tr><td>class</td><td>//*[@class=‘telA’]</td><td>.telA</td></tr><tr><td>属性</td><td>1.//*[text()==“xxx”] 2.//input[starts-with(@attribute,‘xxx’)] 3.//input[contains(@attribute,‘xxx’)]</td><td>1.input[type^=‘p’] 2.input[type$=‘d’ 3.input[type*=‘w’]</td></tr></tbody></table></div><p>通过css_selector定位，By.CSS_SELECTOR </p><p>当一个元素无法直接定位，也就是没有id，name等确定标识，这个时候我们需要考虑使用css selector定位器。</p><p>它是一种通过CSS样式选择器来定位元素的方法</p><p>CSS常用汇总</p><div class="table-container"><table><thead><tr><th>选择器</th><th>格式</th><th>示例</th><th>示例说明</th></tr></thead><tbody><tr><td>标签选择器</td><td>html标签</td><td>input</td><td>选择所有<input>元素</td></tr><tr><td>ID选择器</td><td>#id属性值</td><td>#kw</td><td>选择所有id=’kw’的元素</td></tr><tr><td>类选择器</td><td>.class属性值</td><td>.nav-search-input</td><td>选择所有class=’nav-search-input’的元素</td></tr><tr><td>属性选择器1</td><td>[属性名]</td><td>[name=”wd”]</td><td>选择所有name等于”wd”的元素</td></tr><tr><td>组合选择器</td><td>标签加属性描述</td><td>input.s_ipt</td><td>选择所有class=’_ipt’的<input>元素</td></tr><tr><td>父子关系</td><td>元素1&gt;元素2</td><td>div&gt;a</td><td>选择所有父级是<div>的<a>元素</td></tr><tr><td>后代关系</td><td>元素1 元素2</td><td>div a</td><td>选择<div>中的所有<a>元素</td></tr><tr><td>第一子元素</td><td>:first-child</td><td>a:first-child</td><td>选择所有<a>元素且该元素是其父级的第一个元素</td></tr><tr><td>最后一个元素</td><td>:last-child</td><td>a:last-child</td><td>选择所有<a>元素且该元素是其父级的最后一个元素</td></tr><tr><td>顺序选择器</td><td>:nth-child(n)</td><td>a:nth-child(2)</td><td>选择所有<a>元素且该元素是其父级的第二个子元素</td></tr></tbody></table></div><p>●使用id属性定位，id前面要加#号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#kw&#x27;</span>).send_keys(<span class="string">&quot;软件测试老白&quot;</span>)</span><br></pre></td></tr></table></figure><p>●通过class属性定位，class前面要加.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.bilibili.com&#x27;</span>)</span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.nav-search-input&#x27;</span>).send_keys(<span class="string">&#x27;软件测试老白&#x27;</span>)</span><br></pre></td></tr></table></figure><p>●根据name属性定位，属性值为[name=”wd”]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;[name=&quot;wd&quot;]&#x27;</span>).send_keys(<span class="string">&quot;软件测试老白&quot;</span>)</span><br></pre></td></tr></table></figure><p>●根据标签属性定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;a[href=&quot;http://image.baidu.com/&quot;]&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 模糊匹配-包含</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;a[href*=&quot;image.baidu.com&quot;]&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 模糊匹配-匹配开头</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;a[href^=&quot;http://image.baidu&quot;]&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 模糊匹配-匹配结尾</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;a[href$=&quot;image.baidu.com/&quot;]&#x27;</span>).click()</span><br></pre></td></tr></table></figure><p>●组合定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># input+name</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;input[name=&quot;wd&quot;]&#x27;</span>).send_keys(<span class="string">&quot;软件测试老白&quot;</span>)</span><br><span class="line"><span class="comment"># input+class</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;input.s_ipt&#x27;</span>).send_keys(<span class="string">&quot;软件测试老白&quot;</span>)</span><br></pre></td></tr></table></figure><p>●定位子元素<br>一般根据最近一个id属性往下找，可以根据class或者标签。<br>#s-top-left &gt; a<br>:nth-child(3)代表第几个子元素，下标从1开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 百度首页新闻，以下三种方式皆可</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;div.s-top-left-new.s-isindex-wrap a&#x27;</span> ) <span class="comment"># 根据class</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;div#s-top-left a&#x27;</span>) <span class="comment"># 根据id</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#s-top-left a&#x27;</span>) <span class="comment"># 简写</span></span><br><span class="line"><span class="comment"># 百度首页地图，以下2种方式皆可</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#s-top-left a:nth-child(3)&#x27;</span>) </span><br><span class="line">driver.find_elements(By.CSS_SELECTOR, <span class="string">&#x27;#s-top-left a&#x27;</span>)[<span class="number">2</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment"># a:first-child 第一个标签</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#s-top-left a:first-child&#x27;</span>)</span><br><span class="line"><span class="comment"># a:last-child 最后一个标签</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#s-top-left a:last-child&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当然 css selector选择器不止这些用法，还有这里只列举了一些重要的用法，当页面元素过多时，我们一般都会直接通过浏览器的复制功能。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># step1:导入Selenium WebDriver模块</span><br><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line">for i in range(1,10):</span><br><span class="line">#step2: 创建驱动浏览器对象并启动浏览器</span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">#step3: 编写自动化执行步骤</span><br><span class="line">driver.maxmimize()</span><br><span class="line">driver.get(&quot;https://www.baidu.com&quot;)</span><br><span class="line">#清空文本框</span><br><span class="line">driver.find_element_by_xpath(&quot;//input[@id=&#x27;su&#x27;]&quot;).clear()</span><br><span class="line"># 输入内容     </span><br><span class="line">driver.find_element_by_xpath(&quot;//input[@id=&#x27;su&#x27;]&quot;).send_keys(&quot;百度一下&quot;)</span><br><span class="line"># 点击</span><br><span class="line">driver.find_element_by_xpath(&quot;//input[@name=&#x27;ss&#x27;]&quot;).click()</span><br><span class="line">time.sleep(5)</span><br><span class="line"># step4: 关闭驱动对象</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><strong>针对海盗商城的登录功能进行自动化测试</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"><span class="comment"># 1、登录</span></span><br><span class="line">chrome = webdriver.Chrome()</span><br><span class="line">chrome.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 由于页面稳定性较差，所以添加了一个隐式等待</span></span><br><span class="line">chrome.maximize_window()  <span class="comment"># 窗口最大化</span></span><br><span class="line">chrome.get(<span class="string">&#x27;http://129.211.129.101:9007/index.php?m=user&amp;c=public&amp;a=login&#x27;</span>)</span><br><span class="line"><span class="comment"># chrome.find_element_by_id(&#x27;username&#x27;).send_keys(&#x27;XieChuang&#x27;) 该命令的输入方式已经过期</span></span><br><span class="line">chrome.find_element(By.ID, <span class="string">&#x27;username&#x27;</span>).send_keys(<span class="string">&#x27;XieChuang&#x27;</span>)</span><br><span class="line">chrome.find_element(By.ID, <span class="string">&#x27;password&#x27;</span>).send_keys(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="comment"># chrome.find_element_by_class_name(&#x27;login_btn fl&#x27;).click() # 登录的类名是复合类名，不能同时使用，fl只是一个左对齐的作用</span></span><br><span class="line">chrome.find_element(By.CLASS_NAME, <span class="string">&#x27;login_btn&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 2、点击&#x27;进入商城购物&#x27;</span></span><br><span class="line"><span class="comment"># 登录成功后不是立马进行页面的，所以此处添加一个时间等待</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 第三种元素定位方式，linktext</span></span><br><span class="line">chrome.find_element(By.LINK_TEXT, <span class="string">&#x27;进入商城购物&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 3、搜索&#x27;iphone&#x27;</span></span><br><span class="line">chrome.find_element(By.NAME, <span class="string">&#x27;keyword&#x27;</span>).send_keys(<span class="string">&#x27;小米6&#x27;</span>)</span><br><span class="line">chrome.find_element(By.CLASS_NAME, <span class="string">&#x27;btn1&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 4、点击商品图片</span></span><br><span class="line">chrome.find_element(By.XPATH, <span class="string">&#x27;/html/body/div[3]/div[2]/div[3]/div[2]/div[1]/a/img&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 5、窗口切换</span></span><br><span class="line"><span class="comment"># 1、找到新窗口的名字</span></span><br><span class="line">new_window = chrome.window_handles[-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 2、切换到新窗口</span></span><br><span class="line">chrome.switch_to.window(new_window)</span><br><span class="line"><span class="comment"># 6、把选择的商品加入购物车</span></span><br><span class="line">chrome.find_element(By.ID, <span class="string">&#x27;joinCarButton&#x27;</span>).click()  <span class="comment"># 此时由于跳转了新窗口，所以无法进行操作</span></span><br><span class="line"><span class="comment"># 7、去购物车结算</span></span><br><span class="line">chrome.find_element(By.CLASS_NAME, <span class="string">&#x27;other_join&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 8、点击结算 css selector 定位方式:在两个class之前需要加.</span></span><br><span class="line">chrome.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.shopCar_btn_03.fl&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 9、添加新地址</span></span><br><span class="line">chrome.find_element(By.CLASS_NAME, <span class="string">&#x27;add-address&#x27;</span>).click()</span><br><span class="line"><span class="comment"># 10、填写收货人信息</span></span><br><span class="line">chrome.find_element(By.NAME, <span class="string">&#x27;address[address_name]&#x27;</span>).send_keys(<span class="string">&#x27;XC&#x27;</span>)</span><br><span class="line">chrome.find_element(By.NAME, <span class="string">&#x27;address[mobile]&#x27;</span>).send_keys(<span class="string">&#x27;15910100202&#x27;</span>)</span><br><span class="line"><span class="comment"># 11、选择地区的下拉框</span></span><br><span class="line">sheng=chrome.find_element(By.ID,<span class="string">&#x27;add-new-area-select&#x27;</span>)<span class="comment"># 将省这个下拉框进行实例化</span></span><br><span class="line">Select(sheng).select_by_visible_text(<span class="string">&#x27;北京市&#x27;</span>)<span class="comment"># 将实例化的下拉框进行类型强制转换成Select型，再使用下拉框的属性进行选择</span></span><br><span class="line"><span class="comment"># 12、选择收货地区--市 由于下拉框中的ID是动态变化的，且class name又是同名的，所以使用find_elements来找到相同class name，再使用标签名来组合</span></span><br><span class="line">shi=chrome.find_elements(By.CLASS_NAME,<span class="string">&#x27;add-new-area-select&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">Select(shi).select_by_visible_text(<span class="string">&#x27;北京市&#x27;</span>)</span><br><span class="line">qu=chrome.find_elements(By.TAG_NAME,<span class="string">&#x27;select&#x27;</span>)[<span class="number">2</span>] <span class="comment"># 使用标签名来定位</span></span><br><span class="line">Select(qu).select_by_visible_text(<span class="string">&#x27;海淀区&#x27;</span>)</span><br><span class="line">chrome.find_element(By.NAME, <span class="string">&#x27;address[address]&#x27;</span>).send_keys(<span class="string">&#x27;迈行大厦&#x27;</span>)</span><br><span class="line">chrome.find_element(By.NAME, <span class="string">&#x27;address[zipcode]&#x27;</span>).send_keys(<span class="string">&#x27;100000&#x27;</span>)</span><br><span class="line">chrome.find_element(By.CLASS_NAME,<span class="string">&#x27;aui_state_highlight&#x27;</span>).click()</span><br></pre></td></tr></table></figure><p>元素定位最佳顺序<br>1.ID（唯一标识）：如果元素具有唯一的ID属性，优先使用ID进行定位，因为它是最快和最可靠的定位方式。<br>2.CSS选择器：如果元素没有唯一的ID，可以考虑使用CSS选择器进行定位。CSS选择器具有灵活的语法，并且在性能上通常比XPath更高效。<br>3.类名（class）：如果元素没有唯一的ID或合适的CSS选择器，可以使用元素的类名进行定位。尽量选择具有明确含义的类名，并避免选择过于通用的类名。<br>4.Name属性：如果元素具有唯一的name属性，可以使用name属性进行定位。但要注意，name属性并不是所有元素都具有的，所以不是一种通用的定位方式。<br>5.XPath：如果前面的方式都无法定位元素，可以使用XPath进行定位。XPath提供了强大的定位功能，但在性能上相对较低，因为XPath需要遍历整个文档，直到找到匹配的元素。暂无性能对比数据，我觉得好用就用，及时行乐。<br>6.标签名（TagName）：如果元素无法使用上述方式进行定位，可以考虑使用标签名进行定位。但要注意，标签名定位方式通常会返回多个匹配的元素，需要结合其他条件来缩小范围。</p><h3 id="框"><a href="#框" class="headerlink" title="框"></a>框</h3><h4 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//span[text()=&quot;Android&quot;]&#x27;</span>).click()</span><br></pre></td></tr></table></figure><h4 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h4><p>例子：选中 香蕉 苹果 西瓜：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//span[text()=&quot;香蕉&quot;]&#x27;</span>).click()</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//span[text()=&quot;苹果&quot;]&#x27;</span>).click()</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//span[text()=&quot;西瓜&quot;]&#x27;</span>).click()</span><br></pre></td></tr></table></figure><h4 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select=Select(driver.find_element(By.ID, <span class="string">&#x27;s2&#x27;</span>))</span><br><span class="line">select.select_by_index(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="弹性框"><a href="#弹性框" class="headerlink" title="弹性框"></a>弹性框</h4><p><strong>确定弹窗</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#点击按钮弹出窗</span></span><br><span class="line">driver.find_element(By.NAME,<span class="string">&#x27;b1&#x27;</span>).click()</span><br><span class="line"><span class="comment">#使用alert.text获取弹框的文字</span></span><br><span class="line"><span class="built_in">print</span>(driver.switch_to.alert.text)</span><br><span class="line"><span class="comment">#点击确定</span></span><br><span class="line">driver.switch_to.alert.accept()</span><br></pre></td></tr></table></figure><p><strong>确定取消</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#点击按钮弹出窗</span></span><br><span class="line">driver.find_element(By.NAME,<span class="string">&#x27;b1&#x27;</span>).click()</span><br><span class="line"><span class="comment">#使用alert.text获取弹框的文字</span></span><br><span class="line"><span class="built_in">print</span>(driver.switch_to.alert.text)</span><br><span class="line"><span class="comment">#点击确定</span></span><br><span class="line">driver.switch_to.alert.accept()</span><br><span class="line"><span class="comment">#点击取消</span></span><br><span class="line">driver.switch_to.alert.dismiss()</span><br></pre></td></tr></table></figure><p><strong>输入确定</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#点击按钮弹出窗</span></span><br><span class="line">driver.find_element(By.NAME,<span class="string">&#x27;b1&#x27;</span>).click()</span><br><span class="line"><span class="comment">#弹性框输入文字</span></span><br><span class="line">driver.switch_to.alert.send_key(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="comment">#点击确定</span></span><br><span class="line">driver.switch_to.alert.accept()</span><br></pre></td></tr></table></figure><h4 id="iframe框"><a href="#iframe框" class="headerlink" title="iframe框"></a>iframe框</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到 iframe 元素</span></span><br><span class="line">iframe_element = driver.find_element_by_css_selector(<span class="string">&quot;iframe-selector&quot;</span>)</span><br><span class="line"><span class="comment"># 切换到 iframe 上下文</span></span><br><span class="line">driver.switch_to.frame(iframe_element)</span><br><span class="line"><span class="comment"># 切回默认上下文</span></span><br><span class="line">driver.switch_to.default_content()</span><br></pre></td></tr></table></figure><p>如果在 iframe 上下文中完成了操作，想要切回到默认的上下文，可以使用 <code>switch_to.default_content</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到第一个 iframe 上下文</span></span><br><span class="line">driver.switch_to.frame(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 在第一个 iframe 上下文中执行操作</span></span><br><span class="line"><span class="comment"># 切回默认上下文</span></span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line"><span class="comment"># 切换到第二个 iframe 上下文</span></span><br><span class="line">driver.switch_to.frame(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 在第二个 iframe 上下文中执行操作</span></span><br><span class="line"><span class="comment"># 切回默认上下文</span></span><br><span class="line">driver.switch_to.default_content()</span><br></pre></td></tr></table></figure><p>切换iframe的方法为：driver.switch_to.frame()，frame()中参数可以为id，name或者index，也可以为iframe元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">&#x27;https://sahitest.com/demo/iframesTest.htm&#x27;</span>)</span><br><span class="line">driver.find_element(By.ID,<span class="string">&#x27;checkRecord&#x27;</span>).clear()</span><br><span class="line">driver.find_element(By.ID,<span class="string">&#x27;checkRecord&#x27;</span>).send_keys(<span class="string">&quot;6666&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 切换至第—个iframe</span></span><br><span class="line">driver.switch_to.frame(<span class="number">0</span>)</span><br><span class="line">driver.find_element(By.ID, <span class="string">&#x27;open-self&#x27;</span>).click()</span><br></pre></td></tr></table></figure><p>编写本地代码，实现frame带id和name。</p><p>复制 sahitest 的iframe源码，src更改为哗哩哗哩网址。设置第一个iframe，id为iframe1，name为iframe_name </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开本地的html文件，前面要加fiLe：//</span></span><br><span class="line">driver.get(<span class="string">&quot;file:///Users/tester/Documents/web自动化测试/WebAutoTest/HTML/iframe_1.html&quot;</span>)</span><br><span class="line">driver.find_element(By.ID,<span class="string">&quot;checkRecord&quot;</span>).clear()</span><br><span class="line">driver.find_element(By.ID, <span class="string">&quot;checkRecord&quot;</span>).send_keys(<span class="string">&quot;666&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 用下标driver.switch_to.frame(1)</span></span><br><span class="line">driver.find_element(By.ID,<span class="string">&#x27;open-self&#x27;</span>).click()</span><br><span class="line"><span class="comment">#用name# </span></span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;iframe_name&quot;</span>)</span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//span[text()=&quot;番剧&quot;]&#x27;</span>).click()</span><br></pre></td></tr></table></figure><p>最后是根据定位iframe元素进行切换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">driver.get(<span class="string">&#x27;https://sahitest.com/demo/iframesTest.htm&#x27;</span>)</span><br><span class="line">driver.find_element(By.ID,<span class="string">&#x27;checkRecord&#x27;</span>).clear()</span><br><span class="line">driver.find_element(By.ID,<span class="string">&#x27;checkRecord&#x27;</span>).send_keys(<span class="string">&quot;6666&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 先定位到iframe，在switch_to到指定元素</span></span><br><span class="line">ele = driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;div#another iframe&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(ele)</span><br><span class="line">driver.find_element(By.ID, <span class="string">&#x27;open-self&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入iframe</span></span><br><span class="line">ele = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;body &gt; iframe&quot;</span>)</span><br><span class="line">driver.switch_to.frame(ele)</span><br><span class="line"><span class="comment"># 退出iframe，切换到上一级</span></span><br><span class="line">driver.switch_to.parent_frame()</span><br><span class="line"><span class="comment"># 切换到主界面</span></span><br><span class="line">driver.switch_to.default_content()</span><br></pre></td></tr></table></figure><h4 id="级联日期选择器"><a href="#级联日期选择器" class="headerlink" title="级联日期选择器"></a>级联日期选择器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//input[@class=&quot;ivu-input ivu-input-default&quot;]&#x27;</span>).click()</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//Li[contains(text(),&quot;北京&quot;)]&#x27;</span>).click()</span><br><span class="line">driver.find_element(By.XPATH,<span class="string">&#x27;//Li[contains(text(),&quot;王府井&quot;)]&#x27;</span>).click()</span><br></pre></td></tr></table></figure><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p>不推荐此方法—-绝对路径（使用较少）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取input文件上传元素</span></span><br><span class="line">upload = driver.find_element(By.ID, <span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">upload.send_keys(<span class="string">r&quot;/Users/tester/Documents/web自动化测试/WebAutoTest/file/Logo.jpg&quot;</span>)</span><br><span class="line">driver.find_element(By.NAME, <span class="string">&#x27;submit&#x27;</span>).click()</span><br></pre></td></tr></table></figure><p>推荐此方法—-相对路径（使用较多）:</p><p>项目目录下建立—-utils文件包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_logo_path</span>():</span><br><span class="line">    path = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))),<span class="string">&quot;file&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.get_filepath <span class="keyword">import</span> get_logo_path</span><br><span class="line"></span><br><span class="line">path = get_logo_path()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取input文件上传元素</span></span><br><span class="line">upload = driver.find_element(By.ID, <span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">upload.send_keys(<span class="string">r&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(path))</span><br><span class="line">driver.find_element(By.NAME, <span class="string">&#x27;submit&#x27;</span>).click()</span><br></pre></td></tr></table></figure><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>项目目录下建立—-utils文件包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file_path</span>():</span><br><span class="line">    path = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))),<span class="string">&quot;file&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.get_filepath <span class="keyword">import</span> download_file_path</span><br><span class="line"></span><br><span class="line">path = download_file_path() + <span class="string">&quot;/LATEST_RELEASE&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件存在&quot;</span>)</span><br><span class="line">    os.remove(path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件已删除&quot;</span>)</span><br><span class="line"></span><br><span class="line">chromeOptions = webdriver.Chromeoptions()</span><br><span class="line">prefs = &#123;<span class="string">&quot;download.default_directory&quot;</span>: <span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(download_file_path())&#125;</span><br><span class="line">chromeOptions.add_experimental_option(<span class="string">&quot;prefs&quot;</span>, prefs)</span><br><span class="line">driver = webdriver.Chrome(chromeOptions)</span><br><span class="line"></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;/html/body/table/tbody/tr[156]/td[2]/a&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><p>一、验证码在自动化测试过程中如何处理</p><p>1、找开发屏蔽或测试跳过</p><p>2、找开发置为默认或万能码</p><p>3、使用cookie跳过，使用抓包工具或代码保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#访问xxxx网站</span></span><br><span class="line">driver.get(<span class="string">&quot;http://www.xxxx.cn/&quot;</span>)</span><br><span class="line"><span class="comment">#将用户名密码写入浏览器cookie</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Login_UserNumber&#x27;</span>, <span class="string">&#x27;value&#x27;</span>:<span class="string">&#x27;username&#x27;</span>&#125;)</span><br><span class="line">driver.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Login_Passwd&#x27;</span>, <span class="string">&#x27;value&#x27;</span>:<span class="string">&#x27;password&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">#再次访问xxxx网站，将会自动登录</span></span><br><span class="line">driver.get(<span class="string">&quot;http://www.xxxx.cn/&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>4、使用pytesserac和Pillow实现验证码识别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用pytesseract模块和pillow模块解决安装</span><br><span class="line">pytesseract模块</span><br><span class="line">pip3 install pytesseract</span><br><span class="line">安装Pillow</span><br><span class="line">pip3 install pillow</span><br></pre></td></tr></table></figure><p>2.网站验证码解决思路</p><ul><li><p>截屏整个页面</p></li><li><p>获得验证码坐标数据</p></li><li><p>根据坐标数据抠图</p></li><li><p>使用pytesseract模块进行验证</p></li></ul><p>可以使用pytesseract 模块和 PIL 模块解决不太复杂的验证码问题，实现步骤如下：</p><ul><li>安装pytesseract模块 pip install pytesseract</li><li>安装 PIL 模块 pip install pil</li></ul><p><strong>使用第三方的API来实现</strong></p><p>对于复杂的验证码，我们可以使用第三方的API来实现，本节我们将使用一个名为：万维易源的APl来解决验证码问题，网址是：<a href="https://www.showapi.com/">https://www.showapi.com/</a></p><p>识别验证码的地址是：<a href="https://www.showapi.com/api/lookPoint">https://www.showapi.com/api/lookPoint</a></p><p>ddddocr是Python第三方库，识别度高达99%</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple ddddocr</span><br></pre></td></tr></table></figure><h4 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h4><p>Selenium 三种等待方式在UI自动化测试中，必然会遇到环境不稳定，网络慢的情况，这时如果不做任何处理的话，代码会由于没有找到元素而报错。另外，一种情况就是页面使用ajax 异步加载机制。这时我们就要用到wait，而在 Selenium 中，我们可以用到一共三种等待，每一种等待都有自已的优点或缺点。</p><p><strong>time.sleep（固定等待）</strong></p><p>​     在开发自动化框架过程中，最忌讳使用python 自带模块的time 的sleep 方式进行等待，虽然可以自定义等待时间，但当网络条件良好时，依旧按照预设定的时间继续等待，导致整个项目的自动化时间无限延长，不建议使用。</p><p>(注：脚本调试过程时，还是可以使用的，方便快捷)</p><p><strong>implicitly_wait（隐式等待）</strong></p><p>​     隐式等待实际是设置了一个最长等待时间，如果在规定时间内网页加载完成，则执行下一步，否则一直等到时间结束，然后执行下一步。这样的隐式等待会有个坑，我们都知道 JavaScript一般都是放在我们的 body的最后进行加载，实际这是页面上的元素都已经加载完毕，我们却还在等待全部页面加载结束。</p><p>（注：隐式等待对整个driver周期都起作用，在最开始设置一次就可以了。不要当作固定等待使用，到哪都来一下隐式等待。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_wait</span>(<span class="params">self</span>):</span><br><span class="line">self.drive.implicitly_wait(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><strong>WebDriverWait（显式等待）(推荐)</strong></p><p>​      WebDriverWait是selenium提供得到显示等待模块引入路径：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br></pre></td></tr></table></figure><p><strong>WebDriverWait参数</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th style="text-align:center">参数</th><th style="text-align:center">参数说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">driver</td><td style="text-align:center">传入WebDriver实例</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">timeout</td><td style="text-align:center">超时时间，等待的最长时间</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">poll_frequency</td><td style="text-align:center">调用until或unti_not中的方法的间隔时间，默认是o.5秒</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">ignored_exceptions</td><td style="text-align:center">忽略的异常</td></tr></tbody></table></div><p>这个模块中，一共只有两种方法 until与until_not。</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th style="text-align:center">参数</th><th style="text-align:center">参数说明</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">method</td><td style="text-align:center">在等待期间，每隔一段时间调用这个传入的方法，直到返回值不是False</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">message</td><td style="text-align:center">如果超时，抛出TimeoutException，将message传入异常</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line"></span><br><span class="line">def test_wait(self):</span><br><span class="line"># WebDriverWait(self.drive,2)</span><br><span class="line">wait = WebDriverWait(self.drive,2)</span><br><span class="line">wait.until(EC.title_is(&#x27;百度一下&#x27;))</span><br><span class="line"></span><br><span class="line">if __name__ = &#x27;__main__&#x27;:</span><br><span class="line">case.test_wait()</span><br></pre></td></tr></table></figure><h4 id="鼠标键盘"><a href="#鼠标键盘" class="headerlink" title="鼠标键盘"></a><strong>鼠标键盘</strong></h4><p>Selenium中的鼠标和键盘事件被封装在ActionChains类中，正确的使用方法是：ActionChains(driver).click(btn).perform（）</p><p>下面列出ActionChains中常用方法：</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th style="text-align:center">方法</th><th style="text-align:center">方法描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">click(on_element=None)</td><td style="text-align:center">单击鼠标左键</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">click_and_hold(on_element=None)</td><td style="text-align:center">点击鼠标左键，不松开</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">context_click(on_element=None)</td><td style="text-align:center">点击鼠标右键</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">double_click(on_element=None)</td><td style="text-align:center">双击鼠标左键</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">drag_and_drop(source,target)</td><td style="text-align:center">拖拽到某个元素然后松开</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">drag_and_drop_by_offset(source,xoffset,yoffset)</td><td style="text-align:center">拖拽到某个坐标然后松开</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">key_down(value,element=None)</td><td style="text-align:center">按下某个键盘上的键</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">key_up(value,element=None)</td><td style="text-align:center">松开某个键</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">move_by_offset(xoffset,yoffset)</td><td style="text-align:center">鼠标从当前位置移动到某个坐标</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">move_to_element(to_element)</td><td style="text-align:center">鼠标移动到某个元素</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">move_to_element_with_offset(to_element,xoffset, yoffset)</td><td style="text-align:center">移动到距某个元素（左上角坐标）多离的位置</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">perform()</td><td style="text-align:center">执行链中的所有动作</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">release(on_element=None)</td><td style="text-align:center">在某个元素位置松开鼠标左键</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">send_keys(*keys_to_send)</td><td style="text-align:center">发送某个键到当前焦点的元素</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">send_keys_to_element(element,*keys_to_send)</td><td style="text-align:center">发送某个键到指定元素</td></tr></tbody></table></div><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">btn = driver.find_element_by_xpath(<span class="string">&quot;/html/body/form/input[3]&quot;</span>)</span><br><span class="line"><span class="comment"># 鼠标单击</span></span><br><span class="line">ActionChains(driver).click(on_element=btn).perform()</span><br><span class="line">btn = driver.find_element_by_xpath(<span class="string">&quot;/html/body/form/input[2]&quot;</span>)</span><br><span class="line"><span class="comment"># 鼠标双击</span></span><br><span class="line">ActionChains(driver).double_click(btn).perform()</span><br><span class="line">btn = driver.find_element_by_xpath(<span class="string">&quot;/html/body/form/input[4]&quot;</span>)</span><br><span class="line"><span class="comment"># 点击鼠标右键</span></span><br><span class="line">ActionChains(driver).context_click(btn).perform()</span><br><span class="line"><span class="comment">#拖拽元素到指定位置</span></span><br><span class="line">ele4 = driver.find_element_by_css_selector(<span class="string">&quot;//*[@id=&#x27;conar&#x27;]/div/div/div/table/tbody[1]/tr[1]/td[1]/span/a&quot;</span>)</span><br><span class="line">target = driver.find_element_by_css_selector(<span class="string">&#x27;#kw&#x27;</span>)</span><br><span class="line">ActionChains(driver).drag_and_drop(ele4,target).perform()</span><br><span class="line"><span class="comment">#在元素上按下鼠标左键并释放</span></span><br><span class="line">ele5 = driver.find_element_by_css_selector(<span class="string">&#x27;#kw&#x27;</span>)</span><br><span class="line">ActionChains(driver).click_and_hold(ele5).release().perform()</span><br></pre></td></tr></table></figure><p><strong>键盘事件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">kw = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line">kw.send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line"><span class="comment"># 全选</span></span><br><span class="line">kw.send_keys(Keys.CONTROL, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment"># 复制</span></span><br><span class="line">kw.send_keys(Keys.CONTROL, <span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="comment"># 剪切</span></span><br><span class="line">kw.send_keys(Keys.CONTROL, <span class="string">&quot;x&quot;</span>)</span><br><span class="line"><span class="comment"># 粘贴</span></span><br><span class="line">kw.send_keys(Keys.CONTROL, <span class="string">&quot;v&quot;</span>)</span><br><span class="line"><span class="comment"># 删除键</span></span><br><span class="line">kw.send_keys(Keys.DELETE)</span><br><span class="line"><span class="comment"># 回车键</span></span><br><span class="line">kw.send_keys(Keys.ENTER)</span><br><span class="line"><span class="comment"># 后退键</span></span><br><span class="line">kw.send_keys(Keys.BACKSPACE)</span><br><span class="line"><span class="comment"># tab 键</span></span><br><span class="line">kw.send_keys(Keys.TAB)</span><br><span class="line"><span class="comment"># 刷新</span></span><br><span class="line">kw.send_keys(Keys.F5)</span><br></pre></td></tr></table></figure><h4 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h4><p><strong>Selenium 执行 JavaScript 脚本</strong></p><p>在web自动化，经常会遇到页面显示内容太多的时候，页面就会出现滚动条，一般有两种方式进行下拉，一种是直接下拉到底部/顶部/中部，或者直接给定元素，直接下拉到指定元素的位置。</p><p>WebDriver有两个方法来执行JavaScript，分别是：</p><ul><li><p>execute_seript 同步执行</p></li><li><p>execute_async_script 异步执行</p></li></ul><p>通过 JavaScript 通常可以实现页面滚动，下面通过实例来演示一下他们的用法：</p><p>两种方式，都是通过selenium框架，执行js代码的方式来实现，只是传递的js代码不一样:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.driver.execute_script(js)</span><br></pre></td></tr></table></figure><p>第一种：自定义直接下拉到顶部或底部，根据需要进行选择</p><p>滚动到底部：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.scrollTo(<span class="number">0</span>, document.body.scrollHeight);</span><br><span class="line">self.driver.execute_script(<span class="string">&quot;window.scrollTo(0, document.body.scrollHeight);&quot;</span>)</span><br></pre></td></tr></table></figure><p>滚动到页面中间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pywindow.scrollTo(<span class="number">0</span>, document.body.scrollHeight/<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>滚动到页面顶部：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.scrollTo(<span class="number">0</span>, document.body.scrollHeight/document.body.scrollHeight);</span><br><span class="line">self.driver.execute_script(<span class="string">&quot;window.scrollTo(0, 0);&quot;</span>)</span><br></pre></td></tr></table></figure><p>指定位置的下滑或上滑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定向下滑动500像素</span></span><br><span class="line">self.driver.execute_script(<span class="string">&quot;window.scrollBy(0, 500);&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定向上滑动500像素</span></span><br><span class="line">self.driver.execute_script(<span class="string">&quot;window.scrollBy(0, -500);&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定向下滑动到指定元素位置</span></span><br><span class="line">target_element = self.driver.find_element_by_id(<span class="string">&quot;target-element-id&quot;</span>)</span><br><span class="line">self.driver.execute_script(<span class="string">&quot;arguments[0].scrollIntoView();&quot;</span>, target_element)</span><br></pre></td></tr></table></figure><p>实现逐渐下滑而没有停顿的效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入所需模块</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义执行 JavaScript 的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scroll_to_bottom</span>(<span class="params">driver</span>):</span><br><span class="line">    <span class="comment"># 获取页面高度</span></span><br><span class="line">    page_height = driver.execute_script(<span class="string">&quot;return document.body.scrollHeight&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 定义滚动函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">scroll</span>():</span><br><span class="line">        <span class="comment"># 获取当前滚动位置</span></span><br><span class="line">        current_scroll = driver.execute_script(<span class="string">&quot;return window.pageYOffset&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算下一帧的滚动位置</span></span><br><span class="line">        next_scroll = current_scroll + <span class="number">10</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果未滚动到页面底部，则继续滚动</span></span><br><span class="line">        <span class="keyword">if</span> next_scroll &lt; page_height:</span><br><span class="line">            driver.execute_script(<span class="string">f&quot;window.scrollTo(0, <span class="subst">&#123;next_scroll&#125;</span>);&quot;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;window.requestAnimationFrame(arguments[0]);&quot;</span>, scroll)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行首帧滚动</span></span><br><span class="line">    driver.execute_script(<span class="string">&quot;window.requestAnimationFrame(arguments[0]);&quot;</span>, scroll)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 等待一段时间，确保滚动完成</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">self</span>):</span><br><span class="line">js=<span class="string">&#x27;return document.title&#x27;</span></span><br><span class="line">title = self.driver.execute_script(js)</span><br><span class="line"><span class="built_in">print</span>(title)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test3</span>(<span class="params">self</span>):</span><br><span class="line">js=<span class="string">&#x27;var q = document.getElementById(&quot;kw&quot;);q.style.border=&quot;2px solid red&quot;</span></span><br><span class="line"><span class="string">self.driver.execute_script(js)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">wait_for_window</span>(<span class="params">self, timeout=<span class="number">2</span></span>):</span><br><span class="line">    time.sleep(<span class="built_in">round</span>(timeout / <span class="number">1000</span>))</span><br><span class="line">    wh_now = self.driver.window_handles</span><br><span class="line">    wh_then = self.<span class="built_in">vars</span>[<span class="string">&quot;window_handles&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(wh_now) &gt; <span class="built_in">len</span>(wh_then):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">set</span>(wh_now).difference(<span class="built_in">set</span>(wh_then)).pop()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 下滑页面底部</span></span><br><span class="line">self.driver.execute_script(<span class="string">&quot;window.scrollTo(0, document.body.scrollHeight);&quot;</span>)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scroll_to</span>(<span class="params">self, <span class="built_in">type</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    移动浏览器的滚动条，滚动屏幕到百分比的位置</span></span><br><span class="line"><span class="string">    目前分为移动到末尾、移动到中间、移动到顶部。以及每次移动1/5，这种只能使用于浏览器的滚动条不在body里面，若有修改过滚动条的属性，无法进行下滑</span></span><br><span class="line"><span class="string">    :param type:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&#x27;end&#x27;</span>:</span><br><span class="line">        <span class="comment"># 移动到末尾</span></span><br><span class="line">        js = <span class="string">&quot;window.scrollTo(0, document.body.scrollHeight);&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span> == <span class="string">&#x27;middle&#x27;</span>:</span><br><span class="line">        <span class="comment"># 移动到中间</span></span><br><span class="line">        js = <span class="string">&quot;window.scrollTo(0, document.body.scrollHeight/2);&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span> == <span class="string">&#x27;top&#x27;</span>:</span><br><span class="line">        <span class="comment"># 移动到顶部</span></span><br><span class="line">        js = <span class="string">&quot;window.scrollTo(0, document.body.scrollHeight/document.body.scrollHeight);&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 暂时设置移动 1/5</span></span><br><span class="line">        js = <span class="string">&quot;window.scrollTo(0, document.body.scrollHeight/5);&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.driver.execute_script(js)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        mylog.exception(<span class="string">&quot;scroll_to_移动屏幕到&#123;0&#125;失败，请检查&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>, e))</span><br><span class="line">        self.save_imgs(model=<span class="built_in">type</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Chrome 浏览器实例</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开目标网页</span></span><br><span class="line">driver.get(<span class="string">&quot;https://example.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取需要滚动的元素</span></span><br><span class="line">target_element = driver.find_element_by_css_selector(<span class="string">&quot;#target-element&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 ActionChains 对象</span></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ActionChains 执行缓动下滑操作</span></span><br><span class="line">actions.move_to_element(target_element).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h4 id="屏幕截屏"><a href="#屏幕截屏" class="headerlink" title="屏幕截屏"></a>屏幕截屏</h4><p><strong>Selenium屏幕截图</strong></p><p>WebDriver内置了一些在测试中捕获屏幕并保存的方法：</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th style="text-align:center">方法</th><th style="text-align:center">方法描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">save_screenshot(filename)</td><td style="text-align:center">获取当前屏幕截图并保存为指定文件，filename指指定保存的路径或者图片的文件名</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">get_screenshot_as_base64()</td><td style="text-align:center">获取当前屏幕截图base65编码字符串</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">get_screenshot_as_file(fimename)</td><td style="text-align:center">获取当前的屏幕截图，使用完整的路径</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">get_screenshot_as_png()</td><td style="text-align:center">获取当前屏幕截图的二进制文件数据</td></tr></tbody></table></div><p>全屏截图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">driver.save_screenshot(<span class="string">&#x27;screenshot.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 截取屏幕截图并保存为文件</span></span><br><span class="line">driver.get_screenshot_as_file(<span class="string">&quot;screenshot.png&quot;</span>)</span><br><span class="line"><span class="comment"># 截取屏幕截图并保存为时间命名文件</span></span><br><span class="line">st=strftime(<span class="string">&quot;%Y-%m-%d-%H-%M-%S&quot;</span>,localtime(time()))</span><br><span class="line">fime_name = st+<span class="string">&#x27;.png&#x27;</span></span><br><span class="line">self.driver.save_screenshot(fime_name)</span><br><span class="line"><span class="comment"># 保存屏幕截图到目录下</span></span><br><span class="line">path = os.path.abspath(<span class="string">&#x27;scrennshot&#x27;</span>)</span><br><span class="line">file_path = path+<span class="string">&#x27;/&#x27;</span>+fime_name</span><br><span class="line">self.driver.get_screenshot_as_file(file_path)</span><br></pre></td></tr></table></figure><p>获取当前屏幕截图base65编码字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前屏幕截图的 Base64 编码字符串</span></span><br><span class="line">screenshot_base64 = driver.get_screenshot_as_base64()</span><br></pre></td></tr></table></figure><p>获取当前屏幕截图的二进制文件数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前屏幕截图的二进制文件数据</span></span><br><span class="line">screenshot_data = driver.get_screenshot_as_png()</span><br></pre></td></tr></table></figure><p>屏幕截图示例（代码肯定会报错的哈，这里是为了演示测试失败时，自动截图的功能（比如有的时候弹出不应该有的警告或者错误信息什么的，就可以截图保留记录)）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line">        cls.driver = webdriver.Chrome()</span><br><span class="line">        cls.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">        cls.driver.maximize_window()</span><br><span class="line">       cls.driver.get(<span class="string">&quot;https://www.cnblogs.com/&quot;</span>)</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">test_login</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">           login_area = self.driver.find_element_by_css_selector(<span class="string">&#x27;#login_area&#x27;</span>)</span><br><span class="line">           register = login_area.find_element_by_link_text(<span class="string">&#x27;注册111&#x27;</span>)</span><br><span class="line">           register.click()</span><br><span class="line">       <span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">           <span class="comment">#找不到元素时，截图</span></span><br><span class="line">           self.driver.save_screenshot(<span class="string">&#x27;image/test_login/test_login_area.png&#x27;</span>)</span><br><span class="line">           <span class="keyword">raise</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">   @classmethod</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">       cls.driver.quit()</span><br></pre></td></tr></table></figure><h4 id="PyAutoGUI"><a href="#PyAutoGUI" class="headerlink" title="PyAutoGUI"></a>PyAutoGUI</h4><p><code>PyAutoGUI</code>是一种跨平台的GUI自动化工具，它接管了鼠标、键盘使用权，基本上是完全仿照人的操作。</p><p><strong>PyAutoGUI的主要功能</strong></p><ul><li>鼠标操作：PyAutoGUI可以模拟鼠标移动、点击、拖拽等操作，可以控制鼠标的位置和点击的坐标。</li><li>键盘操作：PyAutoGUI可以模拟键盘按键和组合键的操作，如按下和释放按键、输入文本等。</li><li>屏幕操作：PyAutoGUI可以获取屏幕的大小、截屏、查找指定图像的位置等。</li><li>延时控制：PyAutoGUI可以控制鼠标和键盘操作的延时，以确保操作的正确性和稳定性。</li></ul><p>1.<code>pyautogui</code>：官方文档</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pyautogui.readthedocs.org/</span><br></pre></td></tr></table></figure><p>2.安装安装pyautogui</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install pyautogui</span><br><span class="line">python.exe -m pip install --upgrade pip</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>GUI 控制功能</strong></p><p>​    控制鼠标键盘使用的模块为：<strong>pyautogui</strong>，这个模块操作起鼠标键盘的时候，非常的迅速，而且如果该模块控制了鼠标后，程序比较难关闭，这时我们有两个方法专门针对以上的情况：</p><p><strong>自动防故障功能</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyautogui.FAILSAFE =<span class="literal">False</span></span><br></pre></td></tr></table></figure><p>默认这项功能为True, 这项功能意味着：当鼠标的指针在屏幕的最坐上方，程序会报错；目的是为了防止程序无法停止；</p><p><strong>停顿功能</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyautogui.PAUSE = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>意味着所有<a href="https://so.csdn.net/so/search?q=pyautogui&amp;spm=1001.2101.3001.7020">pyautogui</a>的指令都要暂停一秒；其他指令不会停顿；这样做，可以防止键盘鼠标操作太快；</p><p><strong>鼠标操作</strong></p><p><strong>控制鼠标移动</strong></p><p><strong>获得屏幕分辨率</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回所用显示器的分辨率； </span></span><br><span class="line"><span class="comment"># 输出：Size(width=1920, height=1080)</span></span><br><span class="line"><span class="built_in">print</span>(pyautogui.size())</span><br><span class="line">width,height = pyautogui.size()</span><br><span class="line"><span class="built_in">print</span>(width,height)  </span><br><span class="line"><span class="comment"># 1920 1080</span></span><br></pre></td></tr></table></figure><p><strong>移动鼠标</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pyautogui.moveTo(<span class="number">100</span>,<span class="number">300</span>,duration=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 按方向移动，左右正负值对应右左，上下正负值对应下上</span></span><br><span class="line"><span class="comment"># moveRel()：这是PyAutoGUI库中的一个函数，用于模拟相对于当前鼠标位置的移动操作。</span></span><br><span class="line"><span class="comment"># 第一个参数是左右移动像素值，第二个是上下，向右移动100px，向下移动500px, 这个过程持续 1 秒钟；</span></span><br><span class="line">pyautogui.moveRel(<span class="number">100</span>,<span class="number">500</span>,duration=<span class="number">1</span>)   </span><br></pre></td></tr></table></figure><p><strong>获取鼠标位置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pyautogui.position())   </span><br><span class="line"><span class="comment"># 得到当前鼠标位置；输出：Point(x=200, y=800)</span></span><br></pre></td></tr></table></figure><p><strong>控制鼠标点击</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击鼠标</span></span><br><span class="line">pyautogui.click(<span class="number">10</span>,<span class="number">10</span>)   <span class="comment"># 鼠标点击指定位置，默认左键</span></span><br><span class="line">pyautogui.click(<span class="number">10</span>,<span class="number">10</span>,button=<span class="string">&#x27;left&#x27;</span>)  <span class="comment"># 单击左键</span></span><br><span class="line">pyautogui.click(<span class="number">1000</span>,<span class="number">300</span>,button=<span class="string">&#x27;right&#x27;</span>)  <span class="comment"># 单击右键</span></span><br><span class="line">pyautogui.click(<span class="number">1000</span>,<span class="number">300</span>,button=<span class="string">&#x27;middle&#x27;</span>)  <span class="comment"># 单击中间</span></span><br><span class="line"><span class="comment"># 双击鼠标</span></span><br><span class="line">pyautogui.doubleClick(<span class="number">10</span>,<span class="number">10</span>)  <span class="comment"># 指定位置，双击左键</span></span><br><span class="line">pyautogui.rightClick(<span class="number">10</span>,<span class="number">10</span>)   <span class="comment"># 指定位置，双击右键</span></span><br><span class="line">pyautogui.middleClick(<span class="number">10</span>,<span class="number">10</span>)  <span class="comment"># 指定位置，双击中键</span></span><br><span class="line"><span class="comment"># 点击 &amp; 释放</span></span><br><span class="line">pyautogui.mouseDown()   <span class="comment"># 鼠标按下</span></span><br><span class="line">pyautogui.mouseUp()    <span class="comment"># 鼠标释放</span></span><br></pre></td></tr></table></figure><p><strong>控制鼠标拖动</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拖动到指定位置</span></span><br><span class="line">pyautogui.dragTo(<span class="number">100</span>,<span class="number">300</span>,duration=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>将鼠标拖动到指定的坐标；duration 的作用是设置移动时间，所有的gui函数都有这个参数，而且都是可选参数；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按方向拖动</span></span><br><span class="line"><span class="comment"># 向右拖动100px，向下拖动500px, 这个过程持续 1 秒钟；</span></span><br><span class="line">pyautogui.dragRel(<span class="number">100</span>,<span class="number">500</span>,duration=<span class="number">4</span>)   <span class="comment"># 第一个参数是左右移动像素值，第二个是上下，</span></span><br></pre></td></tr></table></figure><p><strong>控制鼠标滚动</strong></p><p>控制鼠标滚动的函数是scroll()， 传入一个整数的参数，说明向上或向下滚动多少个单位；单位根据操作系统不同而不同；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向上滚动300个单位；</span></span><br><span class="line">pyautogui.scroll(<span class="number">300</span>)</span><br></pre></td></tr></table></figure><p><strong>屏幕处理</strong></p><p><strong>获取屏幕截图</strong></p><p>我们控制鼠标的操作，不能盲目的进行，所以我们需要监控屏幕上的内容，从而决定要不要进行对应的操作， pyautogui 提供了一个方法screenshot()，可以返回一个Pillow的image对象；<br>这里有三个常用函数：</p><ul><li><strong>im = pyautogui.screenshot()</strong>：返回屏幕的截图，是一个Pillow的image对象</li><li><strong>im.getpixel((500, 500))</strong>：返回im对象上，（500，500）这一点像素的颜色，是一个RGB元组</li><li><strong>pyautogui.pixelMatchesColor(500,500,(12,120,400))</strong> ：是一个对比函数，对比的是屏幕上（500，500）这一点像素的颜色，与所给的元素是否相同；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存屏幕截图；</span></span><br><span class="line">im = pyautogui.screenshot()</span><br><span class="line">im.save(<span class="string">&#x27;屏幕截图.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>识别图像</strong></p><p>首先，我们需要先获得一个屏幕快照，例如我们想要点赞，我们就先把大拇指的图片保存下来；然后使用函数：locateOnScreen(‘zan.png’) ，如果可以找到图片，则返回图片的位置，如：Box(left=25, top=703, width=22, height=22)；如果找不到图片，则返回None;如果，屏幕上有多处图片可以匹配，则需要使用locateAllOnScreen(‘zan.png’) ，如果匹配到多个值，则返回一个list，参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line">pyautogui.PAUSE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像识别（一个）</span></span><br><span class="line">btm = pyautogui.locateOnScreen(<span class="string">&#x27;zan.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(btm)  <span class="comment"># Box(left=1280, top=344, width=22, height=22)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像识别（多个）</span></span><br><span class="line">btm = pyautogui.locateAllOnScreen(<span class="string">&#x27;zan.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(btm))  <span class="comment"># [Box(left=1280, top=344, width=22, height=22), Box(left=25, top=594, width=22, height=22)]</span></span><br></pre></td></tr></table></figure><p><strong>pyautogui.center((left, top, width, height))</strong> 返回指定位置的中心点；这样，我们就可以再配合鼠标操作点击找到图片的中心；</p><p><strong>键盘输入</strong></p><p><strong>键盘输入函数</strong></p><ul><li><strong>pyautogui.keyDown()</strong> ： 模拟按键按下；</li><li><strong>pyautogui.keyUp()</strong> ： 模拟按键释放；</li><li><strong>pyautogui.press()</strong> ： # 就是调用keyDown() &amp; keyUp(),模拟一次按键</li><li><strong>pyautogui.typewrite(‘this’,0.5)</strong> ： 第一参数是输入内容，第二个参数是每个字符间的间隔时间；</li><li><strong>pyautogui.typewrite([‘T’,‘h’,‘i’,‘s’])</strong>：typewrite 还可以传入单字母的列表；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出： $ ；</span><br><span class="line">pyautogui.keyDown(<span class="string">&#x27;shift&#x27;</span>)    <span class="comment"># 按下shift</span></span><br><span class="line">pyautogui.press(<span class="string">&#x27;4&#x27;</span>)    <span class="comment"># 按下 4</span></span><br><span class="line">pyautogui.keyUp(<span class="string">&#x27;shift&#x27;</span>)   <span class="comment"># 释放 shift</span></span><br><span class="line"><span class="comment"># 缓慢的输出$：</span></span><br><span class="line">pyautogui.typewrite(<span class="string">&#x27;$$$$&#x27;</span>, <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><strong>键盘特殊按键</strong></p><p>有时我们需要输入一些特殊的按键，比如向左的箭头，这些有相对应的键盘字符串表示，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出：This</span></span><br><span class="line">pyautogui.typewrite([<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;left&#x27;</span>,<span class="string">&#x27;left&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,])</span><br></pre></td></tr></table></figure><p>解释：这里的left就是向左的箭头；诸如此类的键盘字符串，还有很多，参考下表： </p><div class="table-container"><table><thead><tr><th><strong>键盘字符串</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>enter(或return 或 \n)</td><td>回车</td></tr><tr><td>esc</td><td>ESC键</td></tr><tr><td>shiftleft, shiftright</td><td>左右SHIFT键</td></tr><tr><td>altleft, altright</td><td>左右ALT键</td></tr><tr><td>ctrlleft, ctrlright</td><td>左右CTRL键</td></tr><tr><td>tab (\t)</td><td>TAB键</td></tr><tr><td>backspace, delete</td><td>BACKSPACE 、DELETE键</td></tr><tr><td>pageup, pagedown</td><td>PAGE UP 和 PAGE DOWN键</td></tr><tr><td>home, end</td><td>HOME 和 END键</td></tr><tr><td>up, down, left,right</td><td>箭头键</td></tr><tr><td>f1, f2, f3…. f12</td><td>F1…….F12键</td></tr><tr><td>volumemute, volumedown,volumeup</td><td>声音变大变小静音（有些键盘没有）</td></tr><tr><td>pause</td><td>PAUSE键，暂停键</td></tr><tr><td>capslock</td><td>CAPS LOCK 键</td></tr><tr><td>numlock</td><td>NUM LOCK 键</td></tr><tr><td>scrolllock</td><td>SCROLLLOCK 键</td></tr><tr><td>insert</td><td>INSERT键</td></tr><tr><td>printscreen</td><td>PRINT SCREEN键</td></tr><tr><td>winleft, winright</td><td>Win键（windows ）</td></tr><tr><td>command</td><td>command键（Mac OS X ）</td></tr><tr><td>option</td><td>option（Mac OS X）</td></tr></tbody></table></div><p><strong>快捷键</strong></p><p>如果我们需要模拟复制的快捷键 ctrl + c ，如果用前面的方法，则代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pyautogui.keyDown(<span class="string">&#x27;ctrl&#x27;</span>)</span><br><span class="line">pyautogui.keyDown(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">pyautogui.keyUp(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">pyautogui.keyUp(<span class="string">&#x27;ctrl&#x27;</span>)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>快捷键的按键与释放顺序非常关键，这时我们可以使用 pyautogui.hotkey()，这个函数可以接受多个参数，按传入顺序按下，再按照相反顺序释放。上述快捷键 ctrl + c ，可以将代码变为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>提示信息框</strong></p><p><strong>提示框/警告框</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line">a = pyautogui.alert(text=<span class="string">&#x27;This is an alert box.&#x27;</span>, title=<span class="string">&#x27;Test&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><h4 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1）装饰器</span></span><br><span class="line"><span class="comment"># 2）自动化关键数据记录：截图、日志、page_source</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> allure</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器的外函数需要一个形参代表函数对象</span></span><br><span class="line"><span class="comment"># 问题：需要通过driver实例截图和打印page_source，装饰器需要先去获取driver实例对象</span></span><br><span class="line"><span class="comment"># 解决：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ui_exception_record</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):  <span class="comment"># 内函数</span></span><br><span class="line">        <span class="comment"># 获取被装饰方法的self，如def test_baidu(self)方法中的self，即实例对象</span></span><br><span class="line">        <span class="comment"># 通过self就可以拿到声明的实例变量</span></span><br><span class="line">        <span class="comment"># 前提条件，被装饰的方法是一个实例方法，实例需要有实例变量self.driver</span></span><br><span class="line">        <span class="comment"># 注意：要保证使用装饰器时，driver已经声明，在用例类里面的前置操作对self.driver声明，也可以将driver = args[0].driver放在except Exception里面的第一行</span></span><br><span class="line">        <span class="comment"># driver = args[0].driver</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 当被装饰方法/函数发生异常时就捕获并做数据记录</span></span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)   <span class="comment"># 这里会执行被装饰函数</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            driver = args[<span class="number">0</span>].driver</span><br><span class="line">            <span class="comment"># 出现异常时的处理，截图操作</span></span><br><span class="line">            timestamp = <span class="built_in">int</span>(time.time())  <span class="comment"># 获取当前时间的时间戳</span></span><br><span class="line">            <span class="comment"># 提前创建好image和pagesource路径</span></span><br><span class="line">            image_path = <span class="string">f&quot;./image/image_<span class="subst">&#123;timestamp&#125;</span>.PNG&quot;</span></span><br><span class="line">            page_source_path = <span class="string">f&quot;./page_source/page_source_<span class="subst">&#123;timestamp&#125;</span>.html &quot;</span></span><br><span class="line">            <span class="comment"># 截图</span></span><br><span class="line">            driver.save_screenshot(image_path)</span><br><span class="line">            <span class="comment"># 记录page_source,将获取的page_source写入到record.html</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(page_source_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write( driver.page_source)</span><br><span class="line">            <span class="comment"># 将截图放到报告中</span></span><br><span class="line">            allure.attach.file(image_path, name=<span class="string">&quot;picture&quot;</span>, attachment_type=allure.attachment_type.PNG)</span><br><span class="line">            <span class="comment"># 将pagesource记录放到报告中</span></span><br><span class="line">            <span class="comment"># 想要html的源码可以将attachment_type=allure.attachment_type.TEXT</span></span><br><span class="line">            allure.attach.file(page_source_path, name=<span class="string">&quot;pagesource&quot;</span>, attachment_type=allure.attachment_type.TEXT)</span><br><span class="line">            <span class="comment"># 问题1：异常处理会影响用例本身的结果，如本来就是有异常的用例，却通过了</span></span><br><span class="line">            <span class="comment"># 解决：在exception之后再把异常抛出</span></span><br><span class="line">            <span class="keyword">raise</span> Exception</span><br><span class="line">    <span class="keyword">return</span> inner  <span class="comment"># 返回内函数，不需要加括号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题2：异常捕获处理代码和业务代码无关，不能耦合，如有多条用例就要写多个异常捕获</span></span><br><span class="line"><span class="comment"># 解决：使用装饰器装饰用例或者相关方法，就不会体现在源码中了</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestBaidu</span>:</span><br><span class="line">    <span class="comment"># 前置操作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver = webdriver.Chrome()   <span class="comment"># driver声明</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后置操作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果装饰器中的try没有return，被装饰方法有返回值时，会丢失返回值，其他方法调用就没有返回值</span></span><br><span class="line">    <span class="comment"># @ui_exception_record</span></span><br><span class="line">    <span class="comment"># def find(self):</span></span><br><span class="line">        <span class="comment"># return self.driver.find_element(By.ID, &quot;su&quot;)   # 返回find_element对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @ui_exception_record   </span><span class="comment"># 调用上面的装饰器</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_baidu</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">        <span class="comment"># self.find().click()  # 调用find()方法的返回对象，并点击</span></span><br><span class="line">        self.driver.find_element(By.ID, <span class="string">&quot;su&quot;</span>).click()  <span class="comment"># 定位&quot;百度一下&quot;按钮</span></span><br></pre></td></tr></table></figure><h4 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h4><p><strong>Jpress项目</strong></p><ul><li>testcases  测试用例</li><li>data   测试数据</li><li>logs log  日志</li><li>config  配置文件</li><li>reports  测试报告</li><li>screenshots  截屏</li><li>lib  第三方库</li><li>util  类</li></ul>]]></content>
      
      
      <categories>
          
          <category> web自动化 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="我的联系"><a href="#我的联系" class="headerlink" title="我的联系"></a>我的联系</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>略略略略略略略略<br>略略略略略略略略<br>略略略略略略略略<br>略略略略略略略略</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/comments/index.html"/>
      <url>/comments/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {  background: #1e1e1e;  color: antiquewhite;}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {  background: #3ecdf1;  color: #f2f2f2;}/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}/* 背景宇宙星光  */#universe{  display: block;  position: fixed;  margin: 0;  padding: 0;  border: 0;  outline: 0;  left: 0;  top: 0;  width: 100%;  height: 100%;  pointer-events: none;  /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */  z-index: -1;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 文章页背景 */.layout_post>#post {    /* 以下代表透明度为0.7 可以自行修改*/    background: rgba(255,255,255,.7);} /* 所有页面背景 */#aside_content .card-widget, #recent-posts>.recent-post-item, .layout_page>div:first-child:not(.recent-posts), .layout_post>#page, .layout_post>#post, .read-mode .layout_post>#post{    /* 以下代表透明度为0.7 */    background: rgba(255,255,255,.7);}/*侧边卡片的透明度 */:root {  --card-bg: rgba(255, 255, 255, .7);}/* 页脚透明 */#footer {/* 以下代表透明度为0.7 */background: rgba(255,255,255, .0);} /* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #104E8B;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #104E8B;  margin-left: -1.15rem;  font-size: 1.1rem;  margin-top: 0rem;}#content-inner.layout h3::before {  color: #104E8B;  margin-left: -1.10rem;  font-size: 0.95rem;  margin-top: 0rem;}#content-inner.layout h4::before {  color: #104E8B;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: 0rem;}#content-inner.layout h5::before {  color: #104E8B;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #104E8B;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}.pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 4px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 7rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden}.pace-inactive .pace-progress {    opacity: 0;    transition: .3s ease-in}.pace .pace-progress {    -webkit-box-sizing: border-box;    -moz-box-sizing: border-box;    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    -webkit-transform: translate3d(0, 0, 0);    -moz-transform: translate3d(0, 0, 0);    -ms-transform: translate3d(0, 0, 0);    -o-transform: translate3d(0, 0, 0);    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    /* linear-gradient(to right, #3494e6, #ec6ead) */    background: linear-gradient(to right, #43cea2, #3866ca);    animation: gradient 2s ease infinite;    background-size: 200%}.pace.pace-inactive {    opacity: 0;    transition: .3s;    top: -8px}body::-webkit-scrollbar {  width: 0;}.neko {  width: 64px;  height: 64px;  background-image: url("https://bu.dusays.com/2022/07/20/62d812db74be9.png");  position: absolute;  right: 32px;  background-repeat: no-repeat;  background-size: contain;  transform: translateX(50%);  cursor: pointer;  font-family: tzy;  font-weight: 600;  font-size: 16px;  color: #6f42c1;  display: none;}.neko::after {  display: none;  width: 100px;  height: 100px;  background-image: url("https://bu.dusays.com/2022/07/20/62d812d95e6f5.png");  background-size: contain;  z-index: 9999;  position: absolute;  right: 50%;  text-align: center;  line-height: 100px;  top: -115%;}.neko.showMsg::after {  content: attr(data-msg);  display: block;  overflow: hidden;  text-overflow: ellipsis;}.neko:hover::after {  content: attr(data-msg);  display: block;  overflow: hidden;  text-overflow: ellipsis;}.neko.fontColor::after {  color: #333;}/*** @description: 滚动条样式  跟猫二选一*/@media screen and (max-width:992px) {  ::-webkit-scrollbar {      width: 8px !important;      height: 8px !important  }  ::-webkit-scrollbar-track {      border-radius: 2em;  }  ::-webkit-scrollbar-thumb {      background-color: rgb(255 255 255 / .3);      background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);      border-radius: 2em  }  ::-webkit-scrollbar-corner {      background-color: transparent  }}body::-webkit-scrollbar {  width: 0;}.neko {  width: 64px;  height: 64px;  background-image: url("https://bu.dusays.com/2022/07/20/62d812db74be9.png");  position: absolute;  right: 32px;  background-repeat: no-repeat;  background-size: contain;  transform: translateX(50%);  cursor: pointer;  font-family: tzy;  font-weight: 600;  font-size: 16px;  color: #6f42c1;  display: none;}.neko::after {  display: none;  width: 100px;  height: 100px;  background-image: url("https://bu.dusays.com/2022/07/20/62d812d95e6f5.png");  background-size: contain;  z-index: 9999;  position: absolute;  right: 50%;  text-align: center;  line-height: 100px;  top: -115%;}.neko.showMsg::after {  content: attr(data-msg);  display: block;  overflow: hidden;  text-overflow: ellipsis;}.neko:hover::after {  content: attr(data-msg);  display: block;  overflow: hidden;  text-overflow: ellipsis;}.neko.fontColor::after {  color: #333;}/*** @description: 滚动条样式  跟猫二选一*/@media screen and (max-width:992px) {  ::-webkit-scrollbar {      width: 8px !important;      height: 8px !important  }  ::-webkit-scrollbar-track {      border-radius: 2em;  }  ::-webkit-scrollbar-thumb {      background-color: rgb(255 255 255 / .3);      background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);      border-radius: 2em  }  ::-webkit-scrollbar-corner {      background-color: transparent  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/sakura.js"/>
      <url>/js/sakura.js</url>
      
        <content type="html"><![CDATA[var stop, staticx;var img = new Image();// 将引入的图片文件替换为你想要的即可img.src = "https://img.cdn.nesxc.com/upload/wordpress/202202251325420webp";function Sakura(x, y, s, r, fn) {    this.x = x;    this.y = y;    this.s = s;    this.r = r;    this.fn = fn}Sakura.prototype.draw = function (cxt) {    cxt.save();    var xc = 20 * this.s / 2;    cxt.translate(this.x, this.y);    cxt.rotate(this.r);    cxt.drawImage(img, 0, 0, 20 * this.s, 20 * this.s);    cxt.restore()};Sakura.prototype.update = function () {    this.x = this.fn.x(this.x, this.y);    this.y = this.fn.y(this.y, this.y);    this.r = this.fn.r(this.r);    if (this.x > window.innerWidth || this.x < 0 || this.y > window.innerHeight || this.y < 0) {        this.r = getRandom("fnr");        if (Math.random() > 0.4) {            this.x = getRandom("x");            this.y = 0;            this.s = getRandom("s");            this.r = getRandom("r")        } else {            this.x = window.innerWidth;            this.y = getRandom("y");            this.s = getRandom("s");            this.r = getRandom("r")        }    }};SakuraList = function () {    this.list = []};SakuraList.prototype.push = function (sakura) {    this.list.push(sakura)};SakuraList.prototype.update = function () {    for (var i = 0, len = this.list.length; i < len; i++) {        this.list[i].update()    }};SakuraList.prototype.draw = function (cxt) {    for (var i = 0, len = this.list.length; i < len; i++) {        this.list[i].draw(cxt)    }};SakuraList.prototype.get = function (i) {    return this.list[i]};SakuraList.prototype.size = function () {    return this.list.length};function getRandom(option) {    var ret, random;    switch (option) {        case "x":            ret = Math.random() * window.innerWidth;            break;        case "y":            ret = Math.random() * window.innerHeight;            break;        case "s":            ret = Math.random();            break;        case "r":            ret = Math.random() * 4;            break;        case "fnx":            random = -0.5 + Math.random() * 1;            ret = function (x, y) {                return x + 0.5 * random - 1.7            };            break;        case "fny":            random = 1.5 + Math.random() * 0.7;            ret = function (x, y) {                return y + random            };            break;        case "fnr":            random = Math.random() * 0.03;            ret = function (r) {                return r + random            };            break    }    return ret}function startSakura() {    requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame;    var canvas = document.createElement("canvas"),        cxt;    staticx = true;    canvas.height = window.innerHeight;    canvas.width = window.innerWidth;    canvas.setAttribute("style", "position: fixed;left: 0;top: 0;pointer-events: none;");    canvas.setAttribute("id", "canvas_sakura");    document.getElementsByTagName("body")[0].appendChild(canvas);    cxt = canvas.getContext("2d");    var sakuraList = new SakuraList();    for (var i = 0; i < 50; i++) {        var sakura, randomX, randomY, randomS, randomR, randomFnx, randomFny;        randomX = getRandom("x");        randomY = getRandom("y");        randomR = getRandom("r");        randomS = getRandom("s");        randomFnx = getRandom("fnx");        randomFny = getRandom("fny");        randomFnR = getRandom("fnr");        sakura = new Sakura(randomX, randomY, randomS, randomR, {            x: randomFnx,            y: randomFny,            r: randomFnR        });        sakura.draw(cxt);        sakuraList.push(sakura)    }    stop = requestAnimationFrame(function () {        cxt.clearRect(0, 0, canvas.width, canvas.height);        sakuraList.update();        sakuraList.draw(cxt);        stop = requestAnimationFrame(arguments.callee)    })}window.onresize = function () {    var canvasSnow = document.getElementById("canvas_snow")};img.onload = function () {    startSakura()};function stopp() {    if (staticx) {        var child = document.getElementById("canvas_sakura");        child.parentNode.removeChild(child);        window.cancelAnimationFrame(stop);        staticx = false    } else {        startSakura()    }};]]></content>
      
    </entry>
    
    
  
</search>
